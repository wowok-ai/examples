process.argv = [process.argv[0], ...process.argv.slice(3)];

		import __esrun_url from 'url';

		import { createRequire as __esrun_createRequire } from "module";

		const __esrun_fileUrl = __esrun_url.pathToFileURL("\wowok\test\node_modules\.bin\esrun-1709189650738.tmp.mjs");

		const require = __esrun_createRequire(__esrun_fileUrl);
// src/index.ts
import { SuiClient as SuiClient2, getFullnodeUrl as getFullnodeUrl2 } from "../../node_modules/@mysten/sui.js/dist/esm/client/index.js";
import { TransactionBlock as TransactionBlock2 } from "../../node_modules/@mysten/sui.js/dist/esm/builder/export.js";
import { Ed25519Keypair } from "../../node_modules/@mysten/sui.js/dist/esm/keypairs/ed25519/index.js";
import { BCS as BCS4, fromHEX as fromHEX4 } from "../../node_modules/@mysten/bcs/dist/esm/index.js";

// src/config.ts
import { Inputs } from "../../node_modules/@mysten/sui.js/dist/esm/builder/export.js";

// src/util.ts
function capitalize(s) {
  return s && s[0].toUpperCase() + s.slice(1);
}

// src/config.ts
var Config_EntryPoint = "localnet" /* localnet */;
var PACKAGE = "0x77b83ae81904154142e48683731800285932ff49317cde241a2dd80460f5dd34";
var SENDER_PRIV = "0xc9bbc30f72ef7d9aa674a3be1448b9267141a676b59f3f4315231617a5bbc0e8";
var ADDR = "0xe386bb9e01b3528b75f3751ad8a1e418b207ad979fea364087deef5250a73d3f";
var MODULES = /* @__PURE__ */ ((MODULES5) => {
  MODULES5["machine"] = "machine";
  MODULES5["node"] = "node";
  MODULES5["progress"] = "progress";
  MODULES5["community"] = "community";
  MODULES5["repository"] = "repository";
  MODULES5["permission"] = "permission";
  MODULES5["passport"] = "passport";
  MODULES5["guard"] = "guard";
  MODULES5["vote"] = "vote";
  MODULES5["demand"] = "demand";
  MODULES5["order"] = "order";
  MODULES5["reward"] = "reward";
  MODULES5["service"] = "service";
  MODULES5["wowok"] = "wowok";
  return MODULES5;
})(MODULES || {});
var OBJECTS_TYPE_PREFIX = Object.keys(MODULES).map((key) => {
  return PACKAGE + "::" + key + "::";
});
var OBJECTS_TYPE = Object.keys(MODULES).map((key) => {
  let i = PACKAGE + "::" + key + "::";
  return i + capitalize(key);
});
var PermissionFn = (fn) => {
  return `${PACKAGE}::${"permission" /* permission */}::${fn}`;
};
var CLOCK_OBJECT = Inputs.SharedObjectRef({
  objectId: "0x6",
  mutable: false,
  initialSharedVersion: 1
});

// src/guard.ts
import { BCS, getSuiMoveConfig } from "../../node_modules/@mysten/bcs/dist/esm/index.js";
var Sense_Cmd = [
  ["permission" /* permission */, "creator", 1, [], 101 /* TYPE_STATIC_address */],
  ["permission" /* permission */, "is_admin", 2, [101 /* TYPE_STATIC_address */], 100 /* TYPE_STATIC_bool */],
  ["permission" /* permission */, "has_rights", 3, [101 /* TYPE_STATIC_address */, 102 /* TYPE_STATIC_u64 */], 100 /* TYPE_STATIC_bool */],
  ["permission" /* permission */, "contains_address", 4, [101 /* TYPE_STATIC_address */], 100 /* TYPE_STATIC_bool */],
  ["permission" /* permission */, "contains_index", 5, [101 /* TYPE_STATIC_address */, 102 /* TYPE_STATIC_u64 */], 100 /* TYPE_STATIC_bool */],
  ["permission" /* permission */, "contains_guard", 6, [101 /* TYPE_STATIC_address */, 102 /* TYPE_STATIC_u64 */], 100 /* TYPE_STATIC_bool */],
  ["repository" /* repository */, "permission", 1, [], 101 /* TYPE_STATIC_address */],
  ["repository" /* repository */, "policy_contains", 2, [105 /* TYPE_STATIC_vec_u8 */], 100 /* TYPE_STATIC_bool */],
  ["repository" /* repository */, "policy_has_permission_index", 3, [105 /* TYPE_STATIC_vec_u8 */], 100 /* TYPE_STATIC_bool */],
  ["repository" /* repository */, "policy_permission_index", 4, [105 /* TYPE_STATIC_vec_u8 */], 102 /* TYPE_STATIC_u64 */],
  ["repository" /* repository */, "policy_value_type", 5, [105 /* TYPE_STATIC_vec_u8 */], 103 /* TYPE_STATIC_u8 */],
  ["repository" /* repository */, "contains_id", 6, [101 /* TYPE_STATIC_address */], 100 /* TYPE_STATIC_bool */],
  ["repository" /* repository */, "contains_value", 7, [101 /* TYPE_STATIC_address */, 105 /* TYPE_STATIC_vec_u8 */], 100 /* TYPE_STATIC_bool */],
  ["repository" /* repository */, "value_without_type", 8, [101 /* TYPE_STATIC_address */, 105 /* TYPE_STATIC_vec_u8 */], 105 /* TYPE_STATIC_vec_u8 */],
  ["repository" /* repository */, "value", 9, [101 /* TYPE_STATIC_address */, 105 /* TYPE_STATIC_vec_u8 */], 105 /* TYPE_STATIC_vec_u8 */],
  ["repository" /* repository */, "type", 10, [], 103 /* TYPE_STATIC_u8 */],
  ["repository" /* repository */, "policy_mode", 11, [], 103 /* TYPE_STATIC_u8 */]
];

// src/query.ts
import { SuiClient, getFullnodeUrl } from "../../node_modules/@mysten/sui.js/dist/esm/client/index.js";
import { TransactionBlock, Inputs as Inputs2 } from "../../node_modules/@mysten/sui.js/dist/esm/builder/export.js";
import { BCS as BCS2, getSuiMoveConfig as getSuiMoveConfig2 } from "../../node_modules/@mysten/bcs/dist/esm/index.js";

// src/permission.ts
import { BCS as BCS3 } from "../../node_modules/@mysten/bcs/dist/esm/index.js";
function create_permission(txb, data) {
  let permission2 = txb.moveCall({
    target: PermissionFn("new"),
    arguments: [txb.pure(data.description)]
  });
  let guards = [];
  console.log(data.entities);
  for (let i = 0; i < data.entities.length; i++) {
    let entity = data.entities[i];
    let indexes = [];
    for (let j = 0; j < entity.permissions.length; j++) {
      let index = entity.permissions[j];
      if (index?.guard && index.guard.length > 0) {
        guards.push({ who: entity.who, index: index.index, guard: index.guard });
      }
      indexes.push(index.index);
    }
    if (indexes.length > 0) {
      txb.moveCall({
        target: PermissionFn("add_batch"),
        arguments: [permission2, txb.pure(entity.who, BCS3.ADDRESS), txb.pure(permission2, "vector<u64>")]
      });
    }
  }
  console.log(guards);
  guards.forEach(({ who, index, guard }) => {
    txb.moveCall({
      target: PermissionFn("guard_set"),
      arguments: [permission2, txb.pure(who, BCS3.ADDRESS), txb.pure(index, BCS3.U64), txb.object(guard)]
    });
  });
  txb.moveCall({
    target: PermissionFn("admin_add_batch"),
    arguments: [permission2, txb.pure(data.admin, "vector<address>")]
  });
  txb.moveCall({
    target: PermissionFn("create"),
    arguments: [permission2]
  });
}

// src/index.ts
var permissionid = "0x66c09cdb0156ff5dcdc70ef3d2a6a29b5e36c46b28c8b7cf9461f5a83b621b74";
var main = async () => {
  let permissionid1 = await permission(permission_data);
  console.log(permissionid);
};
var permission_data = {
  description: "permission 1",
  admin: [ADDR, "0x26bd78c2f9766b95ebc3f2ccd70922092a79eda49815a91258aa44d68ccf098d", "0xc009bca7fa6e6cedafa1edb4812dc361e81bed605c87edbdd6af917e3e0d9ab3"],
  entities: [
    { who: "0x26bd78c2f9766b95ebc3f2ccd70922092a79eda49815a91258aa44d68ccf098d", permissions: [
      { index: 106 /* repository_policy_add */ },
      { index: 101 /* repository_description_set */ }
    ] },
    { who: "0xc009bca7fa6e6cedafa1edb4812dc361e81bed605c87edbdd6af917e3e0d9ab3", permissions: [
      { index: 107 /* repository_policy_remove */ },
      { index: 107 /* repository_policy_remove */, guard: "0x51627be10211fa81f5d30e568fc0e3229a746b12f1b8c1b7d0abab3b62680c35" }
    ] },
    { who: ADDR, permissions: [] }
  ]
};
var permission = async (data) => {
  const client = new SuiClient2({ url: getFullnodeUrl2(Config_EntryPoint) });
  const txb = new TransactionBlock2();
  create_permission(txb, data);
  const privkey = fromHEX4(SENDER_PRIV);
  const keypair = Ed25519Keypair.fromSecretKey(privkey);
  const options = { showEffects: true };
  const response = await client.signAndExecuteTransactionBlock({
    transactionBlock: txb,
    signer: keypair,
    options
  });
  let permissionid2 = response.effects?.created[0].reference.objectId;
  console.log("permissionid: " + permissionid2);
  return permissionid2;
};
main().then(console.log).catch(console.error);
//# sourceMappingURL=data:application/json;base64,

	