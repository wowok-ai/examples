interface Options$3 {
  forceTSFormat?: boolean;
  disablePreprocessing: boolean;
  output: string | undefined;
  tsconfig: string | undefined;
}

declare function generateOutput(opts: Options$3): Promise<void>;

interface Options$2 {
  tsconfig: string | undefined;
  output: string | undefined;
  failOnWarn: boolean;
}

declare function generatePersisted(opts: Options$2): Promise<void>;

interface Options$1 {
  input: string;
  headers: Record<string, string> | undefined;
  output: string | undefined;
  tsconfig: string | undefined;
}

declare function generateSchema(opts: Options$1): Promise<void>;

interface Options {
  failOnWarn: boolean;
  tsconfig: string | undefined;
  output: string | undefined;
}

declare function generateTurbo(opts: Options): Promise<void>;

declare const api_generateOutput: typeof generateOutput;
declare const api_generatePersisted: typeof generatePersisted;
declare const api_generateSchema: typeof generateSchema;
declare const api_generateTurbo: typeof generateTurbo;
declare namespace api {
  export {
    api_generateOutput as generateOutput,
    api_generatePersisted as generatePersisted,
    api_generateSchema as generateSchema,
    api_generateTurbo as generateTurbo,
  };
}

declare function _main(): Promise<void>;
type MainFn = typeof _main & typeof api;
declare const main: MainFn;

export { main as default, generateOutput, generatePersisted, generateSchema, generateTurbo };
