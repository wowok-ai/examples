var e = require("typescript");

var i = require("@gql.tada/internal");

var n = require("@0no-co/graphqlsp/api");

var t = require("./index-chunk.js");

var a = function(e) {
  e[e.Const = 1] = "Const";
  e[e.Var = 2] = "Var";
  e[e.Int = 3] = "Int";
  e[e.Float = 4] = "Float";
  e[e.BlockString = 5] = "BlockString";
  e[e.String = 6] = "String";
  e[e.Enum = 7] = "Enum";
  return e;
}(a || {});

var r = function(e) {
  e[e.Spread = 1] = "Spread";
  e[e.Name = 2] = "Name";
  return e;
}(r || {});

function mapJoin(e, i, n) {
  var t = "";
  for (var a = 0; a < e.length; a++) {
    if (a) {
      t += i;
    }
    t += n(e[a]);
  }
  return t;
}

var l = "\n";

var s = {
  OperationDefinition(e) {
    var i = e.operation;
    if (e.name) {
      i += " " + e.name.value;
    }
    if (e.variableDefinitions && e.variableDefinitions.length) {
      if (!e.name) {
        i += " ";
      }
      i += "(" + mapJoin(e.variableDefinitions, ", ", s.VariableDefinition) + ")";
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", s.Directive);
    }
    return "query" !== i ? i + " " + s.SelectionSet(e.selectionSet) : s.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var i = s.Variable(e.variable) + ": " + _print(e.type);
    if (e.defaultValue) {
      i += " = " + _print(e.defaultValue);
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", s.Directive);
    }
    return i;
  },
  Field(e) {
    var i = e.alias ? e.alias.value + ": " + e.name.value : e.name.value;
    if (e.arguments && e.arguments.length) {
      var n = mapJoin(e.arguments, ", ", s.Argument);
      if (i.length + n.length + 2 > 80) {
        i += "(" + (l += "  ") + mapJoin(e.arguments, l, s.Argument) + (l = l.slice(0, -2)) + ")";
      } else {
        i += "(" + n + ")";
      }
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", s.Directive);
    }
    if (e.selectionSet) {
      i += " " + s.SelectionSet(e.selectionSet);
    }
    return i;
  },
  StringValue(e) {
    if (e.block) {
      return function printBlockString(e) {
        return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
      }(e.value).replace(/\n/g, l);
    } else {
      return function printString(e) {
        return JSON.stringify(e);
      }(e.value);
    }
  },
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + mapJoin(e.values, ", ", _print) + "]",
  ObjectValue: e => "{" + mapJoin(e.fields, ", ", s.ObjectField) + "}",
  ObjectField: e => e.name.value + ": " + _print(e.value),
  Document(e) {
    if (!e.definitions || !e.definitions.length) {
      return "";
    }
    return mapJoin(e.definitions, "\n\n", _print);
  },
  SelectionSet: e => "{" + (l += "  ") + mapJoin(e.selections, l, _print) + (l = l.slice(0, -2)) + "}",
  Argument: e => e.name.value + ": " + _print(e.value),
  FragmentSpread(e) {
    var i = "..." + e.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", s.Directive);
    }
    return i;
  },
  InlineFragment(e) {
    var i = "...";
    if (e.typeCondition) {
      i += " on " + e.typeCondition.name.value;
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", s.Directive);
    }
    return i + " " + s.SelectionSet(e.selectionSet);
  },
  FragmentDefinition(e) {
    var i = "fragment " + e.name.value;
    i += " on " + e.typeCondition.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", s.Directive);
    }
    return i + " " + s.SelectionSet(e.selectionSet);
  },
  Directive(e) {
    var i = "@" + e.name.value;
    if (e.arguments && e.arguments.length) {
      i += "(" + mapJoin(e.arguments, ", ", s.Argument) + ")";
    }
    return i;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + _print(e.type) + "]",
  NonNullType: e => _print(e.type) + "!"
};

var _print = e => s[e.kind](e);

function print(e) {
  l = "\n";
  return s[e.kind] ? s[e.kind](e) : "";
}

var o = t.expose((async function* _runPersisted(a) {
  var r = i.getSchemaNamesFromConfig(a.pluginConfig);
  var l = t.programFactory(a);
  var s = l.createExternalFiles();
  if (s.length) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
    await l.addVirtualFiles(s);
  }
  var o = l.build();
  var u = o.buildPluginInfo(a.pluginConfig);
  var c = o.getSourceFiles();
  yield {
    kind: "FILE_COUNT",
    fileCount: c.length
  };
  for (var m of c) {
    var f = m.fileName;
    var g = [];
    var v = [];
    var d = n.findAllPersistedCallExpressions(m, u);
    for (var p of d) {
      var h = o.getSourcePosition(m, p.node.getStart());
      f = h.fileName;
      if (!r.has(p.schema)) {
        v.push({
          message: p.schema ? `The '${p.schema}' schema is not in the configuration but was referenced by "graphql.persisted".` : r.size > 1 ? "The document is not for a known schema. Have you re-generated the output file?" : "Multiple schemas are configured, but the document is not for a specific schema.",
          file: h.fileName,
          line: h.line,
          col: h.col
        });
        continue;
      }
      var S = p.node.arguments[0];
      var y = p.node.arguments[1];
      var N = p.node.typeArguments && p.node.typeArguments[0];
      if (!S || !e.isStringLiteral(S)) {
        v.push({
          message: '"graphql.persisted" must be called with a string literal as the first argument.',
          file: h.fileName,
          line: h.line,
          col: h.col
        });
        continue;
      } else if (!y && !N) {
        v.push({
          message: '"graphql.persisted" is missing a document.\nThis may be passed as a generic such as `graphql.persisted<typeof document>` or as the second argument.',
          file: h.fileName,
          line: h.line,
          col: h.col
        });
        continue;
      }
      var b = null;
      var D = p.node;
      if (y && (e.isCallExpression(y) || e.isIdentifier(y))) {
        b = n.getDocumentReferenceFromDocumentNode(y, m.fileName, u).node;
        D = y;
      } else if (N && e.isTypeQueryNode(N)) {
        b = n.getDocumentReferenceFromTypeQuery(N, m.fileName, u).node;
        D = N;
      }
      if (!b) {
        v.push({
          message: `Could not find reference for "${D.getText()}".\nIf this is unexpected, please file an issue describing your case.`,
          file: h.fileName,
          line: h.line,
          col: h.col
        });
        continue;
      }
      if (!b || !e.isCallExpression(b) || !e.isNoSubstitutionTemplateLiteral(b.arguments[0]) && !e.isStringLiteral(b.arguments[0])) {
        v.push({
          message: `The referenced document of "${D.getText()}" contains no document string literal.\nIf this is unexpected, please file an issue describing your case.`,
          file: h.fileName,
          line: h.line,
          col: h.col
        });
        continue;
      }
      var F = [];
      var T = b.arguments[0].getText().slice(1, -1);
      if (b.arguments[1] && e.isArrayLiteralExpression(b.arguments[1])) {
        n.unrollTadaFragments(b.arguments[1], F, o.buildPluginInfo(a.pluginConfig));
      }
      var V = T;
      for (var J of F) {
        V += "\n\n" + print(J);
      }
      g.push({
        schemaName: p.schema,
        hashKey: S.getText().slice(1, -1),
        document: V
      });
    }
    yield {
      kind: "FILE_PERSISTED",
      filePath: f,
      documents: g,
      warnings: v
    };
  }
}));

exports.runPersisted = o;
//# sourceMappingURL=thread-chunk.js.map
