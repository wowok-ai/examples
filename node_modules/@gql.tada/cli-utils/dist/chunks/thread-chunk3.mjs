import * as e from "node:path";

import { ts as r, Project as i } from "ts-morph";

import { load as a } from "@gql.tada/internal";

import { init as o, getGraphQLDiagnostics as t } from "@0no-co/graphqlsp/api";

import { e as n, g as s } from "./index-chunk.mjs";

import { c as l } from "./project-chunk.mjs";

var f = n((async function* _runDiagnostics(n) {
  o({
    typescript: r
  });
  var f = e.dirname(n.configPath);
  var g = a({
    origin: n.pluginConfig.schema,
    rootPath: f
  });
  var m = new i({
    tsConfigFilePath: n.configPath
  });
  var c = l(m, n.pluginConfig, f);
  var p = {
    current: (await g.load()).schema,
    version: 1
  };
  var h = m.getSourceFiles().filter((r => {
    var i = e.resolve(f, r.getFilePath());
    return !e.relative(n.rootPath, i).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: h.length
  };
  for (var {compilerNode: v} of h) {
    var d = v.fileName;
    var u = t(d, p, c);
    var y = [];
    if (u && u.length) {
      for (var C of u) {
        if (!("messageText" in C) || "string" != typeof C.messageText || !C.file) {
          continue;
        }
        var P = "info";
        if (C.category === r.DiagnosticCategory.Error) {
          P = "error";
        } else if (C.category === r.DiagnosticCategory.Warning) {
          P = "warn";
        }
        var x = s(v, C.start, C.length);
        y.push({
          severity: P,
          message: C.messageText,
          file: C.file.fileName,
          line: x.line,
          col: x.col,
          endLine: x.endLine,
          endColumn: x.endColumn
        });
      }
    }
    yield {
      kind: "FILE_DIAGNOSTICS",
      filePath: d,
      messages: y
    };
  }
}));

export { f as runDiagnostics };
//# sourceMappingURL=thread-chunk3.mjs.map
