{"version":3,"file":"index-chunk.mjs","sources":["../../src/ts/utils.ts","../../src/threads/index.ts"],"sourcesContent":["import type { SourceFile } from 'typescript';\n\nexport interface Position {\n  line: number;\n  col: number;\n  endLine: number | undefined;\n  endColumn: number | undefined;\n}\n\nexport const getFilePosition = (\n  file: SourceFile,\n  start?: number | undefined,\n  length?: number | undefined\n): Position => {\n  const output: Position = { line: 1, col: 1, endLine: undefined, endColumn: undefined };\n  if (start) {\n    let lineAndChar = file.getLineAndCharacterOfPosition(start);\n    output.line = lineAndChar.line + 1;\n    output.col = lineAndChar.character + 1;\n    if (length) {\n      lineAndChar = file.getLineAndCharacterOfPosition(start + length - 1);\n      output.endLine = lineAndChar.line + 1;\n      output.endColumn = lineAndChar.character + 1;\n    }\n  }\n  return output;\n};\n","import type { WorkerOptions } from 'node:worker_threads';\nimport { Worker, isMainThread, parentPort, SHARE_ENV } from 'node:worker_threads';\n\nconst port = parentPort!;\nif (!isMainThread && !port) {\n  throw new ReferenceError('Failed to receive parent message port');\n}\n\nconst enum MainMessageCodes {\n  Start = 'START',\n  Close = 'CLOSE',\n  Pull = 'PULL',\n}\n\ninterface MainMessage {\n  id?: number;\n  kind: MainMessageCodes;\n  data?: any;\n}\n\nconst enum ThreadMessageCodes {\n  Next = 'NEXT',\n  Throw = 'THROW',\n  Return = 'RETURN',\n}\n\ninterface ThreadMessage {\n  id?: number;\n  kind: ThreadMessageCodes;\n  data?: any;\n}\n\nconst workerOpts: WorkerOptions = {\n  env: SHARE_ENV,\n  stderr: false,\n  stdout: false,\n  stdin: false,\n};\n\nconst asyncIteratorSymbol = (): typeof Symbol.asyncIterator =>\n  (typeof Symbol === 'function' && Symbol.asyncIterator) || ('@@asyncIterator' as any);\n\n/** Capture the stack above the caller */\nfunction captureStack(): NodeJS.CallSite[] {\n  const _error: any = new Error();\n  const _prepareStackTrace = Error.prepareStackTrace;\n  try {\n    let stack: NodeJS.CallSite[] | undefined;\n    Error.prepareStackTrace = (_error, _stack) => (stack = _stack);\n    Error.captureStackTrace(_error);\n    if (!_error.stack) throw _error;\n    return (stack && stack.slice(2)) || [];\n  } finally {\n    Error.prepareStackTrace = _prepareStackTrace;\n  }\n}\n\nexport interface Generator<Args extends readonly any[], Next> {\n  // TODO: Update to support for AsyncGenerator interface\n  (...args: Args): AsyncIterableIterator<Next>;\n}\n\nfunction main<Args extends readonly any[], Next>(url: string | URL): Generator<Args, Next> {\n  let worker: Worker;\n  let ids = 0;\n  return (...args: Args) => {\n    if (!worker) {\n      worker = new Worker(url, workerOpts);\n      worker.unref();\n    }\n\n    const id = ++ids | 0;\n    const buffer: ThreadMessage[] = [];\n\n    let started = false;\n    let ended = false;\n    let pulled = false;\n    let resolve: ((value: IteratorResult<Next>) => void) | void;\n    let reject: ((error: any) => void) | void;\n\n    function cleanup() {\n      ended = true;\n      resolve = undefined;\n      reject = undefined;\n      worker.removeListener('message', receiveMessage);\n      worker.removeListener('error', receiveError);\n    }\n\n    function sendMessage(kind: MainMessageCodes) {\n      worker.postMessage({ id, kind });\n    }\n\n    function receiveError(error: any) {\n      cleanup();\n      buffer.length = 1;\n      buffer[0] = {\n        id,\n        kind: ThreadMessageCodes.Throw,\n        data: error,\n      };\n    }\n\n    function receiveMessage(data: unknown) {\n      const message: ThreadMessage | null =\n        data && typeof data === 'object' && 'kind' in data ? (data as ThreadMessage) : null;\n      if (!message) {\n        return;\n      } else if (reject && message.kind === ThreadMessageCodes.Throw) {\n        reject(message.data);\n        cleanup();\n      } else if (resolve && message.kind === ThreadMessageCodes.Return) {\n        resolve({ done: true, value: message.data });\n        cleanup();\n      } else if (resolve && message.kind === ThreadMessageCodes.Next) {\n        pulled = false;\n        resolve({ done: false, value: message.data });\n      } else if (\n        message.kind === ThreadMessageCodes.Throw ||\n        message.kind === ThreadMessageCodes.Return\n      ) {\n        buffer.push(message);\n        cleanup();\n      } else if (message.kind === ThreadMessageCodes.Next) {\n        buffer.push(message);\n        pulled = false;\n      }\n    }\n\n    return {\n      async next() {\n        if (!started) {\n          started = true;\n          worker.addListener('message', receiveMessage);\n          worker.addListener('error', receiveError);\n          worker.postMessage({\n            id,\n            kind: MainMessageCodes.Start,\n            data: args,\n          });\n        }\n        if (ended && !buffer.length) {\n          return { done: true } as IteratorReturnResult<any>;\n        } else if (!ended && !pulled && buffer.length <= 1) {\n          pulled = true;\n          sendMessage(MainMessageCodes.Pull);\n        }\n        const message = buffer.shift();\n        if (message && message.kind === ThreadMessageCodes.Throw) {\n          cleanup();\n          throw message.data;\n        } else if (message && message.kind === ThreadMessageCodes.Return) {\n          cleanup();\n          return { value: message.data, done: true };\n        } else if (message && message.kind === ThreadMessageCodes.Next) {\n          return { value: message.data, done: false };\n        } else {\n          return new Promise((_resolve, _reject) => {\n            resolve = (value) => {\n              resolve = undefined;\n              reject = undefined;\n              _resolve(value);\n            };\n            reject = (error) => {\n              resolve = undefined;\n              reject = undefined;\n              _reject(error);\n            };\n          });\n        }\n      },\n      async return() {\n        if (!ended) {\n          cleanup();\n          sendMessage(MainMessageCodes.Close);\n        }\n        return { done: true } as IteratorReturnResult<any>;\n      },\n      [asyncIteratorSymbol()]() {\n        return this;\n      },\n    };\n  };\n}\n\nfunction thread<Args extends readonly any[], Next>(\n  message: MainMessage,\n  generator: Generator<Args, Next>\n): void {\n  if (message.kind !== MainMessageCodes.Start) return;\n  const id = message.id;\n  const iterator = generator(...(message.data as any));\n\n  let ended = false;\n  let pulled = false;\n  let looping = false;\n\n  function cleanup() {\n    ended = true;\n    port.removeListener('message', receiveMessage);\n  }\n\n  async function sendMessage(kind: ThreadMessageCodes, data?: any) {\n    try {\n      port.postMessage({ id, kind, data });\n    } catch (error) {\n      cleanup();\n      if (iterator.throw) {\n        let result = await iterator.throw();\n        if (result.done === false && iterator.return) {\n          result = await iterator.return();\n          sendMessage(ThreadMessageCodes.Return, result.value);\n        } else {\n          sendMessage(ThreadMessageCodes.Return, result.value);\n        }\n      } else {\n        sendMessage(ThreadMessageCodes.Return);\n      }\n    }\n  }\n\n  async function receiveMessage(data: unknown) {\n    const message: MainMessage | null =\n      data && typeof data === 'object' && 'kind' in data ? (data as MainMessage) : null;\n    let next: IteratorResult<Next>;\n    if (!message) {\n      return;\n    } else if (message.kind === MainMessageCodes.Close) {\n      cleanup();\n      if (iterator.return) iterator.return();\n    } else if (message.kind === MainMessageCodes.Pull && looping) {\n      pulled = true;\n    } else if (message.kind === MainMessageCodes.Pull) {\n      for (pulled = looping = true; pulled && !ended; ) {\n        try {\n          if ((next = await iterator.next()).done) {\n            cleanup();\n            if (iterator.return) next = await iterator.return();\n            sendMessage(ThreadMessageCodes.Return, next.value);\n          } else {\n            pulled = false;\n            sendMessage(ThreadMessageCodes.Next, next.value);\n          }\n        } catch (error) {\n          cleanup();\n          sendMessage(ThreadMessageCodes.Throw, error);\n        }\n      }\n      looping = false;\n    }\n  }\n\n  port.addListener('message', receiveMessage);\n}\n\nexport function expose<Args extends readonly any[], Return>(\n  generator: Generator<Args, Return>\n): Generator<Args, Return> {\n  if (isMainThread) {\n    const call = captureStack()[0];\n    const file = call && call.getFileName();\n    if (!file) throw new ReferenceError('Captured stack trace is empty');\n    const url = file.startsWith('file://') ? new URL(file) : file;\n    return main(url);\n  } else {\n    port.addListener('message', (data) => {\n      const message: MainMessage | null =\n        data && typeof data === 'object' && 'kind' in data ? (data as MainMessage) : null;\n      if (message) thread(message, generator);\n    });\n    return generator;\n  }\n}\n"],"names":["getFilePosition","file","start","length","output","line","col","endLine","undefined","endColumn","lineAndChar","getLineAndCharacterOfPosition","character","port","parentPort","isMainThread","ReferenceError","MainMessageCodes","ThreadMessageCodes","workerOpts","env","SHARE_ENV","stderr","stdout","stdin","asyncIteratorSymbol","Symbol","asyncIterator","expose","generator","call","captureStack","_error","Error","_prepareStackTrace","prepareStackTrace","stack","_stack","captureStackTrace","slice","getFileName","main","url","worker","ids","args","Worker","unref","id","buffer","started","ended","pulled","resolve","reject","cleanup","removeListener","receiveMessage","receiveError","sendMessage","kind","postMessage","error","Throw","data","message","Return","done","value","Next","push","next","addListener","Start","Pull","shift","Promise","_resolve","_reject","return","Close","this","startsWith","URL","thread","iterator","looping","async","throw","result"],"mappings":"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"}