import e from "typescript";

import { getSchemaNamesFromConfig as i } from "@gql.tada/internal";

import { findAllPersistedCallExpressions as n, getDocumentReferenceFromDocumentNode as t, getDocumentReferenceFromTypeQuery as a, unrollTadaFragments as r } from "@0no-co/graphqlsp/api";

import { e as l, p as s } from "./index-chunk.mjs";

var o = function(e) {
  e[e.Const = 1] = "Const";
  e[e.Var = 2] = "Var";
  e[e.Int = 3] = "Int";
  e[e.Float = 4] = "Float";
  e[e.BlockString = 5] = "BlockString";
  e[e.String = 6] = "String";
  e[e.Enum = 7] = "Enum";
  return e;
}(o || {});

var u = function(e) {
  e[e.Spread = 1] = "Spread";
  e[e.Name = 2] = "Name";
  return e;
}(u || {});

function mapJoin(e, i, n) {
  var t = "";
  for (var a = 0; a < e.length; a++) {
    if (a) {
      t += i;
    }
    t += n(e[a]);
  }
  return t;
}

var c = "\n";

var m = {
  OperationDefinition(e) {
    var i = e.operation;
    if (e.name) {
      i += " " + e.name.value;
    }
    if (e.variableDefinitions && e.variableDefinitions.length) {
      if (!e.name) {
        i += " ";
      }
      i += "(" + mapJoin(e.variableDefinitions, ", ", m.VariableDefinition) + ")";
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", m.Directive);
    }
    return "query" !== i ? i + " " + m.SelectionSet(e.selectionSet) : m.SelectionSet(e.selectionSet);
  },
  VariableDefinition(e) {
    var i = m.Variable(e.variable) + ": " + _print(e.type);
    if (e.defaultValue) {
      i += " = " + _print(e.defaultValue);
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", m.Directive);
    }
    return i;
  },
  Field(e) {
    var i = e.alias ? e.alias.value + ": " + e.name.value : e.name.value;
    if (e.arguments && e.arguments.length) {
      var n = mapJoin(e.arguments, ", ", m.Argument);
      if (i.length + n.length + 2 > 80) {
        i += "(" + (c += "  ") + mapJoin(e.arguments, c, m.Argument) + (c = c.slice(0, -2)) + ")";
      } else {
        i += "(" + n + ")";
      }
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", m.Directive);
    }
    if (e.selectionSet) {
      i += " " + m.SelectionSet(e.selectionSet);
    }
    return i;
  },
  StringValue(e) {
    if (e.block) {
      return function printBlockString(e) {
        return '"""\n' + e.replace(/"""/g, '\\"""') + '\n"""';
      }(e.value).replace(/\n/g, c);
    } else {
      return function printString(e) {
        return JSON.stringify(e);
      }(e.value);
    }
  },
  BooleanValue: e => "" + e.value,
  NullValue: e => "null",
  IntValue: e => e.value,
  FloatValue: e => e.value,
  EnumValue: e => e.value,
  Name: e => e.value,
  Variable: e => "$" + e.name.value,
  ListValue: e => "[" + mapJoin(e.values, ", ", _print) + "]",
  ObjectValue: e => "{" + mapJoin(e.fields, ", ", m.ObjectField) + "}",
  ObjectField: e => e.name.value + ": " + _print(e.value),
  Document(e) {
    if (!e.definitions || !e.definitions.length) {
      return "";
    }
    return mapJoin(e.definitions, "\n\n", _print);
  },
  SelectionSet: e => "{" + (c += "  ") + mapJoin(e.selections, c, _print) + (c = c.slice(0, -2)) + "}",
  Argument: e => e.name.value + ": " + _print(e.value),
  FragmentSpread(e) {
    var i = "..." + e.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", m.Directive);
    }
    return i;
  },
  InlineFragment(e) {
    var i = "...";
    if (e.typeCondition) {
      i += " on " + e.typeCondition.name.value;
    }
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", m.Directive);
    }
    return i + " " + m.SelectionSet(e.selectionSet);
  },
  FragmentDefinition(e) {
    var i = "fragment " + e.name.value;
    i += " on " + e.typeCondition.name.value;
    if (e.directives && e.directives.length) {
      i += " " + mapJoin(e.directives, " ", m.Directive);
    }
    return i + " " + m.SelectionSet(e.selectionSet);
  },
  Directive(e) {
    var i = "@" + e.name.value;
    if (e.arguments && e.arguments.length) {
      i += "(" + mapJoin(e.arguments, ", ", m.Argument) + ")";
    }
    return i;
  },
  NamedType: e => e.name.value,
  ListType: e => "[" + _print(e.type) + "]",
  NonNullType: e => _print(e.type) + "!"
};

var _print = e => m[e.kind](e);

function print(e) {
  c = "\n";
  return m[e.kind] ? m[e.kind](e) : "";
}

var f = l((async function* _runPersisted(l) {
  var o = i(l.pluginConfig);
  var u = s(l);
  var c = u.createExternalFiles();
  if (c.length) {
    yield {
      kind: "EXTERNAL_WARNING"
    };
    await u.addVirtualFiles(c);
  }
  var m = u.build();
  var f = m.buildPluginInfo(l.pluginConfig);
  var v = m.getSourceFiles();
  yield {
    kind: "FILE_COUNT",
    fileCount: v.length
  };
  for (var g of v) {
    var d = g.fileName;
    var p = [];
    var h = [];
    var S = n(g, f);
    for (var y of S) {
      var N = m.getSourcePosition(g, y.node.getStart());
      d = N.fileName;
      if (!o.has(y.schema)) {
        h.push({
          message: y.schema ? `The '${y.schema}' schema is not in the configuration but was referenced by "graphql.persisted".` : o.size > 1 ? "The document is not for a known schema. Have you re-generated the output file?" : "Multiple schemas are configured, but the document is not for a specific schema.",
          file: N.fileName,
          line: N.line,
          col: N.col
        });
        continue;
      }
      var b = y.node.arguments[0];
      var V = y.node.arguments[1];
      var D = y.node.typeArguments && y.node.typeArguments[0];
      if (!b || !e.isStringLiteral(b)) {
        h.push({
          message: '"graphql.persisted" must be called with a string literal as the first argument.',
          file: N.fileName,
          line: N.line,
          col: N.col
        });
        continue;
      } else if (!V && !D) {
        h.push({
          message: '"graphql.persisted" is missing a document.\nThis may be passed as a generic such as `graphql.persisted<typeof document>` or as the second argument.',
          file: N.fileName,
          line: N.line,
          col: N.col
        });
        continue;
      }
      var J = null;
      var T = y.node;
      if (V && (e.isCallExpression(V) || e.isIdentifier(V))) {
        J = t(V, g.fileName, f).node;
        T = V;
      } else if (D && e.isTypeQueryNode(D)) {
        J = a(D, g.fileName, f).node;
        T = D;
      }
      if (!J) {
        h.push({
          message: `Could not find reference for "${T.getText()}".\nIf this is unexpected, please file an issue describing your case.`,
          file: N.fileName,
          line: N.line,
          col: N.col
        });
        continue;
      }
      if (!J || !e.isCallExpression(J) || !e.isNoSubstitutionTemplateLiteral(J.arguments[0]) && !e.isStringLiteral(J.arguments[0])) {
        h.push({
          message: `The referenced document of "${T.getText()}" contains no document string literal.\nIf this is unexpected, please file an issue describing your case.`,
          file: N.fileName,
          line: N.line,
          col: N.col
        });
        continue;
      }
      var F = [];
      var C = J.arguments[0].getText().slice(1, -1);
      if (J.arguments[1] && e.isArrayLiteralExpression(J.arguments[1])) {
        r(J.arguments[1], F, m.buildPluginInfo(l.pluginConfig));
      }
      var E = C;
      for (var I of F) {
        E += "\n\n" + print(I);
      }
      p.push({
        schemaName: y.schema,
        hashKey: b.getText().slice(1, -1),
        document: E
      });
    }
    yield {
      kind: "FILE_PERSISTED",
      filePath: d,
      documents: p,
      warnings: h
    };
  }
}));

export { f as runPersisted };
//# sourceMappingURL=thread-chunk.mjs.map
