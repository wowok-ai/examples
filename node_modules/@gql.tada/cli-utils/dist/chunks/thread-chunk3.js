var e = require("node:path");

var r = require("ts-morph");

var t = require("@gql.tada/internal");

var i = require("@0no-co/graphqlsp/api");

var a = require("./index-chunk.js");

var n = require("./project-chunk.js");

function _interopNamespaceDefault(e) {
  var r = Object.create(null);
  if (e) {
    Object.keys(e).forEach((function(t) {
      if ("default" !== t) {
        var i = Object.getOwnPropertyDescriptor(e, t);
        Object.defineProperty(r, t, i.get ? i : {
          enumerable: !0,
          get: function() {
            return e[t];
          }
        });
      }
    }));
  }
  r.default = e;
  return r;
}

var o = _interopNamespaceDefault(e);

var s = a.expose((async function* _runDiagnostics(e) {
  i.init({
    typescript: r.ts
  });
  var s = o.dirname(e.configPath);
  var l = t.load({
    origin: e.pluginConfig.schema,
    rootPath: s
  });
  var c = new r.Project({
    tsConfigFilePath: e.configPath
  });
  var g = n.createPluginInfo(c, e.pluginConfig, s);
  var f = {
    current: (await l.load()).schema,
    version: 1
  };
  var u = c.getSourceFiles().filter((r => {
    var t = o.resolve(s, r.getFilePath());
    return !o.relative(e.rootPath, t).startsWith("..");
  }));
  yield {
    kind: "FILE_COUNT",
    fileCount: u.length
  };
  for (var {compilerNode: v} of u) {
    var p = v.fileName;
    var h = i.getGraphQLDiagnostics(p, f, g);
    var d = [];
    if (h && h.length) {
      for (var m of h) {
        if (!("messageText" in m) || "string" != typeof m.messageText || !m.file) {
          continue;
        }
        var y = "info";
        if (m.category === r.ts.DiagnosticCategory.Error) {
          y = "error";
        } else if (m.category === r.ts.DiagnosticCategory.Warning) {
          y = "warn";
        }
        var P = a.getFilePosition(v, m.start, m.length);
        d.push({
          severity: y,
          message: m.messageText,
          file: m.file.fileName,
          line: P.line,
          col: P.col,
          endLine: P.endLine,
          endColumn: P.endColumn
        });
      }
    }
    yield {
      kind: "FILE_DIAGNOSTICS",
      filePath: p,
      messages: d
    };
  }
}));

exports.runDiagnostics = s;
//# sourceMappingURL=thread-chunk3.js.map
