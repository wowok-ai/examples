import { ModuleResolutionKind as e, JsxEmit as u, ScriptTarget as r, createSourceFile as n, createProgram as t, createModuleResolutionCache as a, resolveModuleName as i } from "typescript";

import o, { posix as D } from "node:path";

import { buildClientSchema as s, buildSchema as l, executeSync as c } from "graphql";

import { Kind as f, GraphQLError as d, parse as E, print as F, OperationTypeNode as A } from "@0no-co/graphql.web";

import C from "node:fs/promises";

import p from "path";

import { createRequire as v } from "node:module";

var m = {
  rootDir: "/",
  moduleResolution: e.Bundler,
  skipLibCheck: !0,
  skipDefaultLibCheck: !0,
  allowImportingTsExtensions: !0,
  allowSyntheticDefaultImports: !0,
  resolvePackageJsonExports: !0,
  resolvePackageJsonImports: !0,
  resolveJsonModule: !0,
  esModuleInterop: !0,
  jsx: u.Preserve,
  target: r.Latest,
  checkJs: !1,
  allowJs: !0,
  strict: !0,
  noEmit: !0,
  noLib: !1,
  disableReferencedProjectLoad: !0,
  disableSourceOfProjectReferenceRedirect: !0,
  disableSizeLimit: !0,
  disableSolutionSearching: !0
};

let h = class File {
  constructor(e, u) {
    this.cache = function createTargetCache() {
      return {
        [r[r.ES3]]: null,
        [r[r.ES5]]: null,
        [r[r.ES2015]]: null,
        [r[r.ES2016]]: null,
        [r[r.ES2017]]: null,
        [r[r.ES2018]]: null,
        [r[r.ES2019]]: null,
        [r[r.ES2020]]: null,
        [r[r.ES2021]]: null,
        [r[r.ES2022]]: null,
        [r[r.Latest]]: null,
        [r[r.JSON]]: null
      };
    }();
    this.name = normalize(e);
    if ("string" == typeof u) {
      this.text = u || "\n";
      this.data = null;
    } else {
      this.text = null;
      this.data = u;
    }
  }
  toSourceFile(e) {
    var u = "object" == typeof e ? e.languageVersion : e;
    return function getTargetCache(e, u) {
      return e[r[u]] || null;
    }(this.cache, u) || function setTargetCache(e, u, n) {
      e[r[u]] = n;
      return n;
    }(this.cache, u, n(this.name, this.toString(), e));
  }
  toBuffer() {
    return this.data || (this.data = (new TextEncoder).encode(this.text));
  }
  toString() {
    return this.text || (this.text = (new TextDecoder).decode(this.data));
  }
};

class Directory {
  constructor() {
    this.children = Object.create(null);
    this.files = Object.create(null);
  }
  getOrCreateDirectory(e) {
    return this.children[e] || (this.children[e] = new Directory);
  }
}

function normalize(e) {
  return D.normalize(!e.startsWith(D.sep) ? D.sep + e : e);
}

function split$1(e) {
  return e !== D.sep ? e.split(D.sep).slice(1) : [];
}

var y = D.sep;

var B = "function" == typeof require ? require.resolve : v(import.meta.url).resolve;

async function importModule(e, u) {
  var r = `${u}/package.json`;
  var n = B(r, {
    paths: [ "node_modules", ...B.paths(r) || [] ]
  });
  if (!n) {
    throw new Error(`Failed to resolve "${u}"`);
  }
  var t = o.dirname(n);
  var a = `/node_modules/${u}/`;
  await async function walk(u) {
    for (var r of await C.readdir(u)) {
      var n = o.join(u, r);
      if ((await C.stat(n)).isDirectory()) {
        await walk(n);
      } else {
        var i = o.join(o.relative(t, u), r);
        var D = await C.readFile(n, {
          encoding: "utf8"
        });
        e.writeFile(a + i.split(o.sep).join("/"), D, !1);
      }
    }
  }(t);
}

async function importLib(e) {
  var u = "typescript/package.json";
  var r = B(u, {
    paths: [ "node_modules", ...B.paths(u) || [] ]
  });
  if (!r) {
    throw new Error("Failed to resolve typescript");
  }
  var n = o.join(o.dirname(r), "lib");
  var t = (await Promise.all([ "lib.es5.d.ts", "lib.es2015.symbol.d.ts", "lib.es2015.collection.d.ts", "lib.es2015.iterable.d.ts" ].map((e => C.readFile(o.resolve(n, e), {
    encoding: "utf8"
  }))))).join("\n");
  e.writeFile(e.getDefaultLibFileName(m), t, !1);
}

async function resolveModuleFile(e) {
  var u = e.indexOf("/");
  var r = e.slice(0, u);
  var n = e.slice(u);
  var t = `${r}/package.json`;
  var a = B(t, {
    paths: [ "node_modules", ...B.paths(t) || [] ]
  });
  if (!a) {
    throw new Error(`Failed to resolve "${r}"`);
  }
  var i = o.join(o.dirname(a), n);
  return C.readFile(i, {
    encoding: "utf8"
  });
}

var k = "lib.d.ts";

var createProgram = (e, u) => t(e, m, u);

function createVirtualHost() {
  var e = a(y, normalize, m);
  var u = new Directory;
  u.files[k] = new h(k, "");
  return {
    getCanonicalFileName: normalize,
    getDefaultLibFileName: () => y + k,
    getCurrentDirectory: () => y,
    getNewLine: () => "\n",
    getModuleResolutionCache: () => e,
    useCaseSensitiveFileNames: () => !0,
    fileExists(e) {
      var r = split$1(normalize(e));
      var n = u;
      for (var t = 0; t < r.length - 1; t++) {
        if (!(n = n.children[r[t]])) {
          return !1;
        }
      }
      return !!n.files[r[r.length - 1]];
    },
    directoryExists(e) {
      var r = split$1(normalize(e));
      if (!r.length) {
        return !0;
      }
      var n = u;
      for (var t = 0; t < r.length - 1; t++) {
        if (!(n = n.children[r[t]])) {
          return !1;
        }
      }
      return !!n.children[r[r.length - 1]];
    },
    writeFile(e, r) {
      var n = normalize(e);
      var t = split$1(n);
      var a = u;
      for (var i = 0; i < t.length - 1; i++) {
        a = a.getOrCreateDirectory(t[i]);
      }
      a.files[t[t.length - 1]] = new h(n, r);
    },
    getDirectories(e) {
      var r = split$1(normalize(e));
      var n = u;
      for (var t = 0; t < r.length; t++) {
        if (!(n = n.children[r[t]])) {
          return [];
        }
      }
      return Object.keys(n.children);
    },
    readFile(e) {
      var r = split$1(normalize(e));
      var n = u;
      for (var t = 0; t < r.length - 1; t++) {
        if (!(n = n.children[r[t]])) {
          return;
        }
      }
      var a = n.files[r[r.length - 1]];
      return a && a.toString();
    },
    getSourceFile(e, r) {
      var n = split$1(normalize(e));
      var t = u;
      for (var a = 0; a < n.length - 1; a++) {
        if (!(t = t.children[n[a]])) {
          return;
        }
      }
      var i = t.files[n[n.length - 1]];
      return i && i.toSourceFile(r);
    },
    resolveModuleNames(u, r) {
      var n = [];
      for (var t of u) {
        var a = i(t, r, m, this, e);
        n.push(a.resolvedModule);
      }
      return n;
    }
  };
}

var teardownPlaceholder = () => {};

var g = teardownPlaceholder;

function start(e) {
  return {
    tag: 0,
    0: e
  };
}

function push(e) {
  return {
    tag: 1,
    0: e
  };
}

var asyncIteratorSymbol = () => "function" == typeof Symbol && Symbol.asyncIterator || "@@asyncIterator";

var identity = e => e;

function filter(e) {
  return u => r => {
    var n = g;
    u((u => {
      if (0 === u) {
        r(0);
      } else if (0 === u.tag) {
        n = u[0];
        r(u);
      } else if (!e(u[0])) {
        n(0);
      } else {
        r(u);
      }
    }));
  };
}

function map(e) {
  return u => r => u((u => {
    if (0 === u || 0 === u.tag) {
      r(u);
    } else {
      r(push(e(u[0])));
    }
  }));
}

function mergeMap(e) {
  return u => r => {
    var n = [];
    var t = g;
    var a = !1;
    var i = !1;
    u((u => {
      if (i) {} else if (0 === u) {
        i = !0;
        if (!n.length) {
          r(0);
        }
      } else if (0 === u.tag) {
        t = u[0];
      } else {
        a = !1;
        !function applyInnerSource(e) {
          var u = g;
          e((e => {
            if (0 === e) {
              if (n.length) {
                var o = n.indexOf(u);
                if (o > -1) {
                  (n = n.slice()).splice(o, 1);
                }
                if (!n.length) {
                  if (i) {
                    r(0);
                  } else if (!a) {
                    a = !0;
                    t(0);
                  }
                }
              }
            } else if (0 === e.tag) {
              n.push(u = e[0]);
              u(0);
            } else if (n.length) {
              r(e);
              u(0);
            }
          }));
        }(e(u[0]));
        if (!a) {
          a = !0;
          t(0);
        }
      }
    }));
    r(start((e => {
      if (1 === e) {
        if (!i) {
          i = !0;
          t(1);
        }
        for (var u = 0, r = n, o = n.length; u < o; u++) {
          r[u](1);
        }
        n.length = 0;
      } else {
        if (!i && !a) {
          a = !0;
          t(0);
        } else {
          a = !1;
        }
        for (var D = 0, s = n, l = n.length; D < l; D++) {
          s[D](0);
        }
      }
    })));
  };
}

function merge(e) {
  return function mergeAll(e) {
    return mergeMap(identity)(e);
  }(N(e));
}

function onEnd(e) {
  return u => r => {
    var n = !1;
    u((u => {
      if (n) {} else if (0 === u) {
        n = !0;
        r(0);
        e();
      } else if (0 === u.tag) {
        var t = u[0];
        r(start((u => {
          if (1 === u) {
            n = !0;
            t(1);
            e();
          } else {
            t(u);
          }
        })));
      } else {
        r(u);
      }
    }));
  };
}

function onPush(e) {
  return u => r => {
    var n = !1;
    u((u => {
      if (n) {} else if (0 === u) {
        n = !0;
        r(0);
      } else if (0 === u.tag) {
        var t = u[0];
        r(start((e => {
          if (1 === e) {
            n = !0;
          }
          t(e);
        })));
      } else {
        e(u[0]);
        r(u);
      }
    }));
  };
}

function onStart(e) {
  return u => r => u((u => {
    if (0 === u) {
      r(0);
    } else if (0 === u.tag) {
      r(u);
      e();
    } else {
      r(u);
    }
  }));
}

function share(e) {
  var u = [];
  var r = g;
  var n = !1;
  return t => {
    u.push(t);
    if (1 === u.length) {
      e((e => {
        if (0 === e) {
          for (var t = 0, a = u, i = u.length; t < i; t++) {
            a[t](0);
          }
          u.length = 0;
        } else if (0 === e.tag) {
          r = e[0];
        } else {
          n = !1;
          for (var o = 0, D = u, s = u.length; o < s; o++) {
            D[o](e);
          }
        }
      }));
    }
    t(start((e => {
      if (1 === e) {
        var a = u.indexOf(t);
        if (a > -1) {
          (u = u.slice()).splice(a, 1);
        }
        if (!u.length) {
          r(1);
        }
      } else if (!n) {
        n = !0;
        r(0);
      }
    })));
  };
}

function switchMap(e) {
  return u => r => {
    var n = g;
    var t = g;
    var a = !1;
    var i = !1;
    var o = !1;
    var D = !1;
    u((u => {
      if (D) {} else if (0 === u) {
        D = !0;
        if (!o) {
          r(0);
        }
      } else if (0 === u.tag) {
        n = u[0];
      } else {
        if (o) {
          t(1);
          t = g;
        }
        if (!a) {
          a = !0;
          n(0);
        } else {
          a = !1;
        }
        !function applyInnerSource(e) {
          o = !0;
          e((e => {
            if (!o) {} else if (0 === e) {
              o = !1;
              if (D) {
                r(0);
              } else if (!a) {
                a = !0;
                n(0);
              }
            } else if (0 === e.tag) {
              i = !1;
              (t = e[0])(0);
            } else {
              r(e);
              if (!i) {
                t(0);
              } else {
                i = !1;
              }
            }
          }));
        }(e(u[0]));
      }
    }));
    r(start((e => {
      if (1 === e) {
        if (!D) {
          D = !0;
          n(1);
        }
        if (o) {
          o = !1;
          t(1);
        }
      } else {
        if (!D && !a) {
          a = !0;
          n(0);
        }
        if (o && !i) {
          i = !0;
          t(0);
        }
      }
    })));
  };
}

function take(e) {
  return u => r => {
    var n = g;
    var t = !1;
    var a = 0;
    u((u => {
      if (t) {} else if (0 === u) {
        t = !0;
        r(0);
      } else if (0 === u.tag) {
        if (e <= 0) {
          t = !0;
          r(0);
          u[0](1);
        } else {
          n = u[0];
        }
      } else if (a++ < e) {
        r(u);
        if (!t && a >= e) {
          t = !0;
          r(0);
          n(1);
        }
      } else {
        r(u);
      }
    }));
    r(start((u => {
      if (1 === u && !t) {
        t = !0;
        n(1);
      } else if (0 === u && !t && a < e) {
        n(0);
      }
    })));
  };
}

function takeUntil(e) {
  return u => r => {
    var n = g;
    var t = g;
    var a = !1;
    u((u => {
      if (a) {} else if (0 === u) {
        a = !0;
        t(1);
        r(0);
      } else if (0 === u.tag) {
        n = u[0];
        e((e => {
          if (0 === e) {} else if (0 === e.tag) {
            (t = e[0])(0);
          } else {
            a = !0;
            t(1);
            n(1);
            r(0);
          }
        }));
      } else {
        r(u);
      }
    }));
    r(start((e => {
      if (1 === e && !a) {
        a = !0;
        n(1);
        t(1);
      } else if (!a) {
        n(0);
      }
    })));
  };
}

function takeWhile(e, u) {
  return r => n => {
    var t = g;
    var a = !1;
    r((r => {
      if (a) {} else if (0 === r) {
        a = !0;
        n(0);
      } else if (0 === r.tag) {
        t = r[0];
        n(r);
      } else if (!e(r[0])) {
        a = !0;
        if (u) {
          n(r);
        }
        n(0);
        t(1);
      } else {
        n(r);
      }
    }));
  };
}

function fromAsyncIterable(e) {
  return u => {
    var r = e[asyncIteratorSymbol()] && e[asyncIteratorSymbol()]() || e;
    var n = !1;
    var t = !1;
    var a = !1;
    var i;
    u(start((async e => {
      if (1 === e) {
        n = !0;
        if (r.return) {
          r.return();
        }
      } else if (t) {
        a = !0;
      } else {
        for (a = t = !0; a && !n; ) {
          if ((i = await r.next()).done) {
            n = !0;
            if (r.return) {
              await r.return();
            }
            u(0);
          } else {
            try {
              a = !1;
              u(push(i.value));
            } catch (e) {
              if (r.throw) {
                if (n = !!(await r.throw(e)).done) {
                  u(0);
                }
              } else {
                throw e;
              }
            }
          }
        }
        t = !1;
      }
    })));
  };
}

var N = function fromIterable(e) {
  if (e[Symbol.asyncIterator]) {
    return fromAsyncIterable(e);
  }
  return u => {
    var r = e[Symbol.iterator]();
    var n = !1;
    var t = !1;
    var a = !1;
    var i;
    u(start((e => {
      if (1 === e) {
        n = !0;
        if (r.return) {
          r.return();
        }
      } else if (t) {
        a = !0;
      } else {
        for (a = t = !0; a && !n; ) {
          if ((i = r.next()).done) {
            n = !0;
            if (r.return) {
              r.return();
            }
            u(0);
          } else {
            try {
              a = !1;
              u(push(i.value));
            } catch (e) {
              if (r.throw) {
                if (n = !!r.throw(e).done) {
                  u(0);
                }
              } else {
                throw e;
              }
            }
          }
        }
        t = !1;
      }
    })));
  };
};

function fromValue(e) {
  return u => {
    var r = !1;
    u(start((n => {
      if (1 === n) {
        r = !0;
      } else if (!r) {
        r = !0;
        u(push(e));
        u(0);
      }
    })));
  };
}

function make(e) {
  return u => {
    var r = !1;
    var n = e({
      next(e) {
        if (!r) {
          u(push(e));
        }
      },
      complete() {
        if (!r) {
          r = !0;
          u(0);
        }
      }
    });
    u(start((e => {
      if (1 === e && !r) {
        r = !0;
        n();
      }
    })));
  };
}

function makeSubject() {
  var e;
  var u;
  return {
    source: share(make((r => {
      e = r.next;
      u = r.complete;
      return teardownPlaceholder;
    }))),
    next(u) {
      if (e) {
        e(u);
      }
    },
    complete() {
      if (u) {
        u();
      }
    }
  };
}

function subscribe(e) {
  return u => {
    var r = g;
    var n = !1;
    u((u => {
      if (0 === u) {
        n = !0;
      } else if (0 === u.tag) {
        (r = u[0])(0);
      } else if (!n) {
        e(u[0]);
        r(0);
      }
    }));
    return {
      unsubscribe() {
        if (!n) {
          n = !0;
          r(1);
        }
      }
    };
  };
}

function toPromise(e) {
  return new Promise((u => {
    var r = g;
    var n;
    e((e => {
      if (0 === e) {
        Promise.resolve(n).then(u);
      } else if (0 === e.tag) {
        (r = e[0])(0);
      } else {
        n = e[0];
        r(0);
      }
    }));
  }));
}

var rehydrateGraphQlError = e => {
  if (e && e.message && (e.extensions || "GraphQLError" === e.name)) {
    return e;
  } else if ("object" == typeof e && e.message) {
    return new d(e.message, e.nodes, e.source, e.positions, e.path, e, e.extensions || {});
  } else {
    return new d(e);
  }
};

class CombinedError extends Error {
  constructor(e) {
    var u = (e.graphQLErrors || []).map(rehydrateGraphQlError);
    var r = ((e, u) => {
      var r = "";
      if (e) {
        return `[Network] ${e.message}`;
      }
      if (u) {
        for (var n of u) {
          if (r) {
            r += "\n";
          }
          r += `[GraphQL] ${n.message}`;
        }
      }
      return r;
    })(e.networkError, u);
    super(r);
    this.name = "CombinedError";
    this.message = r;
    this.graphQLErrors = u;
    this.networkError = e.networkError;
    this.response = e.response;
  }
  toString() {
    return this.message;
  }
}

var phash = (e, u) => {
  var r = 0 | (u || 5381);
  for (var n = 0, t = 0 | e.length; n < t; n++) {
    r = (r << 5) + r + e.charCodeAt(n);
  }
  return r;
};

var w = new Set;

var b = new WeakMap;

var stringify = e => {
  if (null === e || w.has(e)) {
    return "null";
  } else if ("object" != typeof e) {
    return JSON.stringify(e) || "";
  } else if (e.toJSON) {
    return stringify(e.toJSON());
  } else if (Array.isArray(e)) {
    var u = "[";
    for (var r of e) {
      if (u.length > 1) {
        u += ",";
      }
      u += stringify(r) || "null";
    }
    return u + "]";
  } else if (S !== NoopConstructor && e instanceof S || x !== NoopConstructor && e instanceof x) {
    return "null";
  }
  var n = Object.keys(e).sort();
  if (!n.length && e.constructor && Object.getPrototypeOf(e).constructor !== Object.prototype.constructor) {
    var t = b.get(e) || Math.random().toString(36).slice(2);
    b.set(e, t);
    return stringify({
      __key: t
    });
  }
  w.add(e);
  var a = "{";
  for (var i of n) {
    var o = stringify(e[i]);
    if (o) {
      if (a.length > 1) {
        a += ",";
      }
      a += stringify(i) + ":" + o;
    }
  }
  w.delete(e);
  return a + "}";
};

var extract = (e, u, r) => {
  if (null == r || "object" != typeof r || r.toJSON || w.has(r)) {} else if (Array.isArray(r)) {
    for (var n = 0, t = r.length; n < t; n++) {
      extract(e, `${u}.${n}`, r[n]);
    }
  } else if (r instanceof S || r instanceof x) {
    e.set(u, r);
  } else {
    w.add(r);
    for (var a of Object.keys(r)) {
      extract(e, `${u}.${a}`, r[a]);
    }
  }
};

var stringifyVariables = e => {
  w.clear();
  return stringify(e);
};

class NoopConstructor {}

var S = "undefined" != typeof File ? File : NoopConstructor;

var x = "undefined" != typeof Blob ? Blob : NoopConstructor;

var T = /("{3}[\s\S]*"{3}|"(?:\\.|[^"])*")/g;

var I = /(?:#[^\n\r]+)?(?:[\r\n]+|$)/g;

var replaceOutsideStrings = (e, u) => u % 2 == 0 ? e.replace(I, "\n") : e;

var sanitizeDocument = e => e.split(T).map(replaceOutsideStrings).join("").trim();

var O = new Map;

var M = new Map;

var stringifyDocument = e => {
  var u;
  if ("string" == typeof e) {
    u = sanitizeDocument(e);
  } else if (e.loc && M.get(e.__key) === e) {
    u = e.loc.source.body;
  } else {
    u = O.get(e) || sanitizeDocument(F(e));
    O.set(e, u);
  }
  if ("string" != typeof e && !e.loc) {
    e.loc = {
      start: 0,
      end: u.length,
      source: {
        body: u,
        name: "gql",
        locationOffset: {
          line: 1,
          column: 1
        }
      }
    };
  }
  return u;
};

var hashDocument = e => {
  var u = phash(stringifyDocument(e));
  if (e.definitions) {
    var r = getOperationName(e);
    if (r) {
      u = phash(`\n# ${r}`, u);
    }
  }
  return u;
};

var createRequest = (e, u, r) => {
  var n = u || {};
  var t = (e => {
    var u;
    var r;
    if ("string" == typeof e) {
      u = hashDocument(e);
      r = M.get(u) || E(e, {
        noLocation: !0
      });
    } else {
      u = e.__key || hashDocument(e);
      r = M.get(u) || e;
    }
    if (!r.loc) {
      stringifyDocument(r);
    }
    r.__key = u;
    M.set(u, r);
    return r;
  })(e);
  var a = stringifyVariables(n);
  var i = t.__key;
  if ("{}" !== a) {
    i = phash(a, i);
  }
  return {
    key: i,
    query: t,
    variables: n,
    extensions: r
  };
};

var getOperationName = e => {
  for (var u of e.definitions) {
    if (u.kind === f.OPERATION_DEFINITION) {
      return u.name ? u.name.value : void 0;
    }
  }
};

var makeResult = (e, u, r) => {
  if (!("data" in u || "errors" in u && Array.isArray(u.errors))) {
    throw new Error("No Content");
  }
  var n = "subscription" === e.kind;
  return {
    operation: e,
    data: u.data,
    error: Array.isArray(u.errors) ? new CombinedError({
      graphQLErrors: u.errors,
      response: r
    }) : void 0,
    extensions: u.extensions ? {
      ...u.extensions
    } : void 0,
    hasNext: null == u.hasNext ? n : u.hasNext,
    stale: !1
  };
};

var deepMerge = (e, u) => {
  if ("object" == typeof e && null != e) {
    if (!e.constructor || e.constructor === Object || Array.isArray(e)) {
      e = Array.isArray(e) ? [ ...e ] : {
        ...e
      };
      for (var r of Object.keys(u)) {
        e[r] = deepMerge(e[r], u[r]);
      }
      return e;
    }
  }
  return u;
};

var mergeResultPatch = (e, u, r, n) => {
  var t = e.error ? e.error.graphQLErrors : [];
  var a = !!e.extensions || !!(u.payload || u).extensions;
  var i = {
    ...e.extensions,
    ...(u.payload || u).extensions
  };
  var o = u.incremental;
  if ("path" in u) {
    o = [ u ];
  }
  var D = {
    data: e.data
  };
  if (o) {
    var _loop = function(e) {
      if (Array.isArray(e.errors)) {
        t.push(...e.errors);
      }
      if (e.extensions) {
        Object.assign(i, e.extensions);
        a = !0;
      }
      var u = "data";
      var r = D;
      var o = [];
      if (e.path) {
        o = e.path;
      } else if (n) {
        var s = n.find((u => u.id === e.id));
        if (e.subPath) {
          o = [ ...s.path, ...e.subPath ];
        } else {
          o = s.path;
        }
      }
      for (var l = 0, c = o.length; l < c; u = o[l++]) {
        r = r[u] = Array.isArray(r[u]) ? [ ...r[u] ] : {
          ...r[u]
        };
      }
      if (e.items) {
        var f = +u >= 0 ? u : 0;
        for (var d = 0, E = e.items.length; d < E; d++) {
          r[f + d] = deepMerge(r[f + d], e.items[d]);
        }
      } else if (void 0 !== e.data) {
        r[u] = deepMerge(r[u], e.data);
      }
    };
    for (var s of o) {
      _loop(s);
    }
  } else {
    D.data = (u.payload || u).data || e.data;
    t = u.errors || u.payload && u.payload.errors || t;
  }
  return {
    operation: e.operation,
    data: D.data,
    error: t.length ? new CombinedError({
      graphQLErrors: t,
      response: r
    }) : void 0,
    extensions: a ? i : void 0,
    hasNext: null != u.hasNext ? u.hasNext : e.hasNext,
    stale: !1
  };
};

var makeErrorResult = (e, u, r) => ({
  operation: e,
  data: void 0,
  error: new CombinedError({
    networkError: u,
    response: r
  }),
  extensions: void 0,
  hasNext: !1,
  stale: !1
});

var splitOutSearchParams = e => {
  var u = e.indexOf("?");
  return u > -1 ? [ e.slice(0, u), new URLSearchParams(e.slice(u + 1)) ] : [ e, new URLSearchParams ];
};

var makeFetchOptions = (e, u) => {
  var r = {
    accept: "subscription" === e.kind ? "text/event-stream, multipart/mixed" : "application/graphql-response+json, application/graphql+json, application/json, text/event-stream, multipart/mixed"
  };
  var n = ("function" == typeof e.context.fetchOptions ? e.context.fetchOptions() : e.context.fetchOptions) || {};
  if (n.headers) {
    if ((e => "has" in e && !Object.keys(e).length)(n.headers)) {
      n.headers.forEach(((e, u) => {
        r[u] = e;
      }));
    } else if (Array.isArray(n.headers)) {
      n.headers.forEach(((e, u) => {
        if (Array.isArray(e)) {
          if (r[e[0]]) {
            r[e[0]] = `${r[e[0]]},${e[1]}`;
          } else {
            r[e[0]] = e[1];
          }
        } else {
          r[u] = e;
        }
      }));
    } else {
      for (var t in n.headers) {
        r[t.toLowerCase()] = n.headers[t];
      }
    }
  }
  var a = ((e, u) => {
    if (u && ("query" !== e.kind || !e.context.preferGetMethod)) {
      var r = stringifyVariables(u);
      var n = (e => {
        var u = new Map;
        if (S !== NoopConstructor || x !== NoopConstructor) {
          w.clear();
          extract(u, "variables", e);
        }
        return u;
      })(u.variables);
      if (n.size) {
        var t = new FormData;
        t.append("operations", r);
        t.append("map", stringifyVariables({
          ...[ ...n.keys() ].map((e => [ e ]))
        }));
        var a = 0;
        for (var i of n.values()) {
          t.append("" + a++, i);
        }
        return t;
      }
      return r;
    }
  })(e, u);
  if ("string" == typeof a && !r["content-type"]) {
    r["content-type"] = "application/json";
  }
  return {
    ...n,
    method: a ? "POST" : "GET",
    body: a,
    headers: r
  };
};

var _ = "undefined" != typeof TextDecoder ? new TextDecoder : null;

var L = /boundary="?([^=";]+)"?/i;

var P = /data: ?([^\n]+)/;

var toString = e => "Buffer" === e.constructor.name ? e.toString() : _.decode(e);

async function* streamBody(e) {
  if (e.body[Symbol.asyncIterator]) {
    for await (var u of e.body) {
      yield toString(u);
    }
  } else {
    var r = e.body.getReader();
    var n;
    try {
      while (!(n = await r.read()).done) {
        yield toString(n.value);
      }
    } finally {
      r.cancel();
    }
  }
}

async function* split(e, u) {
  var r = "";
  var n;
  for await (var t of e) {
    r += t;
    while ((n = r.indexOf(u)) > -1) {
      yield r.slice(0, n);
      r = r.slice(n + u.length);
    }
  }
}

function makeFetchSource(e, u, r) {
  var n;
  if ("undefined" != typeof AbortController) {
    r.signal = (n = new AbortController).signal;
  }
  return onEnd((() => {
    if (n) {
      n.abort();
    }
  }))(filter((e => !!e))(fromAsyncIterable(async function* fetchOperation(e, u, r) {
    var n = !0;
    var t = null;
    var a;
    try {
      yield await Promise.resolve();
      var i = (a = await (e.context.fetch || fetch)(u, r)).headers.get("Content-Type") || "";
      var o;
      if (/multipart\/mixed/i.test(i)) {
        o = async function* parseMultipartMixed(e, u) {
          var r = e.match(L);
          var n = "--" + (r ? r[1] : "-");
          var t = !0;
          var a;
          for await (var i of split(streamBody(u), "\r\n" + n)) {
            if (t) {
              t = !1;
              var o = i.indexOf(n);
              if (o > -1) {
                i = i.slice(o + n.length);
              } else {
                continue;
              }
            }
            try {
              yield a = JSON.parse(i.slice(i.indexOf("\r\n\r\n") + 4));
            } catch (e) {
              if (!a) {
                throw e;
              }
            }
            if (a && !1 === a.hasNext) {
              break;
            }
          }
          if (a && !1 !== a.hasNext) {
            yield {
              hasNext: !1
            };
          }
        }(i, a);
      } else if (/text\/event-stream/i.test(i)) {
        o = async function* parseEventStream(e) {
          var u;
          for await (var r of split(streamBody(e), "\n\n")) {
            var n = r.match(P);
            if (n) {
              var t = n[1];
              try {
                yield u = JSON.parse(t);
              } catch (e) {
                if (!u) {
                  throw e;
                }
              }
              if (u && !1 === u.hasNext) {
                break;
              }
            }
          }
          if (u && !1 !== u.hasNext) {
            yield {
              hasNext: !1
            };
          }
        }(a);
      } else if (!/text\//i.test(i)) {
        o = async function* parseJSON(e) {
          yield JSON.parse(await e.text());
        }(a);
      } else {
        o = async function* parseMaybeJSON(e) {
          var u = await e.text();
          try {
            var r = JSON.parse(u);
            if ("production" !== process.env.NODE_ENV) {
              console.warn('Found response with content-type "text/plain" but it had a valid "application/json" response.');
            }
            yield r;
          } catch (e) {
            throw new Error(u);
          }
        }(a);
      }
      var D;
      for await (var s of o) {
        if (s.pending && !t) {
          D = s.pending;
        } else if (s.pending) {
          D = [ ...D, ...s.pending ];
        }
        t = t ? mergeResultPatch(t, s, a, D) : makeResult(e, s, a);
        n = !1;
        yield t;
        n = !0;
      }
      if (!t) {
        yield t = makeResult(e, {}, a);
      }
    } catch (u) {
      if (!n) {
        throw u;
      }
      yield makeErrorResult(e, a && (a.status < 200 || a.status >= 300) && a.statusText ? new Error(a.statusText) : u, a);
    }
  }(e, u, r))));
}

var maskTypename = (e, u) => {
  if (!e || "object" != typeof e) {
    return e;
  } else if (Array.isArray(e)) {
    return e.map((e => maskTypename(e)));
  } else if (e && "object" == typeof e && (u || "__typename" in e)) {
    var r = {};
    for (var n in e) {
      if ("__typename" === n) {
        Object.defineProperty(r, "__typename", {
          enumerable: !1,
          value: e.__typename
        });
      } else {
        r[n] = maskTypename(e[n]);
      }
    }
    return r;
  } else {
    return e;
  }
};

function withPromise(e) {
  var source$ = u => e(u);
  source$.toPromise = () => toPromise(take(1)(filter((e => !e.stale && !e.hasNext))(source$)));
  source$.then = (e, u) => source$.toPromise().then(e, u);
  source$.subscribe = e => subscribe(e)(source$);
  return source$;
}

function makeOperation(e, u, r) {
  return {
    ...u,
    kind: e,
    context: u.context ? {
      ...u.context,
      ...r
    } : r || u.context
  };
}

var noop = () => {};

var fetchExchange = ({forward: e, dispatchDebug: u}) => r => {
  var n = mergeMap((e => {
    var n = function makeFetchBody(e) {
      var u = {
        query: void 0,
        documentId: void 0,
        operationName: getOperationName(e.query),
        variables: e.variables || void 0,
        extensions: e.extensions
      };
      if ("documentId" in e.query && e.query.documentId && (!e.query.definitions || !e.query.definitions.length)) {
        u.documentId = e.query.documentId;
      } else if (!e.extensions || !e.extensions.persistedQuery || e.extensions.persistedQuery.miss) {
        u.query = stringifyDocument(e.query);
      }
      return u;
    }(e);
    var t = ((e, u) => {
      var r = "query" === e.kind && e.context.preferGetMethod;
      if (!r || !u) {
        return e.context.url;
      }
      var n = splitOutSearchParams(e.context.url);
      for (var t in u) {
        var a = u[t];
        if (a) {
          n[1].set(t, "object" == typeof a ? stringifyVariables(a) : a);
        }
      }
      var i = n.join("?");
      if (i.length > 2047 && "force" !== r) {
        e.context.preferGetMethod = !1;
        return e.context.url;
      }
      return i;
    })(e, n);
    var a = makeFetchOptions(e, n);
    "production" !== process.env.NODE_ENV && u({
      type: "fetchRequest",
      message: "A fetch request is being executed.",
      operation: e,
      data: {
        url: t,
        fetchOptions: a
      },
      source: "fetchExchange"
    });
    var i = takeUntil(filter((u => "teardown" === u.kind && u.key === e.key))(r))(makeFetchSource(e, t, a));
    if ("production" !== process.env.NODE_ENV) {
      return onPush((r => {
        var n = !r.data ? r.error : void 0;
        "production" !== process.env.NODE_ENV && u({
          type: n ? "fetchError" : "fetchSuccess",
          message: `A ${n ? "failed" : "successful"} fetch response has been returned.`,
          operation: e,
          data: {
            url: t,
            fetchOptions: a,
            value: n || r
          },
          source: "fetchExchange"
        });
      }))(i);
    }
    return i;
  }))(filter((e => "teardown" !== e.kind && ("subscription" !== e.kind || !!e.context.fetchSubscriptions)))(r));
  return merge([ n, e(filter((e => "teardown" === e.kind || "subscription" === e.kind && !e.context.fetchSubscriptions))(r)) ]);
};

var fallbackExchange = ({dispatchDebug: e}) => u => {
  if ("production" !== process.env.NODE_ENV) {
    u = onPush((u => {
      if ("teardown" !== u.kind && "production" !== process.env.NODE_ENV) {
        var r = `No exchange has handled operations of kind "${u.kind}". Check whether you've added an exchange responsible for these operations.`;
        "production" !== process.env.NODE_ENV && e({
          type: "fallbackCatch",
          message: r,
          operation: u,
          source: "fallbackExchange"
        });
        console.warn(r);
      }
    }))(u);
  }
  return filter((e => !1))(u);
};

var R = function Client(e) {
  if ("production" !== process.env.NODE_ENV && !e.url) {
    throw new Error("You are creating an urql-client without a url.");
  }
  var u = 0;
  var r = new Map;
  var n = new Map;
  var t = new Set;
  var a = [];
  var i = {
    url: e.url,
    fetchSubscriptions: e.fetchSubscriptions,
    fetchOptions: e.fetchOptions,
    fetch: e.fetch,
    preferGetMethod: e.preferGetMethod,
    requestPolicy: e.requestPolicy || "cache-first"
  };
  var o = makeSubject();
  function nextOperation(e) {
    if ("mutation" === e.kind || "teardown" === e.kind || !t.has(e.key)) {
      if ("teardown" === e.kind) {
        t.delete(e.key);
      } else if ("mutation" !== e.kind) {
        t.add(e.key);
      }
      o.next(e);
    }
  }
  var D = !1;
  function dispatchOperation(e) {
    if (e) {
      nextOperation(e);
    }
    if (!D) {
      D = !0;
      while (D && (e = a.shift())) {
        nextOperation(e);
      }
      D = !1;
    }
  }
  var makeResultSource = u => {
    var i = takeUntil(filter((e => "teardown" === e.kind && e.key === u.key))(o.source))(filter((e => e.operation.kind === u.kind && e.operation.key === u.key && (!e.operation.context._instance || e.operation.context._instance === u.context._instance)))(A));
    if (e.maskTypename) {
      i = map((e => ({
        ...e,
        data: maskTypename(e.data, !0)
      })))(i);
    }
    if ("query" !== u.kind) {
      i = takeWhile((e => !!e.hasNext), !0)(i);
    } else {
      i = switchMap((e => {
        var r = fromValue(e);
        return e.stale || e.hasNext ? r : merge([ r, map((() => {
          e.stale = !0;
          return e;
        }))(take(1)(filter((e => e.key === u.key))(o.source))) ]);
      }))(i);
    }
    if ("mutation" !== u.kind) {
      i = onEnd((() => {
        t.delete(u.key);
        r.delete(u.key);
        n.delete(u.key);
        D = !1;
        for (var e = a.length - 1; e >= 0; e--) {
          if (a[e].key === u.key) {
            a.splice(e, 1);
          }
        }
        nextOperation(makeOperation("teardown", u, u.context));
      }))(onPush((e => {
        if (e.stale) {
          for (var n of a) {
            if (n.key === e.operation.key) {
              t.delete(n.key);
              break;
            }
          }
        } else if (!e.hasNext) {
          t.delete(u.key);
        }
        r.set(u.key, e);
      }))(i));
    } else {
      i = onStart((() => {
        nextOperation(u);
      }))(i);
    }
    return share(i);
  };
  var s = this instanceof Client ? this : Object.create(Client.prototype);
  var l = Object.assign(s, {
    suspense: !!e.suspense,
    operations$: o.source,
    reexecuteOperation(e) {
      if ("teardown" === e.kind) {
        dispatchOperation(e);
      } else if ("mutation" === e.kind || n.has(e.key)) {
        var u = !1;
        for (var r = 0; r < a.length; r++) {
          u = u || a[r].key === e.key;
        }
        if (!u) {
          t.delete(e.key);
        }
        a.push(e);
        Promise.resolve().then(dispatchOperation);
      }
    },
    createRequestOperation(e, r, n) {
      if (!n) {
        n = {};
      }
      var t;
      if ("production" !== process.env.NODE_ENV && "teardown" !== e && (t = (e => {
        for (var u of e.definitions) {
          if (u.kind === f.OPERATION_DEFINITION) {
            return u.operation;
          }
        }
      })(r.query)) !== e) {
        throw new Error(`Expected operation of type "${e}" but found "${t}"`);
      }
      return makeOperation(e, r, {
        _instance: "mutation" === e ? u = u + 1 | 0 : void 0,
        ...i,
        ...n,
        requestPolicy: n.requestPolicy || i.requestPolicy,
        suspense: n.suspense || !1 !== n.suspense && l.suspense
      });
    },
    executeRequestOperation(e) {
      if ("mutation" === e.kind) {
        return withPromise(makeResultSource(e));
      }
      return withPromise(function lazy(e) {
        return u => e()(u);
      }((() => {
        var u = n.get(e.key);
        if (!u) {
          n.set(e.key, u = makeResultSource(e));
        }
        u = onStart((() => {
          dispatchOperation(e);
        }))(u);
        var t = r.get(e.key);
        if ("query" === e.kind && t && (t.stale || t.hasNext)) {
          return switchMap(fromValue)(merge([ u, filter((u => u === r.get(e.key)))(fromValue(t)) ]));
        } else {
          return u;
        }
      })));
    },
    executeQuery(e, u) {
      var r = l.createRequestOperation("query", e, u);
      return l.executeRequestOperation(r);
    },
    executeSubscription(e, u) {
      var r = l.createRequestOperation("subscription", e, u);
      return l.executeRequestOperation(r);
    },
    executeMutation(e, u) {
      var r = l.createRequestOperation("mutation", e, u);
      return l.executeRequestOperation(r);
    },
    readQuery(e, u, r) {
      var n = null;
      subscribe((e => {
        n = e;
      }))(l.query(e, u, r)).unsubscribe();
      return n;
    },
    query: (e, u, r) => l.executeQuery(createRequest(e, u), r),
    subscription: (e, u, r) => l.executeSubscription(createRequest(e, u), r),
    mutation: (e, u, r) => l.executeMutation(createRequest(e, u), r)
  });
  var c = noop;
  if ("production" !== process.env.NODE_ENV) {
    var {next: d, source: E} = makeSubject();
    l.subscribeToDebugTarget = e => subscribe(e)(E);
    c = d;
  }
  var F = (e => ({client: u, forward: r, dispatchDebug: n}) => e.reduceRight(((e, r) => {
    var t = !1;
    return r({
      client: u,
      forward(u) {
        if ("production" !== process.env.NODE_ENV) {
          if (t) {
            throw new Error("forward() must only be called once in each Exchange.");
          }
          t = !0;
        }
        return share(e(share(u)));
      },
      dispatchDebug(e) {
        "production" !== process.env.NODE_ENV && n({
          timestamp: Date.now(),
          source: r.name,
          ...e
        });
      }
    });
  }), r))(e.exchanges);
  var A = share(F({
    client: l,
    dispatchDebug: c,
    forward: fallbackExchange({
      dispatchDebug: c
    })
  })(o.source));
  !function publish(e) {
    subscribe((e => {}))(e);
  }(A);
  return l;
};

var _hasField = (e, u) => !!e && !!e.fields && e.fields.some((e => e.name === u));

var toSupportedFeatures = e => ({
  directiveIsRepeatable: _hasField(e.directive, "isRepeatable"),
  specifiedByURL: _hasField(e.type, "specifiedByURL"),
  inputValueDeprecation: _hasField(e.inputValue, "isDeprecated")
});

var j;

var V;

var makeIntrospectionQuery = e => {
  if (j && V === e) {
    return j;
  } else {
    return j = _makeIntrospectionQuery(V = e);
  }
};

var _makeIntrospectionQuery = e => ({
  kind: f.DOCUMENT,
  definitions: [ {
    kind: f.OPERATION_DEFINITION,
    name: {
      kind: f.NAME,
      value: "IntrospectionQuery"
    },
    operation: A.QUERY,
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "__schema"
        },
        selectionSet: _makeSchemaSelection(e)
      } ]
    }
  }, _makeSchemaFullTypeFragment(e), _makeSchemaInputValueFragment(e), _makeTypeRefFragment() ]
});

var makeIntrospectSupportQuery = () => ({
  kind: f.DOCUMENT,
  definitions: [ {
    kind: f.OPERATION_DEFINITION,
    name: {
      kind: f.NAME,
      value: "IntrospectSupportQuery"
    },
    operation: A.QUERY,
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        alias: {
          kind: f.NAME,
          value: "directive"
        },
        name: {
          kind: f.NAME,
          value: "__type"
        },
        arguments: [ {
          kind: f.ARGUMENT,
          name: {
            kind: f.NAME,
            value: "name"
          },
          value: {
            kind: f.STRING,
            value: "__Directive"
          }
        } ],
        selectionSet: _makeFieldNamesSelection()
      }, {
        kind: f.FIELD,
        alias: {
          kind: f.NAME,
          value: "type"
        },
        name: {
          kind: f.NAME,
          value: "__type"
        },
        arguments: [ {
          kind: f.ARGUMENT,
          name: {
            kind: f.NAME,
            value: "name"
          },
          value: {
            kind: f.STRING,
            value: "__Type"
          }
        } ],
        selectionSet: _makeFieldNamesSelection()
      }, {
        kind: f.FIELD,
        alias: {
          kind: f.NAME,
          value: "inputValue"
        },
        name: {
          kind: f.NAME,
          value: "__type"
        },
        arguments: [ {
          kind: f.ARGUMENT,
          name: {
            kind: f.NAME,
            value: "name"
          },
          value: {
            kind: f.STRING,
            value: "__InputValue"
          }
        } ],
        selectionSet: _makeFieldNamesSelection()
      } ]
    }
  } ]
});

var _makeFieldNamesSelection = () => ({
  kind: f.SELECTION_SET,
  selections: [ {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "fields"
    },
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "name"
        }
      } ]
    }
  } ]
});

var _makeSchemaSelection = e => ({
  kind: f.SELECTION_SET,
  selections: [ {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "queryType"
    },
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "name"
        }
      } ]
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "mutationType"
    },
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "name"
        }
      } ]
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "subscriptionType"
    },
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "name"
        }
      } ]
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "types"
    },
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FRAGMENT_SPREAD,
        name: {
          kind: f.NAME,
          value: "FullType"
        }
      } ]
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "directives"
    },
    selectionSet: {
      kind: f.SELECTION_SET,
      selections: [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "name"
        }
      }, {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "description"
        }
      }, {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "locations"
        }
      }, _makeSchemaArgsField(e), ...e.directiveIsRepeatable ? [ {
        kind: f.FIELD,
        name: {
          kind: f.NAME,
          value: "isRepeatable"
        }
      } ] : [] ]
    }
  } ]
});

var _makeSchemaFullTypeFragment = e => ({
  kind: f.FRAGMENT_DEFINITION,
  name: {
    kind: f.NAME,
    value: "FullType"
  },
  typeCondition: {
    kind: f.NAMED_TYPE,
    name: {
      kind: f.NAME,
      value: "__Type"
    }
  },
  selectionSet: {
    kind: f.SELECTION_SET,
    selections: [ {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "kind"
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "name"
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "description"
      }
    }, ...e.specifiedByURL ? [ {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "specifiedByURL"
      }
    } ] : [], {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "fields"
      },
      arguments: [ {
        kind: f.ARGUMENT,
        name: {
          kind: f.NAME,
          value: "includeDeprecated"
        },
        value: {
          kind: f.BOOLEAN,
          value: !0
        }
      } ],
      selectionSet: {
        kind: f.SELECTION_SET,
        selections: [ {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "name"
          }
        }, {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "description"
          }
        }, {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "isDeprecated"
          }
        }, {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "deprecationReason"
          }
        }, _makeSchemaArgsField(e), {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "type"
          },
          selectionSet: {
            kind: f.SELECTION_SET,
            selections: [ {
              kind: f.FRAGMENT_SPREAD,
              name: {
                kind: f.NAME,
                value: "TypeRef"
              }
            } ]
          }
        } ]
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "interfaces"
      },
      selectionSet: {
        kind: f.SELECTION_SET,
        selections: [ {
          kind: f.FRAGMENT_SPREAD,
          name: {
            kind: f.NAME,
            value: "TypeRef"
          }
        } ]
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "possibleTypes"
      },
      selectionSet: {
        kind: f.SELECTION_SET,
        selections: [ {
          kind: f.FRAGMENT_SPREAD,
          name: {
            kind: f.NAME,
            value: "TypeRef"
          }
        } ]
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "inputFields"
      },
      arguments: e.inputValueDeprecation ? [ {
        kind: f.ARGUMENT,
        name: {
          kind: f.NAME,
          value: "includeDeprecated"
        },
        value: {
          kind: f.BOOLEAN,
          value: !0
        }
      } ] : [],
      selectionSet: {
        kind: f.SELECTION_SET,
        selections: [ {
          kind: f.FRAGMENT_SPREAD,
          name: {
            kind: f.NAME,
            value: "InputValue"
          }
        } ]
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "enumValues"
      },
      arguments: [ {
        kind: f.ARGUMENT,
        name: {
          kind: f.NAME,
          value: "includeDeprecated"
        },
        value: {
          kind: f.BOOLEAN,
          value: !0
        }
      } ],
      selectionSet: {
        kind: f.SELECTION_SET,
        selections: [ {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "name"
          }
        }, {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "description"
          }
        }, {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "isDeprecated"
          }
        }, {
          kind: f.FIELD,
          name: {
            kind: f.NAME,
            value: "deprecationReason"
          }
        } ]
      }
    } ]
  }
});

var _makeSchemaArgsField = e => ({
  kind: f.FIELD,
  name: {
    kind: f.NAME,
    value: "args"
  },
  arguments: e.inputValueDeprecation ? [ {
    kind: f.ARGUMENT,
    name: {
      kind: f.NAME,
      value: "includeDeprecated"
    },
    value: {
      kind: f.BOOLEAN,
      value: !0
    }
  } ] : [],
  selectionSet: {
    kind: f.SELECTION_SET,
    selections: [ {
      kind: f.FRAGMENT_SPREAD,
      name: {
        kind: f.NAME,
        value: "InputValue"
      }
    } ]
  }
});

var _makeSchemaInputValueFragment = e => ({
  kind: f.FRAGMENT_DEFINITION,
  name: {
    kind: f.NAME,
    value: "InputValue"
  },
  typeCondition: {
    kind: f.NAMED_TYPE,
    name: {
      kind: f.NAME,
      value: "__InputValue"
    }
  },
  selectionSet: {
    kind: f.SELECTION_SET,
    selections: [ {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "name"
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "description"
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "defaultValue"
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "type"
      },
      selectionSet: {
        kind: f.SELECTION_SET,
        selections: [ {
          kind: f.FRAGMENT_SPREAD,
          name: {
            kind: f.NAME,
            value: "TypeRef"
          }
        } ]
      }
    }, ...e.inputValueDeprecation ? [ {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "isDeprecated"
      }
    }, {
      kind: f.FIELD,
      name: {
        kind: f.NAME,
        value: "deprecationReason"
      }
    } ] : [] ]
  }
});

var _makeTypeRefFragment = () => ({
  kind: f.FRAGMENT_DEFINITION,
  name: {
    kind: f.NAME,
    value: "TypeRef"
  },
  typeCondition: {
    kind: f.NAMED_TYPE,
    name: {
      kind: f.NAME,
      value: "__Type"
    }
  },
  selectionSet: _makeTypeRefSelection(0)
});

var _makeTypeRefSelection = e => ({
  kind: f.SELECTION_SET,
  selections: e < 9 ? [ {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "kind"
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "name"
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "ofType"
    },
    selectionSet: _makeTypeRefSelection(e + 1)
  } ] : [ {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "kind"
    }
  }, {
    kind: f.FIELD,
    name: {
      kind: f.NAME,
      value: "name"
    }
  } ]
});

var $ = {
  directiveIsRepeatable: !0,
  specifiedByURL: !0,
  inputValueDeprecation: !0
};

function loadFromSDL(e) {
  var u = new Set;
  var r = null;
  var n = null;
  var load = async () => {
    var u = o.extname(e.file);
    var r = await C.readFile(e.file, {
      encoding: "utf8"
    });
    if (".json" === u) {
      var n = null;
      try {
        n = JSON.parse(r);
      } catch (e) {}
      return n && {
        introspection: n,
        schema: s(n, {
          assumeValid: !!e.assumeValid
        })
      };
    } else {
      var t = l(r, {
        assumeValidSDL: !!e.assumeValid
      });
      var a = makeIntrospectionQuery($);
      var i = c({
        schema: t,
        document: a
      });
      if (i.errors) {
        throw new CombinedError({
          graphQLErrors: i.errors
        });
      } else if (i.data) {
        return {
          introspection: i.data,
          schema: t
        };
      } else {
        return null;
      }
    }
  };
  return {
    load: async e => e || !n ? n = await load() : n,
    notifyOnUpdate(t) {
      if (!u.size) {
        (async () => {
          r = new AbortController;
          var t = C.watch(e.file, {
            signal: r.signal,
            persistent: !1
          });
          try {
            for await (var a of t) {
              if (n = await load()) {
                for (var i of u) {
                  i(n);
                }
              }
            }
          } catch (e) {
            if ("AbortError" !== e.name) {
              throw e;
            }
          } finally {
            r = null;
          }
        })();
      }
      u.add(t);
      return () => {
        u.delete(t);
        if (!u.size && r) {
          r.abort();
        }
      };
    },
    async loadIntrospection() {
      var e = await this.load();
      return e && e.introspection;
    },
    async loadSchema() {
      var e = await this.load();
      return e && e.schema;
    }
  };
}

var retryExchange = e => {
  var {retryIf: u, retryWith: r} = e;
  var n = e.initialDelayMs || 1e3;
  var t = e.maxDelayMs || 15e3;
  var a = e.maxNumberAttempts || 2;
  var i = null != e.randomDelay ? !!e.randomDelay : !0;
  return ({forward: e, dispatchDebug: o}) => D => {
    var {source: s, next: l} = makeSubject();
    var c = mergeMap((e => {
      var u = e.context.retry || {
        count: 0,
        delay: null
      };
      var r = ++u.count;
      var s = u.delay || n;
      var l = Math.random() + 1.5;
      if (i) {
        if (s * l < t) {
          s *= l;
        } else {
          s = t;
        }
      } else {
        s = Math.min(r * n, t);
      }
      u.delay = s;
      var c = filter((u => ("query" === u.kind || "teardown" === u.kind) && u.key === e.key))(D);
      "production" !== process.env.NODE_ENV && o({
        type: "retryAttempt",
        message: `The operation has failed and a retry has been triggered (${r} / ${a})`,
        operation: e,
        data: {
          retryCount: r,
          delayAmount: s
        },
        source: "retryExchange"
      });
      return takeUntil(c)(function debounce(e) {
        return u => r => {
          var n;
          var t = !1;
          var a = !1;
          u((u => {
            if (a) {} else if (0 === u) {
              a = !0;
              if (n) {
                t = !0;
              } else {
                r(0);
              }
            } else if (0 === u.tag) {
              var i = u[0];
              r(start((e => {
                if (1 === e && !a) {
                  a = !0;
                  t = !1;
                  if (n) {
                    clearTimeout(n);
                  }
                  i(1);
                } else if (!a) {
                  i(0);
                }
              })));
            } else {
              if (n) {
                clearTimeout(n);
              }
              n = setTimeout((() => {
                n = void 0;
                r(u);
                if (t) {
                  r(0);
                }
              }), e(u[0]));
            }
          }));
        };
      }((() => s))(fromValue(makeOperation(e.kind, e, {
        ...e.context,
        retry: u
      }))));
    }))(s);
    return filter((e => {
      var n = e.operation.context.retry;
      if (!e.error || !(u ? u(e.error, e.operation) : r || e.error.networkError)) {
        if (n) {
          n.count = 0;
          n.delay = null;
        }
        return !0;
      }
      if (!((n && n.count || 0) >= a - 1)) {
        var t = r ? r(e.error, e.operation) : e.operation;
        if (!t) {
          return !0;
        }
        l(t);
        return !1;
      }
      "production" !== process.env.NODE_ENV && o({
        type: "retryExhausted",
        message: "Maximum number of retries has been reached. No further retries will be performed.",
        operation: e.operation,
        source: "retryExchange"
      });
      return !0;
    }))(e(merge([ D, c ])));
  };
};

var q = {
  directiveIsRepeatable: !0,
  specifiedByURL: !0,
  inputValueDeprecation: !0
};

var U = {
  directiveIsRepeatable: !1,
  specifiedByURL: !1,
  inputValueDeprecation: !1
};

function loadFromURL(e) {
  var u = e.interval || 6e4;
  var r = new Set;
  var n = null;
  var t = null;
  var a = null;
  var i = new R({
    url: `${e.url}`,
    fetchOptions: {
      headers: e.headers
    },
    exchanges: [ retryExchange({
      initialDelayMs: 200,
      maxDelayMs: 1500
    }), fetchExchange ]
  });
  var introspect = async e => {
    var t = makeIntrospectionQuery(e);
    var o = await i.query(t, {});
    try {
      if (o.error) {
        throw o.error;
      } else if (o.data) {
        var D = o.data;
        return {
          introspection: D,
          schema: s(D, {
            assumeValid: !0
          })
        };
      } else {
        return null;
      }
    } finally {
      (() => {
        if (r.size && !n) {
          n = setTimeout((async () => {
            n = null;
            try {
              a = await load();
            } catch (e) {
              a = null;
            }
            if (a) {
              for (var e of r) {
                e(a);
              }
            }
          }), u);
        }
      })();
    }
  };
  var load = async () => {
    if (!t) {
      var e = makeIntrospectSupportQuery();
      var u = await i.query(e, {});
      if (u.error && u.error.graphQLErrors.length > 0) {
        var r = await introspect(q);
        if (r) {
          t = q;
          return r;
        } else {
          t = U;
        }
      } else if (u.data && !u.error) {
        t = toSupportedFeatures(u.data);
      } else if (u.error) {
        t = null;
        throw u.error;
      } else {
        t = U;
      }
    }
    return introspect(t);
  };
  return {
    load: async e => e || !a ? a = await load() : a,
    notifyOnUpdate(e) {
      r.add(e);
      return () => {
        r.delete(e);
        if (!r.size && n) {
          clearTimeout(n);
          n = null;
        }
      };
    },
    async loadIntrospection() {
      var e = await this.load();
      return e && e.introspection;
    },
    async loadSchema() {
      var e = await this.load();
      return e && e.schema;
    }
  };
}

function load(e) {
  var u = (e => {
    try {
      return e ? {
        url: new URL("object" == typeof e ? e.url : e),
        headers: "object" == typeof e ? e.headers : void 0
      } : null;
    } catch (e) {
      return null;
    }
  })(e.origin);
  if (u) {
    return loadFromURL({
      ...u,
      interval: e.fetchInterval
    });
  } else if ("string" == typeof e.origin) {
    return loadFromSDL({
      file: e.rootPath ? o.resolve(e.rootPath, e.origin) : e.origin,
      assumeValid: null != e.assumeValid ? e.assumeValid : !0
    });
  } else {
    throw new Error('Configuration contains an invalid "schema" option');
  }
}

var printName = e => e ? `'${e}'` : "never";

var printTypeRef = e => {
  if ("NON_NULL" === e.kind) {
    return `{ kind: 'NON_NULL'; name: never; ofType: ${printTypeRef(e.ofType)}; }`;
  } else if ("LIST" === e.kind) {
    return `{ kind: 'LIST'; name: never; ofType: ${printTypeRef(e.ofType)}; }`;
  } else {
    return `{ kind: ${printName(e.kind)}; name: ${printName(e.name)}; ofType: null; }`;
  }
};

var printNamedTypes = e => {
  if (!e.length) {
    return "never";
  }
  var u = "";
  for (var r of e) {
    if (u) {
      u += " | ";
    }
    u += printName(r.name);
  }
  return u;
};

var printFields = e => {
  var u = "";
  for (var r of e) {
    var n = printName(r.name);
    var t = printTypeRef(r.type);
    u += `${printName(r.name)}: { name: ${n}; type: ${t} }; `;
  }
  return `{ ${u}}`;
};

var printIntrospectionType = e => {
  if ("ENUM" === e.kind) {
    var u = printNamedTypes(e.enumValues);
    return `{ kind: 'ENUM'; name: ${printName(e.name)}; type: ${u}; }`;
  } else if ("INPUT_OBJECT" === e.kind) {
    var r = (e => {
      var u = "";
      for (var r of e) {
        if (u) {
          u += ", ";
        }
        u += `{ name: ${printName(r.name)}; type: ${printTypeRef(r.type)}; defaultValue: ${r.defaultValue ? JSON.stringify(r.defaultValue) : "null"} }`;
      }
      return `[${u}]`;
    })(e.inputFields);
    return `{ kind: 'INPUT_OBJECT'; name: ${printName(e.name)}; inputFields: ${r}; }`;
  } else if ("OBJECT" === e.kind) {
    var n = printFields(e.fields);
    return `{ kind: 'OBJECT'; name: ${printName(e.name)}; fields: ${n}; }`;
  } else if ("INTERFACE" === e.kind) {
    return `{ kind: 'INTERFACE'; name: ${printName(e.name)}; fields: ${printFields(e.fields)}; possibleTypes: ${printNamedTypes(e.possibleTypes)}; }`;
  } else if ("UNION" === e.kind) {
    return `{ kind: 'UNION'; name: ${printName(e.name)}; fields: {}; possibleTypes: ${printNamedTypes(e.possibleTypes)}; }`;
  } else if ("SCALAR" === e.kind) {
    return "unknown";
  } else {
    return "never";
  }
};

function preprocessIntrospection({__schema: e}) {
  var u = printName(e.queryType.name);
  var r = printName(e.mutationType && e.mutationType.name);
  var n = printName(e.subscriptionType && e.subscriptionType.name);
  var t = "";
  for (var a of e.types) {
    var i = printIntrospectionType(a);
    if (t) {
      t += "\n";
    }
    t += `    ${printName(a.name)}: ${i};`;
  }
  return `{\n  query: ${u};\n  mutation: ${r};\n  subscription: ${n};\n  types: {\n${t}\n  };\n}`;
}

var J = !1;

var z = !1;

var G = !1;

var Q = !1;

var H = {
  kind: "SCALAR",
  name: "Any"
};

var mapType = e => {
  switch (e.kind) {
   case "NON_NULL":
   case "LIST":
    return {
      kind: e.kind,
      ofType: mapType(e.ofType)
    };

   case "SCALAR":
    if (J) {
      return e;
    } else {
      Q = !0;
      return H;
    }

   case "INPUT_OBJECT":
    if (G) {
      return e;
    } else {
      Q = !0;
      return H;
    }

   case "ENUM":
    if (z) {
      return e;
    } else {
      Q = !0;
      return H;
    }

   case "OBJECT":
   case "INTERFACE":
   case "UNION":
    return e;

   default:
    throw new TypeError(`Unrecognized type reference of type: ${e.kind}.`);
  }
};

var minifyIntrospectionType = e => {
  switch (e.kind) {
   case "SCALAR":
    return {
      kind: "SCALAR",
      name: e.name
    };

   case "ENUM":
    return {
      kind: "ENUM",
      name: e.name,
      enumValues: e.enumValues.map((e => ({
        name: e.name
      })))
    };

   case "INPUT_OBJECT":
    return {
      kind: "INPUT_OBJECT",
      name: e.name,
      inputFields: e.inputFields.map((e => ({
        name: e.name,
        type: mapType(e.type),
        defaultValue: e.defaultValue || void 0
      })))
    };

   case "OBJECT":
    return {
      kind: "OBJECT",
      name: e.name,
      fields: e.fields.map((e => ({
        name: e.name,
        type: e.type && mapType(e.type),
        args: e.args && e.args.map((e => ({
          name: e.name,
          type: mapType(e.type)
        })))
      }))),
      interfaces: e.interfaces && e.interfaces.map((e => ({
        kind: "INTERFACE",
        name: e.name
      })))
    };

   case "INTERFACE":
    return {
      kind: "INTERFACE",
      name: e.name,
      fields: e.fields.map((e => ({
        name: e.name,
        type: e.type && mapType(e.type),
        args: e.args && e.args.map((e => ({
          name: e.name,
          type: mapType(e.type)
        })))
      }))),
      interfaces: e.interfaces && e.interfaces.map((e => ({
        kind: "INTERFACE",
        name: e.name
      }))),
      possibleTypes: e.possibleTypes && e.possibleTypes.map((e => ({
        kind: e.kind,
        name: e.name
      })))
    };

   case "UNION":
    return {
      kind: "UNION",
      name: e.name,
      possibleTypes: e.possibleTypes.map((e => ({
        kind: e.kind,
        name: e.name
      })))
    };

   default:
    return e;
  }
};

class TadaError extends Error {
  constructor(e) {
    super(e);
    this.name = "TadaError";
  }
}

var Y = [ "/* eslint-disable */", "/* prettier-ignore */" ].join("\n") + "\n";

var W = [ "/** An IntrospectionQuery representation of your schema.", " *", " * @remarks", " * This is an introspection of your schema saved as a file by GraphQLSP.", " * It will automatically be used by `gql.tada` to infer the types of your GraphQL documents.", " * If you need to reuse this data or update your `scalars`, update `tadaOutputLocation` to", " * instead save to a .ts instead of a .d.ts file.", " */" ].join("\n");

var K = [ "/** An IntrospectionQuery representation of your schema.", " *", " * @remarks", " * This is an introspection of your schema saved as a file by GraphQLSP.", " * You may import it to create a `graphql()` tag function with `gql.tada`", " * by importing it and passing it to `initGraphQLTada<>()`.", " *", " * @example", " * ```", " * import { initGraphQLTada } from 'gql.tada';", " * import type { introspection } from './introspection';", " *", " * export const graphql = initGraphQLTada<{", " *   introspection: typeof introspection;", " *   scalars: {", " *     DateTime: string;", " *     Json: any;", " *   };", " * }>();", " * ```", " */" ].join("\n");

var stringifyJson = e => "string" == typeof e ? e : JSON.stringify(e, null, 2);

function minifyIntrospection(e) {
  return ((e, u = {}) => {
    if (!e || !("__schema" in e)) {
      throw new TypeError("Expected to receive an IntrospectionQuery.");
    }
    Q = !1;
    J = !!u.includeScalars;
    z = !!u.includeEnums;
    G = !!u.includeInputs;
    var {__schema: {queryType: r, mutationType: n, subscriptionType: t, types: a, directives: i}} = e;
    var o = a.filter((e => {
      switch (e.name) {
       case "__Directive":
       case "__DirectiveLocation":
       case "__EnumValue":
       case "__InputValue":
       case "__Field":
       case "__Type":
       case "__TypeKind":
       case "__Schema":
        return !1;

       default:
        return J && "SCALAR" === e.kind || z && "ENUM" === e.kind || G && "INPUT_OBJECT" === e.kind || "OBJECT" === e.kind || "INTERFACE" === e.kind || "UNION" === e.kind;
      }
    })).map(minifyIntrospectionType);
    if (Q) {
      o.push({
        kind: "SCALAR",
        name: H.name
      });
    }
    var D = [];
    if (u.includeDirectives) {
      D = (i || []).map((e => ({
        name: e.name,
        isRepeatable: e.isRepeatable ? !0 : void 0,
        locations: e.locations,
        args: e.args.map((e => ({
          name: e.name,
          type: mapType(e.type),
          defaultValue: e.defaultValue || void 0
        })))
      })));
    }
    return {
      __schema: {
        queryType: r,
        mutationType: n,
        subscriptionType: t,
        types: o,
        directives: D
      }
    };
  })(e, {
    includeDirectives: !1,
    includeEnums: !0,
    includeInputs: !0,
    includeScalars: !0
  });
}

function outputIntrospectionFile(e, u) {
  if (/\.d\.ts$/.test(u.fileType)) {
    var r = "string" != typeof e && u.shouldPreprocess ? preprocessIntrospection(e) : stringifyJson(e);
    return [ Y, W, `export type introspection = ${r};\n`, "import * as gqlTada from 'gql.tada';\n", "declare module 'gql.tada' {", "  interface setupSchema {", "    introspection: introspection", "  }", "}" ].join("\n");
  } else if (/\.ts$/.test(u.fileType)) {
    var n = stringifyJson(e);
    return [ Y, K, `const introspection = ${n} as const;\n`, "export { introspection };" ].join("\n");
  }
  throw new TadaError(`No available introspection format for "${u.fileType}" (expected ".ts" or ".d.ts")`);
}

function getDefaultExportFromCjs(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}

var Z = {
  exports: {}
};

Z.exports = function() {
  function createCommonjsModule(e, u) {
    return e(u = {
      exports: {}
    }, u.exports), u.exports;
  }
  var e = createCommonjsModule((function(e) {
    var u = e.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
    if ("number" == typeof __g) {
      __g = u;
    }
  }));
  var u = createCommonjsModule((function(e) {
    var u = e.exports = {
      version: "2.6.5"
    };
    if ("number" == typeof __e) {
      __e = u;
    }
  }));
  var _isObject = function(e) {
    return "object" == typeof e ? null !== e : "function" == typeof e;
  };
  var _anObject = function(e) {
    if (!_isObject(e)) {
      throw TypeError(e + " is not an object!");
    }
    return e;
  };
  var _fails = function(e) {
    try {
      return !!e();
    } catch (e) {
      return !0;
    }
  };
  var r = !_fails((function() {
    return 7 != Object.defineProperty({}, "a", {
      get: function() {
        return 7;
      }
    }).a;
  }));
  var n = e.document;
  var t = _isObject(n) && _isObject(n.createElement);
  var _domCreate = function(e) {
    return t ? n.createElement(e) : {};
  };
  var a = !r && !_fails((function() {
    return 7 != Object.defineProperty(_domCreate("div"), "a", {
      get: function() {
        return 7;
      }
    }).a;
  }));
  var _toPrimitive = function(e, u) {
    if (!_isObject(e)) {
      return e;
    }
    var r, n;
    if (u && "function" == typeof (r = e.toString) && !_isObject(n = r.call(e))) {
      return n;
    }
    if ("function" == typeof (r = e.valueOf) && !_isObject(n = r.call(e))) {
      return n;
    }
    if (!u && "function" == typeof (r = e.toString) && !_isObject(n = r.call(e))) {
      return n;
    }
    throw TypeError("Can't convert object to primitive value");
  };
  var i = Object.defineProperty;
  var o = r ? Object.defineProperty : function defineProperty(e, u, r) {
    _anObject(e);
    u = _toPrimitive(u, !0);
    _anObject(r);
    if (a) {
      try {
        return i(e, u, r);
      } catch (e) {}
    }
    if ("get" in r || "set" in r) {
      throw TypeError("Accessors not supported!");
    }
    if ("value" in r) {
      e[u] = r.value;
    }
    return e;
  };
  var D = {
    f: o
  };
  var _propertyDesc = function(e, u) {
    return {
      enumerable: !(1 & e),
      configurable: !(2 & e),
      writable: !(4 & e),
      value: u
    };
  };
  var s = r ? function(e, u, r) {
    return D.f(e, u, _propertyDesc(1, r));
  } : function(e, u, r) {
    e[u] = r;
    return e;
  };
  var l = {}.hasOwnProperty;
  var _has = function(e, u) {
    return l.call(e, u);
  };
  var c = 0;
  var f = Math.random();
  var _uid = function(e) {
    return "Symbol(".concat(void 0 === e ? "" : e, ")_", (++c + f).toString(36));
  };
  var d = createCommonjsModule((function(r) {
    var n = "__core-js_shared__";
    var t = e[n] || (e[n] = {});
    (r.exports = function(e, u) {
      return t[e] || (t[e] = void 0 !== u ? u : {});
    })("versions", []).push({
      version: u.version,
      mode: "global",
      copyright: "© 2019 Denis Pushkarev (zloirock.ru)"
    });
  }));
  var E = d("native-function-to-string", Function.toString);
  var F = createCommonjsModule((function(r) {
    var n = _uid("src");
    var t = "toString";
    var a = ("" + E).split(t);
    u.inspectSource = function(e) {
      return E.call(e);
    };
    (r.exports = function(u, r, t, i) {
      var o = "function" == typeof t;
      if (o) {
        _has(t, "name") || s(t, "name", r);
      }
      if (u[r] === t) {
        return;
      }
      if (o) {
        _has(t, n) || s(t, n, u[r] ? "" + u[r] : a.join(String(r)));
      }
      if (u === e) {
        u[r] = t;
      } else if (!i) {
        delete u[r];
        s(u, r, t);
      } else if (u[r]) {
        u[r] = t;
      } else {
        s(u, r, t);
      }
    })(Function.prototype, t, (function toString() {
      return "function" == typeof this && this[n] || E.call(this);
    }));
  }));
  var _aFunction = function(e) {
    if ("function" != typeof e) {
      throw TypeError(e + " is not a function!");
    }
    return e;
  };
  var _ctx = function(e, u, r) {
    _aFunction(e);
    if (void 0 === u) {
      return e;
    }
    switch (r) {
     case 1:
      return function(r) {
        return e.call(u, r);
      };

     case 2:
      return function(r, n) {
        return e.call(u, r, n);
      };

     case 3:
      return function(r, n, t) {
        return e.call(u, r, n, t);
      };
    }
    return function() {
      return e.apply(u, arguments);
    };
  };
  var A = "prototype";
  var $export = function(r, n, t) {
    var a = r & $export.F;
    var i = r & $export.G;
    var o = r & $export.P;
    var D = r & $export.B;
    var l = i ? e : r & $export.S ? e[n] || (e[n] = {}) : (e[n] || {})[A];
    var c = i ? u : u[n] || (u[n] = {});
    var f = c[A] || (c[A] = {});
    var d, E, C, p;
    if (i) {
      t = n;
    }
    for (d in t) {
      C = ((E = !a && l && void 0 !== l[d]) ? l : t)[d];
      p = D && E ? _ctx(C, e) : o && "function" == typeof C ? _ctx(Function.call, C) : C;
      if (l) {
        F(l, d, C, r & $export.U);
      }
      if (c[d] != C) {
        s(c, d, p);
      }
      if (o && f[d] != C) {
        f[d] = C;
      }
    }
  };
  e.core = u;
  $export.F = 1;
  $export.G = 2;
  $export.S = 4;
  $export.P = 8;
  $export.B = 16;
  $export.W = 32;
  $export.U = 64;
  $export.R = 128;
  var C = $export;
  var p = Math.ceil;
  var v = Math.floor;
  var _toInteger = function(e) {
    return isNaN(e = +e) ? 0 : (e > 0 ? v : p)(e);
  };
  var _defined = function(e) {
    if (null == e) {
      throw TypeError("Can't call method on  " + e);
    }
    return e;
  };
  var _stringAt = function(e) {
    return function(u, r) {
      var n = String(_defined(u));
      var t = _toInteger(r);
      var a = n.length;
      var i, o;
      if (t < 0 || t >= a) {
        return e ? "" : void 0;
      }
      return (i = n.charCodeAt(t)) < 55296 || i > 56319 || t + 1 === a || (o = n.charCodeAt(t + 1)) < 56320 || o > 57343 ? e ? n.charAt(t) : i : e ? n.slice(t, t + 2) : o - 56320 + (i - 55296 << 10) + 65536;
    };
  };
  var m = _stringAt(!1);
  C(C.P, "String", {
    codePointAt: function codePointAt(e) {
      return m(this, e);
    }
  });
  var h = Math.max;
  var y = Math.min;
  var _toAbsoluteIndex = function(e, u) {
    return (e = _toInteger(e)) < 0 ? h(e + u, 0) : y(e, u);
  };
  var B = String.fromCharCode;
  var k = String.fromCodePoint;
  C(C.S + C.F * (!!k && 1 != k.length), "String", {
    fromCodePoint: function fromCodePoint(e) {
      var u = arguments;
      var r = [];
      var n = arguments.length;
      var t = 0;
      var a;
      while (n > t) {
        a = +u[t++];
        if (_toAbsoluteIndex(a, 1114111) !== a) {
          throw RangeError(a + " is not a valid code point");
        }
        r.push(a < 65536 ? B(a) : B(55296 + ((a -= 65536) >> 10), a % 1024 + 56320));
      }
      return r.join("");
    }
  });
  var g = {
    Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/,
    ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/,
    ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
  };
  var N = {
    isSpaceSeparator: function isSpaceSeparator(e) {
      return "string" == typeof e && g.Space_Separator.test(e);
    },
    isIdStartChar: function isIdStartChar(e) {
      return "string" == typeof e && (e >= "a" && e <= "z" || e >= "A" && e <= "Z" || "$" === e || "_" === e || g.ID_Start.test(e));
    },
    isIdContinueChar: function isIdContinueChar(e) {
      return "string" == typeof e && (e >= "a" && e <= "z" || e >= "A" && e <= "Z" || e >= "0" && e <= "9" || "$" === e || "_" === e || "‌" === e || "‍" === e || g.ID_Continue.test(e));
    },
    isDigit: function isDigit(e) {
      return "string" == typeof e && /[0-9]/.test(e);
    },
    isHexDigit: function isHexDigit(e) {
      return "string" == typeof e && /[0-9A-Fa-f]/.test(e);
    }
  };
  var w;
  var b;
  var S;
  var x;
  var T;
  var I;
  var O;
  var M;
  var _;
  var L = function parse(e, u) {
    w = String(e);
    b = "start";
    S = [];
    x = 0;
    T = 1;
    I = 0;
    O = void 0;
    M = void 0;
    _ = void 0;
    do {
      O = lex();
      U[b]();
    } while ("eof" !== O.type);
    if ("function" == typeof u) {
      return internalize({
        "": _
      }, "", u);
    }
    return _;
  };
  function internalize(e, u, r) {
    var n = e[u];
    if (null != n && "object" == typeof n) {
      if (Array.isArray(n)) {
        for (var t = 0; t < n.length; t++) {
          var a = String(t);
          var i = internalize(n, a, r);
          if (void 0 === i) {
            delete n[a];
          } else {
            Object.defineProperty(n, a, {
              value: i,
              writable: !0,
              enumerable: !0,
              configurable: !0
            });
          }
        }
      } else {
        for (var o in n) {
          var D = internalize(n, o, r);
          if (void 0 === D) {
            delete n[o];
          } else {
            Object.defineProperty(n, o, {
              value: D,
              writable: !0,
              enumerable: !0,
              configurable: !0
            });
          }
        }
      }
    }
    return r.call(e, u, n);
  }
  var P;
  var R;
  var j;
  var V;
  var $;
  function lex() {
    P = "default";
    R = "";
    j = !1;
    V = 1;
    for (;;) {
      $ = peek();
      var e = q[P]();
      if (e) {
        return e;
      }
    }
  }
  function peek() {
    if (w[x]) {
      return String.fromCodePoint(w.codePointAt(x));
    }
  }
  function read() {
    var e = peek();
    if ("\n" === e) {
      T++;
      I = 0;
    } else if (e) {
      I += e.length;
    } else {
      I++;
    }
    if (e) {
      x += e.length;
    }
    return e;
  }
  var q = {
    default: function default$1() {
      switch ($) {
       case "\t":
       case "\v":
       case "\f":
       case " ":
       case " ":
       case "\ufeff":
       case "\n":
       case "\r":
       case "\u2028":
       case "\u2029":
        read();
        return;

       case "/":
        read();
        P = "comment";
        return;

       case void 0:
        read();
        return newToken("eof");
      }
      if (N.isSpaceSeparator($)) {
        read();
        return;
      }
      return q[b]();
    },
    comment: function comment() {
      switch ($) {
       case "*":
        read();
        P = "multiLineComment";
        return;

       case "/":
        read();
        P = "singleLineComment";
        return;
      }
      throw invalidChar(read());
    },
    multiLineComment: function multiLineComment() {
      switch ($) {
       case "*":
        read();
        P = "multiLineCommentAsterisk";
        return;

       case void 0:
        throw invalidChar(read());
      }
      read();
    },
    multiLineCommentAsterisk: function multiLineCommentAsterisk() {
      switch ($) {
       case "*":
        read();
        return;

       case "/":
        read();
        P = "default";
        return;

       case void 0:
        throw invalidChar(read());
      }
      read();
      P = "multiLineComment";
    },
    singleLineComment: function singleLineComment() {
      switch ($) {
       case "\n":
       case "\r":
       case "\u2028":
       case "\u2029":
        read();
        P = "default";
        return;

       case void 0:
        read();
        return newToken("eof");
      }
      read();
    },
    value: function value() {
      switch ($) {
       case "{":
       case "[":
        return newToken("punctuator", read());

       case "n":
        read();
        literal("ull");
        return newToken("null", null);

       case "t":
        read();
        literal("rue");
        return newToken("boolean", !0);

       case "f":
        read();
        literal("alse");
        return newToken("boolean", !1);

       case "-":
       case "+":
        if ("-" === read()) {
          V = -1;
        }
        P = "sign";
        return;

       case ".":
        R = read();
        P = "decimalPointLeading";
        return;

       case "0":
        R = read();
        P = "zero";
        return;

       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        R = read();
        P = "decimalInteger";
        return;

       case "I":
        read();
        literal("nfinity");
        return newToken("numeric", 1 / 0);

       case "N":
        read();
        literal("aN");
        return newToken("numeric", NaN);

       case '"':
       case "'":
        j = '"' === read();
        R = "";
        P = "string";
        return;
      }
      throw invalidChar(read());
    },
    identifierNameStartEscape: function identifierNameStartEscape() {
      if ("u" !== $) {
        throw invalidChar(read());
      }
      read();
      var e = unicodeEscape();
      switch (e) {
       case "$":
       case "_":
        break;

       default:
        if (!N.isIdStartChar(e)) {
          throw invalidIdentifier();
        }
      }
      R += e;
      P = "identifierName";
    },
    identifierName: function identifierName() {
      switch ($) {
       case "$":
       case "_":
       case "‌":
       case "‍":
        R += read();
        return;

       case "\\":
        read();
        P = "identifierNameEscape";
        return;
      }
      if (N.isIdContinueChar($)) {
        R += read();
        return;
      }
      return newToken("identifier", R);
    },
    identifierNameEscape: function identifierNameEscape() {
      if ("u" !== $) {
        throw invalidChar(read());
      }
      read();
      var e = unicodeEscape();
      switch (e) {
       case "$":
       case "_":
       case "‌":
       case "‍":
        break;

       default:
        if (!N.isIdContinueChar(e)) {
          throw invalidIdentifier();
        }
      }
      R += e;
      P = "identifierName";
    },
    sign: function sign$1() {
      switch ($) {
       case ".":
        R = read();
        P = "decimalPointLeading";
        return;

       case "0":
        R = read();
        P = "zero";
        return;

       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        R = read();
        P = "decimalInteger";
        return;

       case "I":
        read();
        literal("nfinity");
        return newToken("numeric", V * (1 / 0));

       case "N":
        read();
        literal("aN");
        return newToken("numeric", NaN);
      }
      throw invalidChar(read());
    },
    zero: function zero() {
      switch ($) {
       case ".":
        R += read();
        P = "decimalPoint";
        return;

       case "e":
       case "E":
        R += read();
        P = "decimalExponent";
        return;

       case "x":
       case "X":
        R += read();
        P = "hexadecimal";
        return;
      }
      return newToken("numeric", 0 * V);
    },
    decimalInteger: function decimalInteger() {
      switch ($) {
       case ".":
        R += read();
        P = "decimalPoint";
        return;

       case "e":
       case "E":
        R += read();
        P = "decimalExponent";
        return;
      }
      if (N.isDigit($)) {
        R += read();
        return;
      }
      return newToken("numeric", V * Number(R));
    },
    decimalPointLeading: function decimalPointLeading() {
      if (N.isDigit($)) {
        R += read();
        P = "decimalFraction";
        return;
      }
      throw invalidChar(read());
    },
    decimalPoint: function decimalPoint() {
      switch ($) {
       case "e":
       case "E":
        R += read();
        P = "decimalExponent";
        return;
      }
      if (N.isDigit($)) {
        R += read();
        P = "decimalFraction";
        return;
      }
      return newToken("numeric", V * Number(R));
    },
    decimalFraction: function decimalFraction() {
      switch ($) {
       case "e":
       case "E":
        R += read();
        P = "decimalExponent";
        return;
      }
      if (N.isDigit($)) {
        R += read();
        return;
      }
      return newToken("numeric", V * Number(R));
    },
    decimalExponent: function decimalExponent() {
      switch ($) {
       case "+":
       case "-":
        R += read();
        P = "decimalExponentSign";
        return;
      }
      if (N.isDigit($)) {
        R += read();
        P = "decimalExponentInteger";
        return;
      }
      throw invalidChar(read());
    },
    decimalExponentSign: function decimalExponentSign() {
      if (N.isDigit($)) {
        R += read();
        P = "decimalExponentInteger";
        return;
      }
      throw invalidChar(read());
    },
    decimalExponentInteger: function decimalExponentInteger() {
      if (N.isDigit($)) {
        R += read();
        return;
      }
      return newToken("numeric", V * Number(R));
    },
    hexadecimal: function hexadecimal() {
      if (N.isHexDigit($)) {
        R += read();
        P = "hexadecimalInteger";
        return;
      }
      throw invalidChar(read());
    },
    hexadecimalInteger: function hexadecimalInteger() {
      if (N.isHexDigit($)) {
        R += read();
        return;
      }
      return newToken("numeric", V * Number(R));
    },
    string: function string() {
      switch ($) {
       case "\\":
        read();
        R += escape();
        return;

       case '"':
        if (j) {
          read();
          return newToken("string", R);
        }
        R += read();
        return;

       case "'":
        if (!j) {
          read();
          return newToken("string", R);
        }
        R += read();
        return;

       case "\n":
       case "\r":
        throw invalidChar(read());

       case "\u2028":
       case "\u2029":
        separatorChar($);
        break;

       case void 0:
        throw invalidChar(read());
      }
      R += read();
    },
    start: function start() {
      switch ($) {
       case "{":
       case "[":
        return newToken("punctuator", read());
      }
      P = "value";
    },
    beforePropertyName: function beforePropertyName() {
      switch ($) {
       case "$":
       case "_":
        R = read();
        P = "identifierName";
        return;

       case "\\":
        read();
        P = "identifierNameStartEscape";
        return;

       case "}":
        return newToken("punctuator", read());

       case '"':
       case "'":
        j = '"' === read();
        P = "string";
        return;
      }
      if (N.isIdStartChar($)) {
        R += read();
        P = "identifierName";
        return;
      }
      throw invalidChar(read());
    },
    afterPropertyName: function afterPropertyName() {
      if (":" === $) {
        return newToken("punctuator", read());
      }
      throw invalidChar(read());
    },
    beforePropertyValue: function beforePropertyValue() {
      P = "value";
    },
    afterPropertyValue: function afterPropertyValue() {
      switch ($) {
       case ",":
       case "}":
        return newToken("punctuator", read());
      }
      throw invalidChar(read());
    },
    beforeArrayValue: function beforeArrayValue() {
      if ("]" === $) {
        return newToken("punctuator", read());
      }
      P = "value";
    },
    afterArrayValue: function afterArrayValue() {
      switch ($) {
       case ",":
       case "]":
        return newToken("punctuator", read());
      }
      throw invalidChar(read());
    },
    end: function end() {
      throw invalidChar(read());
    }
  };
  function newToken(e, u) {
    return {
      type: e,
      value: u,
      line: T,
      column: I
    };
  }
  function literal(e) {
    for (var u = 0, r = e; u < r.length; u += 1) {
      var n = r[u];
      if (peek() !== n) {
        throw invalidChar(read());
      }
      read();
    }
  }
  function escape() {
    switch (peek()) {
     case "b":
      read();
      return "\b";

     case "f":
      read();
      return "\f";

     case "n":
      read();
      return "\n";

     case "r":
      read();
      return "\r";

     case "t":
      read();
      return "\t";

     case "v":
      read();
      return "\v";

     case "0":
      read();
      if (N.isDigit(peek())) {
        throw invalidChar(read());
      }
      return "\0";

     case "x":
      read();
      return hexEscape();

     case "u":
      read();
      return unicodeEscape();

     case "\n":
     case "\u2028":
     case "\u2029":
      read();
      return "";

     case "\r":
      read();
      if ("\n" === peek()) {
        read();
      }
      return "";

     case "1":
     case "2":
     case "3":
     case "4":
     case "5":
     case "6":
     case "7":
     case "8":
     case "9":
     case void 0:
      throw invalidChar(read());
    }
    return read();
  }
  function hexEscape() {
    var e = "";
    var u = peek();
    if (!N.isHexDigit(u)) {
      throw invalidChar(read());
    }
    e += read();
    u = peek();
    if (!N.isHexDigit(u)) {
      throw invalidChar(read());
    }
    e += read();
    return String.fromCodePoint(parseInt(e, 16));
  }
  function unicodeEscape() {
    var e = "";
    var u = 4;
    while (u-- > 0) {
      var r = peek();
      if (!N.isHexDigit(r)) {
        throw invalidChar(read());
      }
      e += read();
    }
    return String.fromCodePoint(parseInt(e, 16));
  }
  var U = {
    start: function start() {
      if ("eof" === O.type) {
        throw invalidEOF();
      }
      push();
    },
    beforePropertyName: function beforePropertyName() {
      switch (O.type) {
       case "identifier":
       case "string":
        M = O.value;
        b = "afterPropertyName";
        return;

       case "punctuator":
        pop();
        return;

       case "eof":
        throw invalidEOF();
      }
    },
    afterPropertyName: function afterPropertyName() {
      if ("eof" === O.type) {
        throw invalidEOF();
      }
      b = "beforePropertyValue";
    },
    beforePropertyValue: function beforePropertyValue() {
      if ("eof" === O.type) {
        throw invalidEOF();
      }
      push();
    },
    beforeArrayValue: function beforeArrayValue() {
      if ("eof" === O.type) {
        throw invalidEOF();
      }
      if ("punctuator" === O.type && "]" === O.value) {
        pop();
        return;
      }
      push();
    },
    afterPropertyValue: function afterPropertyValue() {
      if ("eof" === O.type) {
        throw invalidEOF();
      }
      switch (O.value) {
       case ",":
        b = "beforePropertyName";
        return;

       case "}":
        pop();
      }
    },
    afterArrayValue: function afterArrayValue() {
      if ("eof" === O.type) {
        throw invalidEOF();
      }
      switch (O.value) {
       case ",":
        b = "beforeArrayValue";
        return;

       case "]":
        pop();
      }
    },
    end: function end() {}
  };
  function push() {
    var e;
    switch (O.type) {
     case "punctuator":
      switch (O.value) {
       case "{":
        e = {};
        break;

       case "[":
        e = [];
      }
      break;

     case "null":
     case "boolean":
     case "numeric":
     case "string":
      e = O.value;
    }
    if (void 0 === _) {
      _ = e;
    } else {
      var u = S[S.length - 1];
      if (Array.isArray(u)) {
        u.push(e);
      } else {
        Object.defineProperty(u, M, {
          value: e,
          writable: !0,
          enumerable: !0,
          configurable: !0
        });
      }
    }
    if (null !== e && "object" == typeof e) {
      S.push(e);
      if (Array.isArray(e)) {
        b = "beforeArrayValue";
      } else {
        b = "beforePropertyName";
      }
    } else {
      var r = S[S.length - 1];
      if (null == r) {
        b = "end";
      } else if (Array.isArray(r)) {
        b = "afterArrayValue";
      } else {
        b = "afterPropertyValue";
      }
    }
  }
  function pop() {
    S.pop();
    var e = S[S.length - 1];
    if (null == e) {
      b = "end";
    } else if (Array.isArray(e)) {
      b = "afterArrayValue";
    } else {
      b = "afterPropertyValue";
    }
  }
  function invalidChar(e) {
    if (void 0 === e) {
      return syntaxError("JSON5: invalid end of input at " + T + ":" + I);
    }
    return syntaxError("JSON5: invalid character '" + formatChar(e) + "' at " + T + ":" + I);
  }
  function invalidEOF() {
    return syntaxError("JSON5: invalid end of input at " + T + ":" + I);
  }
  function invalidIdentifier() {
    return syntaxError("JSON5: invalid identifier character at " + T + ":" + (I -= 5));
  }
  function separatorChar(e) {
    console.warn("JSON5: '" + formatChar(e) + "' in strings is not valid ECMAScript; consider escaping");
  }
  function formatChar(e) {
    var u = {
      "'": "\\'",
      '"': '\\"',
      "\\": "\\\\",
      "\b": "\\b",
      "\f": "\\f",
      "\n": "\\n",
      "\r": "\\r",
      "\t": "\\t",
      "\v": "\\v",
      "\0": "\\0",
      "\u2028": "\\u2028",
      "\u2029": "\\u2029"
    };
    if (u[e]) {
      return u[e];
    }
    if (e < " ") {
      var r = e.charCodeAt(0).toString(16);
      return "\\x" + ("00" + r).substring(r.length);
    }
    return e;
  }
  function syntaxError(e) {
    var u = new SyntaxError(e);
    u.lineNumber = T;
    u.columnNumber = I;
    return u;
  }
  var J = function stringify(e, u, r) {
    var n = [];
    var t = "";
    var a;
    var i;
    var o = "";
    var D;
    if (null != u && "object" == typeof u && !Array.isArray(u)) {
      r = u.space;
      D = u.quote;
      u = u.replacer;
    }
    if ("function" == typeof u) {
      i = u;
    } else if (Array.isArray(u)) {
      a = [];
      for (var s = 0, l = u; s < l.length; s += 1) {
        var c = l[s];
        var f = void 0;
        if ("string" == typeof c) {
          f = c;
        } else if ("number" == typeof c || c instanceof String || c instanceof Number) {
          f = String(c);
        }
        if (void 0 !== f && a.indexOf(f) < 0) {
          a.push(f);
        }
      }
    }
    if (r instanceof Number) {
      r = Number(r);
    } else if (r instanceof String) {
      r = String(r);
    }
    if ("number" == typeof r) {
      if (r > 0) {
        r = Math.min(10, Math.floor(r));
        o = "          ".substr(0, r);
      }
    } else if ("string" == typeof r) {
      o = r.substr(0, 10);
    }
    return serializeProperty("", {
      "": e
    });
    function serializeProperty(e, u) {
      var r = u[e];
      if (null != r) {
        if ("function" == typeof r.toJSON5) {
          r = r.toJSON5(e);
        } else if ("function" == typeof r.toJSON) {
          r = r.toJSON(e);
        }
      }
      if (i) {
        r = i.call(u, e, r);
      }
      if (r instanceof Number) {
        r = Number(r);
      } else if (r instanceof String) {
        r = String(r);
      } else if (r instanceof Boolean) {
        r = r.valueOf();
      }
      switch (r) {
       case null:
        return "null";

       case !0:
        return "true";

       case !1:
        return "false";
      }
      if ("string" == typeof r) {
        return quoteString(r);
      }
      if ("number" == typeof r) {
        return String(r);
      }
      if ("object" == typeof r) {
        return Array.isArray(r) ? serializeArray(r) : serializeObject(r);
      }
      return;
    }
    function quoteString(e) {
      var u = {
        "'": .1,
        '"': .2
      };
      var r = {
        "'": "\\'",
        '"': '\\"',
        "\\": "\\\\",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "\t": "\\t",
        "\v": "\\v",
        "\0": "\\0",
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      };
      var n = "";
      for (var t = 0; t < e.length; t++) {
        var a = e[t];
        switch (a) {
         case "'":
         case '"':
          u[a]++;
          n += a;
          continue;

         case "\0":
          if (N.isDigit(e[t + 1])) {
            n += "\\x00";
            continue;
          }
        }
        if (r[a]) {
          n += r[a];
          continue;
        }
        if (a < " ") {
          var i = a.charCodeAt(0).toString(16);
          n += "\\x" + ("00" + i).substring(i.length);
          continue;
        }
        n += a;
      }
      var o = D || Object.keys(u).reduce((function(e, r) {
        return u[e] < u[r] ? e : r;
      }));
      return o + (n = n.replace(new RegExp(o, "g"), r[o])) + o;
    }
    function serializeObject(e) {
      if (n.indexOf(e) >= 0) {
        throw TypeError("Converting circular structure to JSON5");
      }
      n.push(e);
      var u = t;
      t += o;
      var r = [];
      for (var i = 0, D = a || Object.keys(e); i < D.length; i += 1) {
        var s = D[i];
        var l = serializeProperty(s, e);
        if (void 0 !== l) {
          var c = serializeKey(s) + ":";
          if ("" !== o) {
            c += " ";
          }
          r.push(c += l);
        }
      }
      var f;
      if (0 === r.length) {
        f = "{}";
      } else {
        var d;
        if ("" === o) {
          f = "{" + (d = r.join(",")) + "}";
        } else {
          d = r.join(",\n" + t);
          f = "{\n" + t + d + ",\n" + u + "}";
        }
      }
      n.pop();
      t = u;
      return f;
    }
    function serializeKey(e) {
      if (0 === e.length) {
        return quoteString(e);
      }
      var u = String.fromCodePoint(e.codePointAt(0));
      if (!N.isIdStartChar(u)) {
        return quoteString(e);
      }
      for (var r = u.length; r < e.length; r++) {
        if (!N.isIdContinueChar(String.fromCodePoint(e.codePointAt(r)))) {
          return quoteString(e);
        }
      }
      return e;
    }
    function serializeArray(e) {
      if (n.indexOf(e) >= 0) {
        throw TypeError("Converting circular structure to JSON5");
      }
      n.push(e);
      var u = t;
      t += o;
      var r = [];
      for (var a = 0; a < e.length; a++) {
        var i = serializeProperty(String(a), e);
        r.push(void 0 !== i ? i : "null");
      }
      var D;
      if (0 === r.length) {
        D = "[]";
      } else if ("" === o) {
        D = "[" + r.join(",") + "]";
      } else {
        var s = r.join(",\n" + t);
        D = "[\n" + t + s + ",\n" + u + "]";
      }
      n.pop();
      t = u;
      return D;
    }
  };
  var z = {
    parse: L,
    stringify: J
  };
  var G = z;
  return G;
}();

var X = getDefaultExportFromCjs(Z.exports);

var resolveTypeScriptRootDir = async e => {
  var u = await C.readFile(e, {
    encoding: "utf8"
  });
  var r = X.parse(u);
  if (r.compilerOptions && r.compilerOptions.plugins && r.compilerOptions.plugins.find((e => "@0no-co/graphqlsp" === e.name || "gql.tada/lsp" === e.name))) {
    return p.dirname(e);
  } else if (Array.isArray(r.extends)) {
    return r.extends.find((u => {
      var r = require.resolve(u, {
        paths: [ p.dirname(e) ]
      });
      return resolveTypeScriptRootDir(r);
    }));
  } else if (r.extends) {
    var n = require.resolve(r.extends, {
      paths: [ p.dirname(e) ]
    });
    return resolveTypeScriptRootDir(n);
  }
};

export { createProgram, createVirtualHost, importLib, importModule, load, loadFromSDL, loadFromURL, minifyIntrospection, outputIntrospectionFile, preprocessIntrospection, resolveModuleFile, resolveTypeScriptRootDir };
//# sourceMappingURL=gql-tada-internal.mjs.map
