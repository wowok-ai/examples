import * as typescript from 'typescript';
import { CompilerHost, ScriptTarget, CreateSourceFileOptions, ResolvedModule } from 'typescript';
import { IntrospectionQuery, GraphQLSchema } from 'graphql';

declare function normalize(filename: string): string;

/** @internal */
declare function importModule(host: CompilerHost, id: string): Promise<void>;
/** @internal */
declare function importLib(host: CompilerHost): Promise<void>;
/** @internal */
declare function resolveModuleFile(from: string): Promise<string>;

/** @internal */
type VirtualCompilerHost = ReturnType<typeof createVirtualHost> & CompilerHost;
/** @internal */
declare const createProgram: (rootNames: string[], host: CompilerHost) => typescript.Program;
/** @internal */
declare function createVirtualHost(): {
  getCanonicalFileName: typeof normalize;
  getDefaultLibFileName(): string;
  getCurrentDirectory(): '/' | '\\';
  getNewLine(): string;
  getModuleResolutionCache(): typescript.ModuleResolutionCache;
  useCaseSensitiveFileNames(): true;
  fileExists(filename: string): boolean;
  directoryExists(directoryName: string): boolean;
  writeFile(filename: string, content: Uint8Array | string): void;
  getDirectories(directoryName: string): string[];
  readFile(filename: string): string | undefined;
  getSourceFile(
    filename: string,
    languageVersionOrOptions: ScriptTarget | CreateSourceFileOptions
  ): typescript.SourceFile | undefined;
  resolveModuleNames(moduleNames: string[], containingFile: string): (ResolvedModule | undefined)[];
};

interface SchemaLoaderResult {
  introspection: IntrospectionQuery;
  schema: GraphQLSchema;
}
type OnSchemaUpdate = (result: SchemaLoaderResult) => void;
interface SchemaLoader {
  load(reload?: boolean): Promise<SchemaLoaderResult | null>;
  notifyOnUpdate(onUpdate: OnSchemaUpdate): () => void;
  /** @internal */
  loadIntrospection(): Promise<IntrospectionQuery | null>;
  /** @internal */
  loadSchema(): Promise<GraphQLSchema | null>;
}
type SchemaOrigin =
  | string
  | {
      url: string;
      headers?: HeadersInit;
    };

interface LoadFromSDLConfig {
  assumeValid?: boolean;
  file: string;
}
declare function loadFromSDL(config: LoadFromSDLConfig): SchemaLoader;

interface LoadFromURLConfig {
  url: URL | string;
  headers?: HeadersInit;
  interval?: number;
}
declare function loadFromURL(config: LoadFromURLConfig): SchemaLoader;

interface LoadConfig {
  origin: SchemaOrigin;
  rootPath?: string;
  fetchInterval?: number;
  assumeValid?: boolean;
}
declare function load(config: LoadConfig): SchemaLoader;

declare function preprocessIntrospection({ __schema: schema }: IntrospectionQuery): string;

declare function minifyIntrospection(introspection: IntrospectionQuery): IntrospectionQuery;
interface OutputIntrospectionFileOptions {
  fileType: '.ts' | '.d.ts' | string;
  shouldPreprocess?: boolean;
}
declare function outputIntrospectionFile(
  introspection: IntrospectionQuery | string,
  opts: OutputIntrospectionFileOptions
): string;

declare const resolveTypeScriptRootDir: (tsconfigPath: string) => Promise<string | undefined>;

export {
  type LoadConfig,
  type OnSchemaUpdate,
  type SchemaLoader,
  type SchemaLoaderResult,
  type SchemaOrigin,
  type VirtualCompilerHost,
  createProgram,
  createVirtualHost,
  importLib,
  importModule,
  load,
  loadFromSDL,
  loadFromURL,
  minifyIntrospection,
  outputIntrospectionFile,
  preprocessIntrospection,
  resolveModuleFile,
  resolveTypeScriptRootDir,
};
