import { C as e, o as t, g as n, f as r, b as i, a, t as o, c as s, d as u, p as c, r as l, i as d, A as f, e as v, h as p } from "./chunks/api-chunk.mjs";

import g from "node:fs/promises";

import m from "path";

import { resolveTypeScriptRootDir as E, load as h, minifyIntrospection as T, outputIntrospectionFile as y } from "@gql.tada/internal";

import { SchemaMetaFieldDef as I, TypeMetaFieldDef as b, TypeNameMetaFieldDef as S, isCompositeType as _, Kind as D, isScalarType as N, isObjectType as A, isInterfaceType as k, isUnionType as F, isEnumType as C, isInputObjectType as L, getNamedType as x, isOutputType as O, isInputType as M, GraphQLEnumType as w, GraphQLBoolean as P, isAbstractType as R, assertAbstractType as U, doTypesOverlap as j, DirectiveLocation as V, visit as Y, parse as $, BREAK as G, isListType as B, isNonNullType as Q, GraphQLInterfaceType as X, GraphQLObjectType as W, GraphQLInputObjectType as J, getNullableType as z, GraphQLList as K, GraphQLNonNull as H } from "graphql";

var statFile = (e, t) => g.stat(e).then(t).catch((() => !1));

var swapWrite = async (e, t) => {
  if (!await statFile(e, (e => e.isFile()))) {
    await g.writeFile(e, t);
  } else {
    var n = e + ".tmp";
    await g.writeFile(n, t);
    try {
      await g.rename(n, e);
    } catch (e) {
      await g.unlink(n);
      throw e;
    } finally {
      await (async e => {
        try {
          var t = new Date;
          await g.utimes(e, t, t);
        } catch (e) {}
      })(e);
    }
  }
};

async function saveTadaIntrospection(e, t, n, r) {
  var i = T(e);
  var a = y(i, {
    fileType: t,
    shouldPreprocess: !n
  });
  var o = t;
  if (await statFile(o, (e => e.isDirectory()))) {
    o = m.join(o, "introspection.d.ts");
  } else if (!await statFile(m.dirname(o), (e => e.isDirectory()))) {
    r(`Output file is not inside a directory @ ${o}`);
    return;
  }
  try {
    await swapWrite(o, a);
    r(`Introspection saved to path @ ${o}`);
  } catch (e) {
    r(`Failed to write introspection @ ${e}`);
  }
}

function getDefinitionState(e) {
  var t;
  forEachState(e, (e => {
    switch (e.kind) {
     case "Query":
     case "ShortQuery":
     case "Mutation":
     case "Subscription":
     case "FragmentDefinition":
      t = e;
    }
  }));
  return t;
}

function getFieldDef(e, t, n) {
  if (n === I.name && e.getQueryType() === t) {
    return I;
  }
  if (n === b.name && e.getQueryType() === t) {
    return b;
  }
  if (n === S.name && _(t)) {
    return S;
  }
  if ("getFields" in t) {
    return t.getFields()[n];
  }
  return null;
}

function forEachState(e, t) {
  var n = [];
  var r = e;
  while (null == r ? void 0 : r.kind) {
    n.push(r);
    r = r.prevState;
  }
  for (var i = n.length - 1; i >= 0; i--) {
    t(n[i]);
  }
}

function objectValues(e) {
  var t = Object.keys(e);
  var n = t.length;
  var r = new Array(n);
  for (var i = 0; i < n; ++i) {
    r[i] = e[t[i]];
  }
  return r;
}

function hintList$1(e, t) {
  return function filterAndSortList$1(e, t) {
    if (!t) {
      return filterNonEmpty$1(e, (e => !e.isDeprecated));
    }
    var n = e.map((e => ({
      proximity: getProximity$1(normalizeText$1(e.label), t),
      entry: e
    })));
    return filterNonEmpty$1(filterNonEmpty$1(n, (e => e.proximity <= 2)), (e => !e.entry.isDeprecated)).sort(((e, t) => (e.entry.isDeprecated ? 1 : 0) - (t.entry.isDeprecated ? 1 : 0) || e.proximity - t.proximity || e.entry.label.length - t.entry.label.length)).map((e => e.entry));
  }(t, normalizeText$1(e.string));
}

function filterNonEmpty$1(e, t) {
  var n = e.filter(t);
  return 0 === n.length ? e : n;
}

function normalizeText$1(e) {
  return e.toLowerCase().replaceAll(/\W/g, "");
}

function getProximity$1(e, t) {
  var n = function lexicalDistance$1(e, t) {
    var n;
    var r;
    var i = [];
    var a = e.length;
    var o = t.length;
    for (n = 0; n <= a; n++) {
      i[n] = [ n ];
    }
    for (r = 1; r <= o; r++) {
      i[0][r] = r;
    }
    for (n = 1; n <= a; n++) {
      for (r = 1; r <= o; r++) {
        var s = e[n - 1] === t[r - 1] ? 0 : 1;
        i[n][r] = Math.min(i[n - 1][r] + 1, i[n][r - 1] + 1, i[n - 1][r - 1] + s);
        if (n > 1 && r > 1 && e[n - 1] === t[r - 2] && e[n - 2] === t[r - 1]) {
          i[n][r] = Math.min(i[n][r], i[n - 2][r - 2] + s);
        }
      }
    }
    return i[a][o];
  }(t, e);
  if (e.length > t.length) {
    n -= e.length - t.length - 1;
    n += 0 === e.indexOf(t) ? 0 : .5;
  }
  return n;
}

var q;

!function(e) {
  e.is = function is(e) {
    return "string" == typeof e;
  };
}(q || (q = {}));

var Z;

!function(e) {
  e.is = function is(e) {
    return "string" == typeof e;
  };
}(Z || (Z = {}));

var ee;

!function(e) {
  e.MIN_VALUE = -2147483648;
  e.MAX_VALUE = 2147483647;
  e.is = function is(t) {
    return "number" == typeof t && e.MIN_VALUE <= t && t <= e.MAX_VALUE;
  };
}(ee || (ee = {}));

var te;

!function(e) {
  e.MIN_VALUE = 0;
  e.MAX_VALUE = 2147483647;
  e.is = function is(t) {
    return "number" == typeof t && e.MIN_VALUE <= t && t <= e.MAX_VALUE;
  };
}(te || (te = {}));

var ne;

!function(e) {
  e.create = function create(e, t) {
    if (e === Number.MAX_VALUE) {
      e = te.MAX_VALUE;
    }
    if (t === Number.MAX_VALUE) {
      t = te.MAX_VALUE;
    }
    return {
      line: e,
      character: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.uinteger(t.line) && yt.uinteger(t.character);
  };
}(ne || (ne = {}));

var re;

!function(e) {
  e.create = function create(e, t, n, r) {
    if (yt.uinteger(e) && yt.uinteger(t) && yt.uinteger(n) && yt.uinteger(r)) {
      return {
        start: ne.create(e, t),
        end: ne.create(n, r)
      };
    } else if (ne.is(e) && ne.is(t)) {
      return {
        start: e,
        end: t
      };
    } else {
      throw new Error("Range#create called with invalid arguments[".concat(e, ", ").concat(t, ", ").concat(n, ", ").concat(r, "]"));
    }
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && ne.is(t.start) && ne.is(t.end);
  };
}(re || (re = {}));

var ie;

!function(e) {
  e.create = function create(e, t) {
    return {
      uri: e,
      range: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && re.is(t.range) && (yt.string(t.uri) || yt.undefined(t.uri));
  };
}(ie || (ie = {}));

var ae;

!function(e) {
  e.create = function create(e, t, n, r) {
    return {
      targetUri: e,
      targetRange: t,
      targetSelectionRange: n,
      originSelectionRange: r
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && re.is(t.targetRange) && yt.string(t.targetUri) && re.is(t.targetSelectionRange) && (re.is(t.originSelectionRange) || yt.undefined(t.originSelectionRange));
  };
}(ae || (ae = {}));

var oe;

!function(e) {
  e.create = function create(e, t, n, r) {
    return {
      red: e,
      green: t,
      blue: n,
      alpha: r
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.numberRange(t.red, 0, 1) && yt.numberRange(t.green, 0, 1) && yt.numberRange(t.blue, 0, 1) && yt.numberRange(t.alpha, 0, 1);
  };
}(oe || (oe = {}));

var se;

!function(e) {
  e.create = function create(e, t) {
    return {
      range: e,
      color: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && re.is(t.range) && oe.is(t.color);
  };
}(se || (se = {}));

var ue;

!function(e) {
  e.create = function create(e, t, n) {
    return {
      label: e,
      textEdit: t,
      additionalTextEdits: n
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.string(t.label) && (yt.undefined(t.textEdit) || Ee.is(t)) && (yt.undefined(t.additionalTextEdits) || yt.typedArray(t.additionalTextEdits, Ee.is));
  };
}(ue || (ue = {}));

var ce;

!function(e) {
  e.Comment = "comment";
  e.Imports = "imports";
  e.Region = "region";
}(ce || (ce = {}));

var le;

!function(e) {
  e.create = function create(e, t, n, r, i, a) {
    var o = {
      startLine: e,
      endLine: t
    };
    if (yt.defined(n)) {
      o.startCharacter = n;
    }
    if (yt.defined(r)) {
      o.endCharacter = r;
    }
    if (yt.defined(i)) {
      o.kind = i;
    }
    if (yt.defined(a)) {
      o.collapsedText = a;
    }
    return o;
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.uinteger(t.startLine) && yt.uinteger(t.startLine) && (yt.undefined(t.startCharacter) || yt.uinteger(t.startCharacter)) && (yt.undefined(t.endCharacter) || yt.uinteger(t.endCharacter)) && (yt.undefined(t.kind) || yt.string(t.kind));
  };
}(le || (le = {}));

var de;

!function(e) {
  e.create = function create(e, t) {
    return {
      location: e,
      message: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && ie.is(t.location) && yt.string(t.message);
  };
}(de || (de = {}));

var fe;

!function(e) {
  e.Error = 1;
  e.Warning = 2;
  e.Information = 3;
  e.Hint = 4;
}(fe || (fe = {}));

var ve;

!function(e) {
  e.Unnecessary = 1;
  e.Deprecated = 2;
}(ve || (ve = {}));

var pe;

!function(e) {
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.string(t.href);
  };
}(pe || (pe = {}));

var ge;

!function(e) {
  e.create = function create(e, t, n, r, i, a) {
    var o = {
      range: e,
      message: t
    };
    if (yt.defined(n)) {
      o.severity = n;
    }
    if (yt.defined(r)) {
      o.code = r;
    }
    if (yt.defined(i)) {
      o.source = i;
    }
    if (yt.defined(a)) {
      o.relatedInformation = a;
    }
    return o;
  };
  e.is = function is(e) {
    var t;
    var n = e;
    return yt.defined(n) && re.is(n.range) && yt.string(n.message) && (yt.number(n.severity) || yt.undefined(n.severity)) && (yt.integer(n.code) || yt.string(n.code) || yt.undefined(n.code)) && (yt.undefined(n.codeDescription) || yt.string(null === (t = n.codeDescription) || void 0 === t ? void 0 : t.href)) && (yt.string(n.source) || yt.undefined(n.source)) && (yt.undefined(n.relatedInformation) || yt.typedArray(n.relatedInformation, de.is));
  };
}(ge || (ge = {}));

var me;

!function(e) {
  e.create = function create(e, t) {
    var n = [];
    for (var r = 2; r < arguments.length; r++) {
      n[r - 2] = arguments[r];
    }
    var i = {
      title: e,
      command: t
    };
    if (yt.defined(n) && n.length > 0) {
      i.arguments = n;
    }
    return i;
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.string(t.title) && yt.string(t.command);
  };
}(me || (me = {}));

var Ee;

!function(e) {
  e.replace = function replace(e, t) {
    return {
      range: e,
      newText: t
    };
  };
  e.insert = function insert(e, t) {
    return {
      range: {
        start: e,
        end: e
      },
      newText: t
    };
  };
  e.del = function del(e) {
    return {
      range: e,
      newText: ""
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.string(t.newText) && re.is(t.range);
  };
}(Ee || (Ee = {}));

var he;

!function(e) {
  e.create = function create(e, t, n) {
    var r = {
      label: e
    };
    if (void 0 !== t) {
      r.needsConfirmation = t;
    }
    if (void 0 !== n) {
      r.description = n;
    }
    return r;
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && yt.string(t.label) && (yt.boolean(t.needsConfirmation) || void 0 === t.needsConfirmation) && (yt.string(t.description) || void 0 === t.description);
  };
}(he || (he = {}));

var Te;

!function(e) {
  e.is = function is(e) {
    return yt.string(e);
  };
}(Te || (Te = {}));

var ye;

!function(e) {
  e.replace = function replace(e, t, n) {
    return {
      range: e,
      newText: t,
      annotationId: n
    };
  };
  e.insert = function insert(e, t, n) {
    return {
      range: {
        start: e,
        end: e
      },
      newText: t,
      annotationId: n
    };
  };
  e.del = function del(e, t) {
    return {
      range: e,
      newText: "",
      annotationId: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return Ee.is(t) && (he.is(t.annotationId) || Te.is(t.annotationId));
  };
}(ye || (ye = {}));

var Ie;

!function(e) {
  e.create = function create(e, t) {
    return {
      textDocument: e,
      edits: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && Ce.is(t.textDocument) && Array.isArray(t.edits);
  };
}(Ie || (Ie = {}));

var be;

!function(e) {
  e.create = function create(e, t, n) {
    var r = {
      kind: "create",
      uri: e
    };
    if (void 0 !== t && (void 0 !== t.overwrite || void 0 !== t.ignoreIfExists)) {
      r.options = t;
    }
    if (void 0 !== n) {
      r.annotationId = n;
    }
    return r;
  };
  e.is = function is(e) {
    var t = e;
    return t && "create" === t.kind && yt.string(t.uri) && (void 0 === t.options || (void 0 === t.options.overwrite || yt.boolean(t.options.overwrite)) && (void 0 === t.options.ignoreIfExists || yt.boolean(t.options.ignoreIfExists))) && (void 0 === t.annotationId || Te.is(t.annotationId));
  };
}(be || (be = {}));

var Se;

!function(e) {
  e.create = function create(e, t, n, r) {
    var i = {
      kind: "rename",
      oldUri: e,
      newUri: t
    };
    if (void 0 !== n && (void 0 !== n.overwrite || void 0 !== n.ignoreIfExists)) {
      i.options = n;
    }
    if (void 0 !== r) {
      i.annotationId = r;
    }
    return i;
  };
  e.is = function is(e) {
    var t = e;
    return t && "rename" === t.kind && yt.string(t.oldUri) && yt.string(t.newUri) && (void 0 === t.options || (void 0 === t.options.overwrite || yt.boolean(t.options.overwrite)) && (void 0 === t.options.ignoreIfExists || yt.boolean(t.options.ignoreIfExists))) && (void 0 === t.annotationId || Te.is(t.annotationId));
  };
}(Se || (Se = {}));

var _e;

!function(e) {
  e.create = function create(e, t, n) {
    var r = {
      kind: "delete",
      uri: e
    };
    if (void 0 !== t && (void 0 !== t.recursive || void 0 !== t.ignoreIfNotExists)) {
      r.options = t;
    }
    if (void 0 !== n) {
      r.annotationId = n;
    }
    return r;
  };
  e.is = function is(e) {
    var t = e;
    return t && "delete" === t.kind && yt.string(t.uri) && (void 0 === t.options || (void 0 === t.options.recursive || yt.boolean(t.options.recursive)) && (void 0 === t.options.ignoreIfNotExists || yt.boolean(t.options.ignoreIfNotExists))) && (void 0 === t.annotationId || Te.is(t.annotationId));
  };
}(_e || (_e = {}));

var De;

!function(e) {
  e.is = function is(e) {
    return e && (void 0 !== e.changes || void 0 !== e.documentChanges) && (void 0 === e.documentChanges || e.documentChanges.every((function(e) {
      if (yt.string(e.kind)) {
        return be.is(e) || Se.is(e) || _e.is(e);
      } else {
        return Ie.is(e);
      }
    })));
  };
}(De || (De = {}));

var Ne = function() {
  function TextEditChangeImpl(e, t) {
    this.edits = e;
    this.changeAnnotations = t;
  }
  TextEditChangeImpl.prototype.insert = function(e, t, n) {
    var r;
    var i;
    if (void 0 === n) {
      r = Ee.insert(e, t);
    } else if (Te.is(n)) {
      i = n;
      r = ye.insert(e, t, n);
    } else {
      this.assertChangeAnnotations(this.changeAnnotations);
      i = this.changeAnnotations.manage(n);
      r = ye.insert(e, t, i);
    }
    this.edits.push(r);
    if (void 0 !== i) {
      return i;
    }
  };
  TextEditChangeImpl.prototype.replace = function(e, t, n) {
    var r;
    var i;
    if (void 0 === n) {
      r = Ee.replace(e, t);
    } else if (Te.is(n)) {
      i = n;
      r = ye.replace(e, t, n);
    } else {
      this.assertChangeAnnotations(this.changeAnnotations);
      i = this.changeAnnotations.manage(n);
      r = ye.replace(e, t, i);
    }
    this.edits.push(r);
    if (void 0 !== i) {
      return i;
    }
  };
  TextEditChangeImpl.prototype.delete = function(e, t) {
    var n;
    var r;
    if (void 0 === t) {
      n = Ee.del(e);
    } else if (Te.is(t)) {
      r = t;
      n = ye.del(e, t);
    } else {
      this.assertChangeAnnotations(this.changeAnnotations);
      r = this.changeAnnotations.manage(t);
      n = ye.del(e, r);
    }
    this.edits.push(n);
    if (void 0 !== r) {
      return r;
    }
  };
  TextEditChangeImpl.prototype.add = function(e) {
    this.edits.push(e);
  };
  TextEditChangeImpl.prototype.all = function() {
    return this.edits;
  };
  TextEditChangeImpl.prototype.clear = function() {
    this.edits.splice(0, this.edits.length);
  };
  TextEditChangeImpl.prototype.assertChangeAnnotations = function(e) {
    if (void 0 === e) {
      throw new Error("Text edit change is not configured to manage change annotations.");
    }
  };
  return TextEditChangeImpl;
}();

var Ae = function() {
  function ChangeAnnotations(e) {
    this._annotations = void 0 === e ? Object.create(null) : e;
    this._counter = 0;
    this._size = 0;
  }
  ChangeAnnotations.prototype.all = function() {
    return this._annotations;
  };
  Object.defineProperty(ChangeAnnotations.prototype, "size", {
    get: function() {
      return this._size;
    },
    enumerable: !1,
    configurable: !0
  });
  ChangeAnnotations.prototype.manage = function(e, t) {
    var n;
    if (Te.is(e)) {
      n = e;
    } else {
      n = this.nextId();
      t = e;
    }
    if (void 0 !== this._annotations[n]) {
      throw new Error("Id ".concat(n, " is already in use."));
    }
    if (void 0 === t) {
      throw new Error("No annotation provided for id ".concat(n));
    }
    this._annotations[n] = t;
    this._size++;
    return n;
  };
  ChangeAnnotations.prototype.nextId = function() {
    this._counter++;
    return this._counter.toString();
  };
  return ChangeAnnotations;
}();

!function() {
  function WorkspaceChange(e) {
    var t = this;
    this._textEditChanges = Object.create(null);
    if (void 0 !== e) {
      this._workspaceEdit = e;
      if (e.documentChanges) {
        this._changeAnnotations = new Ae(e.changeAnnotations);
        e.changeAnnotations = this._changeAnnotations.all();
        e.documentChanges.forEach((function(e) {
          if (Ie.is(e)) {
            var n = new Ne(e.edits, t._changeAnnotations);
            t._textEditChanges[e.textDocument.uri] = n;
          }
        }));
      } else if (e.changes) {
        Object.keys(e.changes).forEach((function(n) {
          var r = new Ne(e.changes[n]);
          t._textEditChanges[n] = r;
        }));
      }
    } else {
      this._workspaceEdit = {};
    }
  }
  Object.defineProperty(WorkspaceChange.prototype, "edit", {
    get: function() {
      this.initDocumentChanges();
      if (void 0 !== this._changeAnnotations) {
        if (0 === this._changeAnnotations.size) {
          this._workspaceEdit.changeAnnotations = void 0;
        } else {
          this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
      }
      return this._workspaceEdit;
    },
    enumerable: !1,
    configurable: !0
  });
  WorkspaceChange.prototype.getTextEditChange = function(e) {
    if (Ce.is(e)) {
      this.initDocumentChanges();
      if (void 0 === this._workspaceEdit.documentChanges) {
        throw new Error("Workspace edit is not configured for document changes.");
      }
      var t = {
        uri: e.uri,
        version: e.version
      };
      if (!(n = this._textEditChanges[t.uri])) {
        this._workspaceEdit.documentChanges.push({
          textDocument: t,
          edits: r = []
        });
        n = new Ne(r, this._changeAnnotations);
        this._textEditChanges[t.uri] = n;
      }
      return n;
    } else {
      this.initChanges();
      if (void 0 === this._workspaceEdit.changes) {
        throw new Error("Workspace edit is not configured for normal text edit changes.");
      }
      var n;
      if (!(n = this._textEditChanges[e])) {
        var r;
        this._workspaceEdit.changes[e] = r = [];
        n = new Ne(r);
        this._textEditChanges[e] = n;
      }
      return n;
    }
  };
  WorkspaceChange.prototype.initDocumentChanges = function() {
    if (void 0 === this._workspaceEdit.documentChanges && void 0 === this._workspaceEdit.changes) {
      this._changeAnnotations = new Ae;
      this._workspaceEdit.documentChanges = [];
      this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
    }
  };
  WorkspaceChange.prototype.initChanges = function() {
    if (void 0 === this._workspaceEdit.documentChanges && void 0 === this._workspaceEdit.changes) {
      this._workspaceEdit.changes = Object.create(null);
    }
  };
  WorkspaceChange.prototype.createFile = function(e, t, n) {
    this.initDocumentChanges();
    if (void 0 === this._workspaceEdit.documentChanges) {
      throw new Error("Workspace edit is not configured for document changes.");
    }
    var r;
    if (he.is(t) || Te.is(t)) {
      r = t;
    } else {
      n = t;
    }
    var i;
    var a;
    if (void 0 === r) {
      i = be.create(e, n);
    } else {
      a = Te.is(r) ? r : this._changeAnnotations.manage(r);
      i = be.create(e, n, a);
    }
    this._workspaceEdit.documentChanges.push(i);
    if (void 0 !== a) {
      return a;
    }
  };
  WorkspaceChange.prototype.renameFile = function(e, t, n, r) {
    this.initDocumentChanges();
    if (void 0 === this._workspaceEdit.documentChanges) {
      throw new Error("Workspace edit is not configured for document changes.");
    }
    var i;
    if (he.is(n) || Te.is(n)) {
      i = n;
    } else {
      r = n;
    }
    var a;
    var o;
    if (void 0 === i) {
      a = Se.create(e, t, r);
    } else {
      o = Te.is(i) ? i : this._changeAnnotations.manage(i);
      a = Se.create(e, t, r, o);
    }
    this._workspaceEdit.documentChanges.push(a);
    if (void 0 !== o) {
      return o;
    }
  };
  WorkspaceChange.prototype.deleteFile = function(e, t, n) {
    this.initDocumentChanges();
    if (void 0 === this._workspaceEdit.documentChanges) {
      throw new Error("Workspace edit is not configured for document changes.");
    }
    var r;
    if (he.is(t) || Te.is(t)) {
      r = t;
    } else {
      n = t;
    }
    var i;
    var a;
    if (void 0 === r) {
      i = _e.create(e, n);
    } else {
      a = Te.is(r) ? r : this._changeAnnotations.manage(r);
      i = _e.create(e, n, a);
    }
    this._workspaceEdit.documentChanges.push(i);
    if (void 0 !== a) {
      return a;
    }
  };
}();

var ke;

!function(e) {
  e.create = function create(e) {
    return {
      uri: e
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.string(t.uri);
  };
}(ke || (ke = {}));

var Fe;

!function(e) {
  e.create = function create(e, t) {
    return {
      uri: e,
      version: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.string(t.uri) && yt.integer(t.version);
  };
}(Fe || (Fe = {}));

var Ce;

!function(e) {
  e.create = function create(e, t) {
    return {
      uri: e,
      version: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.string(t.uri) && (null === t.version || yt.integer(t.version));
  };
}(Ce || (Ce = {}));

var Le;

!function(e) {
  e.create = function create(e, t, n, r) {
    return {
      uri: e,
      languageId: t,
      version: n,
      text: r
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.string(t.uri) && yt.string(t.languageId) && yt.integer(t.version) && yt.string(t.text);
  };
}(Le || (Le = {}));

var xe;

!function(e) {
  e.PlainText = "plaintext";
  e.Markdown = "markdown";
  e.is = function is(t) {
    return t === e.PlainText || t === e.Markdown;
  };
}(xe || (xe = {}));

var Oe;

!function(e) {
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(e) && xe.is(t.kind) && yt.string(t.value);
  };
}(Oe || (Oe = {}));

var Me;

!function(e) {
  e.Text = 1;
  e.Method = 2;
  e.Function = 3;
  e.Constructor = 4;
  e.Field = 5;
  e.Variable = 6;
  e.Class = 7;
  e.Interface = 8;
  e.Module = 9;
  e.Property = 10;
  e.Unit = 11;
  e.Value = 12;
  e.Enum = 13;
  e.Keyword = 14;
  e.Snippet = 15;
  e.Color = 16;
  e.File = 17;
  e.Reference = 18;
  e.Folder = 19;
  e.EnumMember = 20;
  e.Constant = 21;
  e.Struct = 22;
  e.Event = 23;
  e.Operator = 24;
  e.TypeParameter = 25;
}(Me || (Me = {}));

var we;

!function(e) {
  e.PlainText = 1;
  e.Snippet = 2;
}(we || (we = {}));

var Pe;

!function(e) {
  e.Deprecated = 1;
}(Pe || (Pe = {}));

var Re;

!function(e) {
  e.create = function create(e, t, n) {
    return {
      newText: e,
      insert: t,
      replace: n
    };
  };
  e.is = function is(e) {
    var t = e;
    return t && yt.string(t.newText) && re.is(t.insert) && re.is(t.replace);
  };
}(Re || (Re = {}));

var Ue;

!function(e) {
  e.asIs = 1;
  e.adjustIndentation = 2;
}(Ue || (Ue = {}));

var je;

!function(e) {
  e.is = function is(e) {
    var t = e;
    return t && (yt.string(t.detail) || void 0 === t.detail) && (yt.string(t.description) || void 0 === t.description);
  };
}(je || (je = {}));

var Ve;

!function(e) {
  e.create = function create(e) {
    return {
      label: e
    };
  };
}(Ve || (Ve = {}));

var Ye;

!function(e) {
  e.create = function create(e, t) {
    return {
      items: e ? e : [],
      isIncomplete: !!t
    };
  };
}(Ye || (Ye = {}));

var $e;

!function(e) {
  e.fromPlainText = function fromPlainText(e) {
    return e.replace(/[\\`*_{}[\]()#+\-.!]/g, "\\$&");
  };
  e.is = function is(e) {
    var t = e;
    return yt.string(t) || yt.objectLiteral(t) && yt.string(t.language) && yt.string(t.value);
  };
}($e || ($e = {}));

var Ge;

!function(e) {
  e.is = function is(e) {
    var t = e;
    return !!t && yt.objectLiteral(t) && (Oe.is(t.contents) || $e.is(t.contents) || yt.typedArray(t.contents, $e.is)) && (void 0 === e.range || re.is(e.range));
  };
}(Ge || (Ge = {}));

var Be;

!function(e) {
  e.create = function create(e, t) {
    return t ? {
      label: e,
      documentation: t
    } : {
      label: e
    };
  };
}(Be || (Be = {}));

var Qe;

!function(e) {
  e.create = function create(e, t) {
    var n = [];
    for (var r = 2; r < arguments.length; r++) {
      n[r - 2] = arguments[r];
    }
    var i = {
      label: e
    };
    if (yt.defined(t)) {
      i.documentation = t;
    }
    if (yt.defined(n)) {
      i.parameters = n;
    } else {
      i.parameters = [];
    }
    return i;
  };
}(Qe || (Qe = {}));

var Xe;

!function(e) {
  e.Text = 1;
  e.Read = 2;
  e.Write = 3;
}(Xe || (Xe = {}));

var We;

!function(e) {
  e.create = function create(e, t) {
    var n = {
      range: e
    };
    if (yt.number(t)) {
      n.kind = t;
    }
    return n;
  };
}(We || (We = {}));

var Je;

!function(e) {
  e.File = 1;
  e.Module = 2;
  e.Namespace = 3;
  e.Package = 4;
  e.Class = 5;
  e.Method = 6;
  e.Property = 7;
  e.Field = 8;
  e.Constructor = 9;
  e.Enum = 10;
  e.Interface = 11;
  e.Function = 12;
  e.Variable = 13;
  e.Constant = 14;
  e.String = 15;
  e.Number = 16;
  e.Boolean = 17;
  e.Array = 18;
  e.Object = 19;
  e.Key = 20;
  e.Null = 21;
  e.EnumMember = 22;
  e.Struct = 23;
  e.Event = 24;
  e.Operator = 25;
  e.TypeParameter = 26;
}(Je || (Je = {}));

var ze;

!function(e) {
  e.Deprecated = 1;
}(ze || (ze = {}));

var Ke;

!function(e) {
  e.create = function create(e, t, n, r, i) {
    var a = {
      name: e,
      kind: t,
      location: {
        uri: r,
        range: n
      }
    };
    if (i) {
      a.containerName = i;
    }
    return a;
  };
}(Ke || (Ke = {}));

var He;

!function(e) {
  e.create = function create(e, t, n, r) {
    return void 0 !== r ? {
      name: e,
      kind: t,
      location: {
        uri: n,
        range: r
      }
    } : {
      name: e,
      kind: t,
      location: {
        uri: n
      }
    };
  };
}(He || (He = {}));

var qe;

!function(e) {
  e.create = function create(e, t, n, r, i, a) {
    var o = {
      name: e,
      detail: t,
      kind: n,
      range: r,
      selectionRange: i
    };
    if (void 0 !== a) {
      o.children = a;
    }
    return o;
  };
  e.is = function is(e) {
    var t = e;
    return t && yt.string(t.name) && yt.number(t.kind) && re.is(t.range) && re.is(t.selectionRange) && (void 0 === t.detail || yt.string(t.detail)) && (void 0 === t.deprecated || yt.boolean(t.deprecated)) && (void 0 === t.children || Array.isArray(t.children)) && (void 0 === t.tags || Array.isArray(t.tags));
  };
}(qe || (qe = {}));

var Ze;

!function(e) {
  e.Empty = "";
  e.QuickFix = "quickfix";
  e.Refactor = "refactor";
  e.RefactorExtract = "refactor.extract";
  e.RefactorInline = "refactor.inline";
  e.RefactorRewrite = "refactor.rewrite";
  e.Source = "source";
  e.SourceOrganizeImports = "source.organizeImports";
  e.SourceFixAll = "source.fixAll";
}(Ze || (Ze = {}));

var et;

!function(e) {
  e.Invoked = 1;
  e.Automatic = 2;
}(et || (et = {}));

var tt;

!function(e) {
  e.create = function create(e, t, n) {
    var r = {
      diagnostics: e
    };
    if (null != t) {
      r.only = t;
    }
    if (null != n) {
      r.triggerKind = n;
    }
    return r;
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.typedArray(t.diagnostics, ge.is) && (void 0 === t.only || yt.typedArray(t.only, yt.string)) && (void 0 === t.triggerKind || t.triggerKind === et.Invoked || t.triggerKind === et.Automatic);
  };
}(tt || (tt = {}));

var nt;

!function(e) {
  e.create = function create(e, t, n) {
    var r = {
      title: e
    };
    var i = !0;
    if ("string" == typeof t) {
      i = !1;
      r.kind = t;
    } else if (me.is(t)) {
      r.command = t;
    } else {
      r.edit = t;
    }
    if (i && void 0 !== n) {
      r.kind = n;
    }
    return r;
  };
  e.is = function is(e) {
    var t = e;
    return t && yt.string(t.title) && (void 0 === t.diagnostics || yt.typedArray(t.diagnostics, ge.is)) && (void 0 === t.kind || yt.string(t.kind)) && (void 0 !== t.edit || void 0 !== t.command) && (void 0 === t.command || me.is(t.command)) && (void 0 === t.isPreferred || yt.boolean(t.isPreferred)) && (void 0 === t.edit || De.is(t.edit));
  };
}(nt || (nt = {}));

var rt;

!function(e) {
  e.create = function create(e, t) {
    var n = {
      range: e
    };
    if (yt.defined(t)) {
      n.data = t;
    }
    return n;
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && re.is(t.range) && (yt.undefined(t.command) || me.is(t.command));
  };
}(rt || (rt = {}));

var it;

!function(e) {
  e.create = function create(e, t) {
    return {
      tabSize: e,
      insertSpaces: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.uinteger(t.tabSize) && yt.boolean(t.insertSpaces);
  };
}(it || (it = {}));

var at;

!function(e) {
  e.create = function create(e, t, n) {
    return {
      range: e,
      target: t,
      data: n
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && re.is(t.range) && (yt.undefined(t.target) || yt.string(t.target));
  };
}(at || (at = {}));

var ot;

!function(e) {
  e.create = function create(e, t) {
    return {
      range: e,
      parent: t
    };
  };
  e.is = function is(t) {
    var n = t;
    return yt.objectLiteral(n) && re.is(n.range) && (void 0 === n.parent || e.is(n.parent));
  };
}(ot || (ot = {}));

var st;

!function(e) {
  e.namespace = "namespace";
  e.type = "type";
  e.class = "class";
  e.enum = "enum";
  e.interface = "interface";
  e.struct = "struct";
  e.typeParameter = "typeParameter";
  e.parameter = "parameter";
  e.variable = "variable";
  e.property = "property";
  e.enumMember = "enumMember";
  e.event = "event";
  e.function = "function";
  e.method = "method";
  e.macro = "macro";
  e.keyword = "keyword";
  e.modifier = "modifier";
  e.comment = "comment";
  e.string = "string";
  e.number = "number";
  e.regexp = "regexp";
  e.operator = "operator";
  e.decorator = "decorator";
}(st || (st = {}));

var ut;

!function(e) {
  e.declaration = "declaration";
  e.definition = "definition";
  e.readonly = "readonly";
  e.static = "static";
  e.deprecated = "deprecated";
  e.abstract = "abstract";
  e.async = "async";
  e.modification = "modification";
  e.documentation = "documentation";
  e.defaultLibrary = "defaultLibrary";
}(ut || (ut = {}));

var ct;

!function(e) {
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && (void 0 === t.resultId || "string" == typeof t.resultId) && Array.isArray(t.data) && (0 === t.data.length || "number" == typeof t.data[0]);
  };
}(ct || (ct = {}));

var lt;

!function(e) {
  e.create = function create(e, t) {
    return {
      range: e,
      text: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return null != t && re.is(t.range) && yt.string(t.text);
  };
}(lt || (lt = {}));

var dt;

!function(e) {
  e.create = function create(e, t, n) {
    return {
      range: e,
      variableName: t,
      caseSensitiveLookup: n
    };
  };
  e.is = function is(e) {
    var t = e;
    return null != t && re.is(t.range) && yt.boolean(t.caseSensitiveLookup) && (yt.string(t.variableName) || void 0 === t.variableName);
  };
}(dt || (dt = {}));

var ft;

!function(e) {
  e.create = function create(e, t) {
    return {
      range: e,
      expression: t
    };
  };
  e.is = function is(e) {
    var t = e;
    return null != t && re.is(t.range) && (yt.string(t.expression) || void 0 === t.expression);
  };
}(ft || (ft = {}));

var vt;

!function(e) {
  e.create = function create(e, t) {
    return {
      frameId: e,
      stoppedLocation: t
    };
  };
  e.is = function is(e) {
    return yt.defined(e) && re.is(e.stoppedLocation);
  };
}(vt || (vt = {}));

var pt;

!function(e) {
  e.Type = 1;
  e.Parameter = 2;
  e.is = function is(e) {
    return 1 === e || 2 === e;
  };
}(pt || (pt = {}));

var gt;

!function(e) {
  e.create = function create(e) {
    return {
      value: e
    };
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && (void 0 === t.tooltip || yt.string(t.tooltip) || Oe.is(t.tooltip)) && (void 0 === t.location || ie.is(t.location)) && (void 0 === t.command || me.is(t.command));
  };
}(gt || (gt = {}));

var mt;

!function(e) {
  e.create = function create(e, t, n) {
    var r = {
      position: e,
      label: t
    };
    if (void 0 !== n) {
      r.kind = n;
    }
    return r;
  };
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && ne.is(t.position) && (yt.string(t.label) || yt.typedArray(t.label, gt.is)) && (void 0 === t.kind || pt.is(t.kind)) && void 0 === t.textEdits || yt.typedArray(t.textEdits, Ee.is) && (void 0 === t.tooltip || yt.string(t.tooltip) || Oe.is(t.tooltip)) && (void 0 === t.paddingLeft || yt.boolean(t.paddingLeft)) && (void 0 === t.paddingRight || yt.boolean(t.paddingRight));
  };
}(mt || (mt = {}));

var Et;

!function(e) {
  e.is = function is(e) {
    var t = e;
    return yt.objectLiteral(t) && Z.is(t.uri) && yt.string(t.name);
  };
}(Et || (Et = {}));

var ht;

!function(e) {
  e.create = function create(e, t, n, r) {
    return new Tt(e, t, n, r);
  };
  e.is = function is(e) {
    var t = e;
    return yt.defined(t) && yt.string(t.uri) && (yt.undefined(t.languageId) || yt.string(t.languageId)) && yt.uinteger(t.lineCount) && yt.func(t.getText) && yt.func(t.positionAt) && yt.func(t.offsetAt) ? !0 : !1;
  };
  e.applyEdits = function applyEdits(e, t) {
    var n = e.getText();
    var r = mergeSort(t, (function(e, t) {
      var n = e.range.start.line - t.range.start.line;
      if (0 === n) {
        return e.range.start.character - t.range.start.character;
      }
      return n;
    }));
    var i = n.length;
    for (var a = r.length - 1; a >= 0; a--) {
      var o = r[a];
      var s = e.offsetAt(o.range.start);
      var u = e.offsetAt(o.range.end);
      if (u <= i) {
        n = n.substring(0, s) + o.newText + n.substring(u, n.length);
      } else {
        throw new Error("Overlapping edit");
      }
      i = s;
    }
    return n;
  };
  function mergeSort(e, t) {
    if (e.length <= 1) {
      return e;
    }
    var n = e.length / 2 | 0;
    var r = e.slice(0, n);
    var i = e.slice(n);
    mergeSort(r, t);
    mergeSort(i, t);
    var a = 0;
    var o = 0;
    var s = 0;
    while (a < r.length && o < i.length) {
      if (t(r[a], i[o]) <= 0) {
        e[s++] = r[a++];
      } else {
        e[s++] = i[o++];
      }
    }
    while (a < r.length) {
      e[s++] = r[a++];
    }
    while (o < i.length) {
      e[s++] = i[o++];
    }
    return e;
  }
}(ht || (ht = {}));

var Tt = function() {
  function FullTextDocument(e, t, n, r) {
    this._uri = e;
    this._languageId = t;
    this._version = n;
    this._content = r;
    this._lineOffsets = void 0;
  }
  Object.defineProperty(FullTextDocument.prototype, "uri", {
    get: function() {
      return this._uri;
    },
    enumerable: !1,
    configurable: !0
  });
  Object.defineProperty(FullTextDocument.prototype, "languageId", {
    get: function() {
      return this._languageId;
    },
    enumerable: !1,
    configurable: !0
  });
  Object.defineProperty(FullTextDocument.prototype, "version", {
    get: function() {
      return this._version;
    },
    enumerable: !1,
    configurable: !0
  });
  FullTextDocument.prototype.getText = function(e) {
    if (e) {
      var t = this.offsetAt(e.start);
      var n = this.offsetAt(e.end);
      return this._content.substring(t, n);
    }
    return this._content;
  };
  FullTextDocument.prototype.update = function(e, t) {
    this._content = e.text;
    this._version = t;
    this._lineOffsets = void 0;
  };
  FullTextDocument.prototype.getLineOffsets = function() {
    if (void 0 === this._lineOffsets) {
      var e = [];
      var t = this._content;
      var n = !0;
      for (var r = 0; r < t.length; r++) {
        if (n) {
          e.push(r);
          n = !1;
        }
        var i = t.charAt(r);
        n = "\r" === i || "\n" === i;
        if ("\r" === i && r + 1 < t.length && "\n" === t.charAt(r + 1)) {
          r++;
        }
      }
      if (n && t.length > 0) {
        e.push(t.length);
      }
      this._lineOffsets = e;
    }
    return this._lineOffsets;
  };
  FullTextDocument.prototype.positionAt = function(e) {
    e = Math.max(Math.min(e, this._content.length), 0);
    var t = this.getLineOffsets();
    var n = 0, r = t.length;
    if (0 === r) {
      return ne.create(0, e);
    }
    while (n < r) {
      var i = Math.floor((n + r) / 2);
      if (t[i] > e) {
        r = i;
      } else {
        n = i + 1;
      }
    }
    var a = n - 1;
    return ne.create(a, e - t[a]);
  };
  FullTextDocument.prototype.offsetAt = function(e) {
    var t = this.getLineOffsets();
    if (e.line >= t.length) {
      return this._content.length;
    } else if (e.line < 0) {
      return 0;
    }
    var n = t[e.line];
    return Math.max(Math.min(n + e.character, e.line + 1 < t.length ? t[e.line + 1] : this._content.length), n);
  };
  Object.defineProperty(FullTextDocument.prototype, "lineCount", {
    get: function() {
      return this.getLineOffsets().length;
    },
    enumerable: !1,
    configurable: !0
  });
  return FullTextDocument;
}();

var yt;

!function(e) {
  var t = Object.prototype.toString;
  e.defined = function defined(e) {
    return void 0 !== e;
  };
  e.undefined = function undefined$1(e) {
    return void 0 === e;
  };
  e.boolean = function boolean(e) {
    return !0 === e || !1 === e;
  };
  e.string = function string(e) {
    return "[object String]" === t.call(e);
  };
  e.number = function number(e) {
    return "[object Number]" === t.call(e);
  };
  e.numberRange = function numberRange(e, n, r) {
    return "[object Number]" === t.call(e) && n <= e && e <= r;
  };
  e.integer = function integer(e) {
    return "[object Number]" === t.call(e) && -2147483648 <= e && e <= 2147483647;
  };
  e.uinteger = function uinteger(e) {
    return "[object Number]" === t.call(e) && 0 <= e && e <= 2147483647;
  };
  e.func = function func(e) {
    return "[object Function]" === t.call(e);
  };
  e.objectLiteral = function objectLiteral(e) {
    return null !== e && "object" == typeof e;
  };
  e.typedArray = function typedArray(e, t) {
    return Array.isArray(e) && e.every(t);
  };
}(yt || (yt = {}));

var It;

!function(e) {
  e.Text = 1;
  e.Method = 2;
  e.Function = 3;
  e.Constructor = 4;
  e.Field = 5;
  e.Variable = 6;
  e.Class = 7;
  e.Interface = 8;
  e.Module = 9;
  e.Property = 10;
  e.Unit = 11;
  e.Value = 12;
  e.Enum = 13;
  e.Keyword = 14;
  e.Snippet = 15;
  e.Color = 16;
  e.File = 17;
  e.Reference = 18;
  e.Folder = 19;
  e.EnumMember = 20;
  e.Constant = 21;
  e.Struct = 22;
  e.Event = 23;
  e.Operator = 24;
  e.TypeParameter = 25;
}(It || (It = {}));

var bt = Object.assign(Object.assign({}, D), {
  ALIASED_FIELD: "AliasedField",
  ARGUMENTS: "Arguments",
  SHORT_QUERY: "ShortQuery",
  QUERY: "Query",
  MUTATION: "Mutation",
  SUBSCRIPTION: "Subscription",
  TYPE_CONDITION: "TypeCondition",
  INVALID: "Invalid",
  COMMENT: "Comment",
  SCHEMA_DEF: "SchemaDef",
  SCALAR_DEF: "ScalarDef",
  OBJECT_TYPE_DEF: "ObjectTypeDef",
  OBJECT_VALUE: "ObjectValue",
  LIST_VALUE: "ListValue",
  INTERFACE_DEF: "InterfaceDef",
  UNION_DEF: "UnionDef",
  ENUM_DEF: "EnumDef",
  ENUM_VALUE: "EnumValue",
  FIELD_DEF: "FieldDef",
  INPUT_DEF: "InputDef",
  INPUT_VALUE_DEF: "InputValueDef",
  ARGUMENTS_DEF: "ArgumentsDef",
  EXTEND_DEF: "ExtendDef",
  EXTENSION_DEFINITION: "ExtensionDefinition",
  DIRECTIVE_DEF: "DirectiveDef",
  IMPLEMENTS: "Implements",
  VARIABLE_DEFINITIONS: "VariableDefinitions",
  TYPE: "Type"
});

var St = {
  command: "editor.action.triggerSuggest",
  title: "Suggestions"
};

var collectFragmentDefs = e => {
  var t = [];
  if (e) {
    try {
      Y($(e), {
        FragmentDefinition(e) {
          t.push(e);
        }
      });
    } catch (e) {
      return [];
    }
  }
  return t;
};

var _t = [ D.SCHEMA_DEFINITION, D.OPERATION_TYPE_DEFINITION, D.SCALAR_TYPE_DEFINITION, D.OBJECT_TYPE_DEFINITION, D.INTERFACE_TYPE_DEFINITION, D.UNION_TYPE_DEFINITION, D.ENUM_TYPE_DEFINITION, D.INPUT_OBJECT_TYPE_DEFINITION, D.DIRECTIVE_DEFINITION, D.SCHEMA_EXTENSION, D.SCALAR_TYPE_EXTENSION, D.OBJECT_TYPE_EXTENSION, D.INTERFACE_TYPE_EXTENSION, D.UNION_TYPE_EXTENSION, D.ENUM_TYPE_EXTENSION, D.INPUT_OBJECT_TYPE_EXTENSION ];

var hasTypeSystemDefinitions = e => {
  var t = !1;
  if (e) {
    try {
      Y($(e), {
        enter(e) {
          if ("Document" === e.kind) {
            return;
          }
          if (_t.includes(e.kind)) {
            t = !0;
            return G;
          }
          return !1;
        }
      });
    } catch (e) {
      return t;
    }
  }
  return t;
};

function getAutocompleteSuggestions(e, t, n, r, i, a) {
  var o;
  var s = Object.assign(Object.assign({}, a), {
    schema: e
  });
  var u = r || getTokenAtPosition(t, n, 1);
  var c = "Invalid" === u.state.kind ? u.state.prevState : u.state;
  var l = (null == a ? void 0 : a.mode) || function getDocumentMode(e, t) {
    if (null == t ? void 0 : t.endsWith(".graphqls")) {
      return Nt.TYPE_SYSTEM;
    }
    return hasTypeSystemDefinitions(e) ? Nt.TYPE_SYSTEM : Nt.EXECUTABLE;
  }(t, null == a ? void 0 : a.uri);
  if (!c) {
    return [];
  }
  var {kind: d, step: f, prevState: v} = c;
  var p = getTypeInfo(e, u.state);
  if (d === bt.DOCUMENT) {
    if (l === Nt.TYPE_SYSTEM) {
      return function getSuggestionsForTypeSystemDefinitions(e) {
        return hintList$1(e, [ {
          label: "extend",
          kind: It.Function
        }, {
          label: "type",
          kind: It.Function
        }, {
          label: "interface",
          kind: It.Function
        }, {
          label: "union",
          kind: It.Function
        }, {
          label: "input",
          kind: It.Function
        }, {
          label: "scalar",
          kind: It.Function
        }, {
          label: "schema",
          kind: It.Function
        } ]);
      }(u);
    }
    return function getSuggestionsForExecutableDefinitions(e) {
      return hintList$1(e, [ {
        label: "query",
        kind: It.Function
      }, {
        label: "mutation",
        kind: It.Function
      }, {
        label: "subscription",
        kind: It.Function
      }, {
        label: "fragment",
        kind: It.Function
      }, {
        label: "{",
        kind: It.Constructor
      } ]);
    }(u);
  }
  if (d === bt.EXTEND_DEF) {
    return function getSuggestionsForExtensionDefinitions(e) {
      return hintList$1(e, [ {
        label: "type",
        kind: It.Function
      }, {
        label: "interface",
        kind: It.Function
      }, {
        label: "union",
        kind: It.Function
      }, {
        label: "input",
        kind: It.Function
      }, {
        label: "scalar",
        kind: It.Function
      }, {
        label: "schema",
        kind: It.Function
      } ]);
    }(u);
  }
  if ((null === (o = null == v ? void 0 : v.prevState) || void 0 === o ? void 0 : o.kind) === bt.EXTENSION_DEFINITION && c.name) {
    return hintList$1(u, []);
  }
  if ((null == v ? void 0 : v.kind) === D.SCALAR_TYPE_EXTENSION) {
    return hintList$1(u, Object.values(e.getTypeMap()).filter(N).map((e => ({
      label: e.name,
      kind: It.Function
    }))));
  }
  if ((null == v ? void 0 : v.kind) === D.OBJECT_TYPE_EXTENSION) {
    return hintList$1(u, Object.values(e.getTypeMap()).filter((e => A(e) && !e.name.startsWith("__"))).map((e => ({
      label: e.name,
      kind: It.Function
    }))));
  }
  if ((null == v ? void 0 : v.kind) === D.INTERFACE_TYPE_EXTENSION) {
    return hintList$1(u, Object.values(e.getTypeMap()).filter(k).map((e => ({
      label: e.name,
      kind: It.Function
    }))));
  }
  if ((null == v ? void 0 : v.kind) === D.UNION_TYPE_EXTENSION) {
    return hintList$1(u, Object.values(e.getTypeMap()).filter(F).map((e => ({
      label: e.name,
      kind: It.Function
    }))));
  }
  if ((null == v ? void 0 : v.kind) === D.ENUM_TYPE_EXTENSION) {
    return hintList$1(u, Object.values(e.getTypeMap()).filter((e => C(e) && !e.name.startsWith("__"))).map((e => ({
      label: e.name,
      kind: It.Function
    }))));
  }
  if ((null == v ? void 0 : v.kind) === D.INPUT_OBJECT_TYPE_EXTENSION) {
    return hintList$1(u, Object.values(e.getTypeMap()).filter(L).map((e => ({
      label: e.name,
      kind: It.Function
    }))));
  }
  if (d === bt.IMPLEMENTS || d === bt.NAMED_TYPE && (null == v ? void 0 : v.kind) === bt.IMPLEMENTS) {
    return function getSuggestionsForImplements(e, t, n, r, i) {
      if (t.needsSeparator) {
        return [];
      }
      var a = n.getTypeMap();
      var o = objectValues(a).filter(k);
      var s = o.map((({name: e}) => e));
      var u = new Set;
      runOnlineParser$1(r, ((e, t) => {
        var r, a, o, c, l;
        if (t.name) {
          if (t.kind === bt.INTERFACE_DEF && !s.includes(t.name)) {
            u.add(t.name);
          }
          if (t.kind === bt.NAMED_TYPE && (null === (r = t.prevState) || void 0 === r ? void 0 : r.kind) === bt.IMPLEMENTS) {
            if (i.interfaceDef) {
              if (null === (a = i.interfaceDef) || void 0 === a ? void 0 : a.getInterfaces().find((({name: e}) => e === t.name))) {
                return;
              }
              var d = n.getType(t.name);
              var f = null === (o = i.interfaceDef) || void 0 === o ? void 0 : o.toConfig();
              i.interfaceDef = new X(Object.assign(Object.assign({}, f), {
                interfaces: [ ...f.interfaces, d || new X({
                  name: t.name,
                  fields: {}
                }) ]
              }));
            } else if (i.objectTypeDef) {
              if (null === (c = i.objectTypeDef) || void 0 === c ? void 0 : c.getInterfaces().find((({name: e}) => e === t.name))) {
                return;
              }
              var v = n.getType(t.name);
              var p = null === (l = i.objectTypeDef) || void 0 === l ? void 0 : l.toConfig();
              i.objectTypeDef = new W(Object.assign(Object.assign({}, p), {
                interfaces: [ ...p.interfaces, v || new X({
                  name: t.name,
                  fields: {}
                }) ]
              }));
            }
          }
        }
      }));
      var c = i.interfaceDef || i.objectTypeDef;
      var l = ((null == c ? void 0 : c.getInterfaces()) || []).map((({name: e}) => e));
      var d = o.concat([ ...u ].map((e => ({
        name: e
      })))).filter((({name: e}) => e !== (null == c ? void 0 : c.name) && !l.includes(e)));
      return hintList$1(e, d.map((e => {
        var t = {
          label: e.name,
          kind: It.Interface,
          type: e
        };
        if (null == e ? void 0 : e.description) {
          t.documentation = e.description;
        }
        return t;
      })));
    }(u, c, e, t, p);
  }
  if (d === bt.SELECTION_SET || d === bt.FIELD || d === bt.ALIASED_FIELD) {
    return function getSuggestionsForFieldNames(e, t, n) {
      var r;
      if (t.parentType) {
        var {parentType: i} = t;
        var a = [];
        if ("getFields" in i) {
          a = objectValues(i.getFields());
        }
        if (_(i)) {
          a.push(S);
        }
        if (i === (null === (r = null == n ? void 0 : n.schema) || void 0 === r ? void 0 : r.getQueryType())) {
          a.push(I, b);
        }
        return hintList$1(e, a.map(((e, t) => {
          var r;
          var i = {
            sortText: String(t) + e.name,
            label: e.name,
            detail: String(e.type),
            documentation: null !== (r = e.description) && void 0 !== r ? r : void 0,
            deprecated: Boolean(e.deprecationReason),
            isDeprecated: Boolean(e.deprecationReason),
            deprecationReason: e.deprecationReason,
            kind: It.Field,
            type: e.type
          };
          if (null == n ? void 0 : n.fillLeafsOnComplete) {
            var a = getInsertText(e);
            if (a) {
              i.insertText = e.name + a;
              i.insertTextFormat = we.Snippet;
              i.command = St;
            }
          }
          return i;
        })));
      }
      return [];
    }(u, p, s);
  }
  if (d === bt.ARGUMENTS || d === bt.ARGUMENT && 0 === f) {
    var {argDefs: g} = p;
    if (g) {
      return hintList$1(u, g.map((e => {
        var t;
        return {
          label: e.name,
          insertText: e.name + ": ",
          command: St,
          detail: String(e.type),
          documentation: null !== (t = e.description) && void 0 !== t ? t : void 0,
          kind: It.Variable,
          type: e.type
        };
      })));
    }
  }
  if ((d === bt.OBJECT_VALUE || d === bt.OBJECT_FIELD && 0 === f) && p.objectFieldDefs) {
    var m = objectValues(p.objectFieldDefs);
    var E = d === bt.OBJECT_VALUE ? It.Value : It.Field;
    return hintList$1(u, m.map((e => {
      var t;
      return {
        label: e.name,
        detail: String(e.type),
        documentation: null !== (t = e.description) && void 0 !== t ? t : void 0,
        kind: E,
        type: e.type
      };
    })));
  }
  if (d === bt.ENUM_VALUE || d === bt.LIST_VALUE && 1 === f || d === bt.OBJECT_FIELD && 2 === f || d === bt.ARGUMENT && 2 === f) {
    return function getSuggestionsForInputValues(e, t, n, r) {
      var i = x(t.inputType);
      var a = getVariableCompletions(n, r, e).filter((e => e.detail === i.name));
      if (i instanceof w) {
        return hintList$1(e, i.getValues().map((e => {
          var t;
          return {
            label: e.name,
            detail: String(i),
            documentation: null !== (t = e.description) && void 0 !== t ? t : void 0,
            deprecated: Boolean(e.deprecationReason),
            isDeprecated: Boolean(e.deprecationReason),
            deprecationReason: e.deprecationReason,
            kind: It.EnumMember,
            type: i
          };
        })).concat(a));
      }
      if (i === P) {
        return hintList$1(e, a.concat([ {
          label: "true",
          detail: String(P),
          documentation: "Not false.",
          kind: It.Variable,
          type: P
        }, {
          label: "false",
          detail: String(P),
          documentation: "Not true.",
          kind: It.Variable,
          type: P
        } ]));
      }
      return a;
    }(u, p, t, e);
  }
  if (d === bt.VARIABLE && 1 === f) {
    var h = x(p.inputType);
    return hintList$1(u, getVariableCompletions(t, e, u).filter((e => e.detail === (null == h ? void 0 : h.name))));
  }
  if (d === bt.TYPE_CONDITION && 1 === f || d === bt.NAMED_TYPE && null != v && v.kind === bt.TYPE_CONDITION) {
    return function getSuggestionsForFragmentTypeConditions(e, t, n, r) {
      var i;
      if (t.parentType) {
        if (R(t.parentType)) {
          var a = U(t.parentType);
          var o = n.getPossibleTypes(a);
          var s = Object.create(null);
          for (var u of o) {
            for (var c of u.getInterfaces()) {
              s[c.name] = c;
            }
          }
          i = o.concat(objectValues(s));
        } else {
          i = [ t.parentType ];
        }
      } else {
        i = objectValues(n.getTypeMap()).filter((e => _(e) && !e.name.startsWith("__")));
      }
      return hintList$1(e, i.map((e => {
        var t = x(e);
        return {
          label: String(e),
          documentation: (null == t ? void 0 : t.description) || "",
          kind: It.Field
        };
      })));
    }(u, p, e);
  }
  if (d === bt.FRAGMENT_SPREAD && 1 === f) {
    return function getSuggestionsForFragmentSpread$1(e, t, n, r, i) {
      if (!r) {
        return [];
      }
      var a = n.getTypeMap();
      var o = getDefinitionState(e.state);
      var s = function getFragmentDefinitions(e) {
        var t = [];
        runOnlineParser$1(e, ((e, n) => {
          if (n.kind === bt.FRAGMENT_DEFINITION && n.name && n.type) {
            t.push({
              kind: bt.FRAGMENT_DEFINITION,
              name: {
                kind: D.NAME,
                value: n.name
              },
              selectionSet: {
                kind: bt.SELECTION_SET,
                selections: []
              },
              typeCondition: {
                kind: bt.NAMED_TYPE,
                name: {
                  kind: D.NAME,
                  value: n.type
                }
              }
            });
          }
        }));
        return t;
      }(r);
      if (i && i.length > 0) {
        s.push(...i);
      }
      var u = s.filter((e => a[e.typeCondition.name.value] && !(o && o.kind === bt.FRAGMENT_DEFINITION && o.name === e.name.value) && _(t.parentType) && _(a[e.typeCondition.name.value]) && j(n, t.parentType, a[e.typeCondition.name.value])));
      return hintList$1(e, u.map((e => ({
        label: e.name.value,
        detail: String(a[e.typeCondition.name.value]),
        documentation: `fragment ${e.name.value} on ${e.typeCondition.name.value}`,
        kind: It.Field,
        type: a[e.typeCondition.name.value]
      }))));
    }(u, p, e, t, Array.isArray(i) ? i : collectFragmentDefs(i));
  }
  var T = unwrapType(c);
  if (l === Nt.TYPE_SYSTEM && !T.needsAdvance && d === bt.NAMED_TYPE || d === bt.LIST_TYPE) {
    if (T.kind === bt.FIELD_DEF) {
      return hintList$1(u, Object.values(e.getTypeMap()).filter((e => O(e) && !e.name.startsWith("__"))).map((e => ({
        label: e.name,
        kind: It.Function
      }))));
    }
    if (T.kind === bt.INPUT_VALUE_DEF) {
      return hintList$1(u, Object.values(e.getTypeMap()).filter((e => M(e) && !e.name.startsWith("__"))).map((e => ({
        label: e.name,
        kind: It.Function
      }))));
    }
  }
  if (d === bt.VARIABLE_DEFINITION && 2 === f || d === bt.LIST_TYPE && 1 === f || d === bt.NAMED_TYPE && v && (v.kind === bt.VARIABLE_DEFINITION || v.kind === bt.LIST_TYPE || v.kind === bt.NON_NULL_TYPE)) {
    return function getSuggestionsForVariableDefinition(e, t, n) {
      var r = t.getTypeMap();
      var i = objectValues(r).filter(M);
      return hintList$1(e, i.map((e => ({
        label: e.name,
        documentation: e.description,
        kind: It.Variable
      }))));
    }(u, e);
  }
  if (d === bt.DIRECTIVE) {
    return function getSuggestionsForDirective(e, t, n, r) {
      var i;
      if (null === (i = t.prevState) || void 0 === i ? void 0 : i.kind) {
        var a = n.getDirectives().filter((e => function canUseDirective(e, t) {
          if (!(null == e ? void 0 : e.kind)) {
            return !1;
          }
          var {kind: n, prevState: r} = e;
          var {locations: i} = t;
          switch (n) {
           case bt.QUERY:
            return i.includes(V.QUERY);

           case bt.MUTATION:
            return i.includes(V.MUTATION);

           case bt.SUBSCRIPTION:
            return i.includes(V.SUBSCRIPTION);

           case bt.FIELD:
           case bt.ALIASED_FIELD:
            return i.includes(V.FIELD);

           case bt.FRAGMENT_DEFINITION:
            return i.includes(V.FRAGMENT_DEFINITION);

           case bt.FRAGMENT_SPREAD:
            return i.includes(V.FRAGMENT_SPREAD);

           case bt.INLINE_FRAGMENT:
            return i.includes(V.INLINE_FRAGMENT);

           case bt.SCHEMA_DEF:
            return i.includes(V.SCHEMA);

           case bt.SCALAR_DEF:
            return i.includes(V.SCALAR);

           case bt.OBJECT_TYPE_DEF:
            return i.includes(V.OBJECT);

           case bt.FIELD_DEF:
            return i.includes(V.FIELD_DEFINITION);

           case bt.INTERFACE_DEF:
            return i.includes(V.INTERFACE);

           case bt.UNION_DEF:
            return i.includes(V.UNION);

           case bt.ENUM_DEF:
            return i.includes(V.ENUM);

           case bt.ENUM_VALUE:
            return i.includes(V.ENUM_VALUE);

           case bt.INPUT_DEF:
            return i.includes(V.INPUT_OBJECT);

           case bt.INPUT_VALUE_DEF:
            switch (null == r ? void 0 : r.kind) {
             case bt.ARGUMENTS_DEF:
              return i.includes(V.ARGUMENT_DEFINITION);

             case bt.INPUT_DEF:
              return i.includes(V.INPUT_FIELD_DEFINITION);
            }
          }
          return !1;
        }(t.prevState, e)));
        return hintList$1(e, a.map((e => ({
          label: e.name,
          documentation: e.description || "",
          kind: It.Function
        }))));
      }
      return [];
    }(u, c, e);
  }
  return [];
}

var Dt = " {\n  $1\n}";

var getInsertText = e => {
  var {type: t} = e;
  if (_(t)) {
    return Dt;
  }
  if (B(t) && _(t.ofType)) {
    return Dt;
  }
  if (Q(t)) {
    if (_(t.ofType)) {
      return Dt;
    }
    if (B(t.ofType) && _(t.ofType.ofType)) {
      return Dt;
    }
  }
  return null;
};

var getParentDefinition$1 = (e, t) => {
  var n, r, i, a, o, s, u, c, l, d;
  if ((null === (n = e.prevState) || void 0 === n ? void 0 : n.kind) === t) {
    return e.prevState;
  }
  if ((null === (i = null === (r = e.prevState) || void 0 === r ? void 0 : r.prevState) || void 0 === i ? void 0 : i.kind) === t) {
    return e.prevState.prevState;
  }
  if ((null === (s = null === (o = null === (a = e.prevState) || void 0 === a ? void 0 : a.prevState) || void 0 === o ? void 0 : o.prevState) || void 0 === s ? void 0 : s.kind) === t) {
    return e.prevState.prevState.prevState;
  }
  if ((null === (d = null === (l = null === (c = null === (u = e.prevState) || void 0 === u ? void 0 : u.prevState) || void 0 === c ? void 0 : c.prevState) || void 0 === l ? void 0 : l.prevState) || void 0 === d ? void 0 : d.kind) === t) {
    return e.prevState.prevState.prevState.prevState;
  }
};

function getVariableCompletions(e, t, n) {
  var r = null;
  var i;
  var a = Object.create({});
  runOnlineParser$1(e, ((e, o) => {
    if ((null == o ? void 0 : o.kind) === bt.VARIABLE && o.name) {
      r = o.name;
    }
    if ((null == o ? void 0 : o.kind) === bt.NAMED_TYPE && r) {
      var s = getParentDefinition$1(o, bt.TYPE);
      if (null == s ? void 0 : s.type) {
        i = t.getType(null == s ? void 0 : s.type);
      }
    }
    if (r && i && !a[r]) {
      a[r] = {
        detail: i.toString(),
        insertText: "$" === n.string ? r : "$" + r,
        label: r,
        type: i,
        kind: It.Variable
      };
      r = null;
      i = null;
    }
  }));
  return objectValues(a);
}

function getTokenAtPosition(e, t, n = 0) {
  var r = null;
  var i = null;
  var a = null;
  var o = runOnlineParser$1(e, ((e, o, s, u) => {
    if (u !== t.line || e.getCurrentPosition() + n < t.character + 1) {
      return;
    }
    r = s;
    i = Object.assign({}, o);
    a = e.current();
    return "BREAK";
  }));
  return {
    start: o.start,
    end: o.end,
    string: a || o.string,
    state: i || o.state,
    style: r || o.style
  };
}

function runOnlineParser$1(n, r) {
  var i = n.split("\n");
  var a = t();
  var o = a.startState();
  var s = "";
  var u = new e("");
  for (var c = 0; c < i.length; c++) {
    u = new e(i[c]);
    while (!u.eol()) {
      if ("BREAK" === r(u, o, s = a.token(u, o), c)) {
        break;
      }
    }
    r(u, o, s, c);
    if (!o.kind) {
      o = a.startState();
    }
  }
  return {
    start: u.getStartOfToken(),
    end: u.getCurrentPosition(),
    string: u.current(),
    state: o,
    style: s
  };
}

function getTypeInfo(e, t) {
  var n;
  var r;
  var i;
  var a;
  var o;
  var s;
  var u;
  var c;
  var l;
  var d;
  var f;
  forEachState(t, (t => {
    var v;
    switch (t.kind) {
     case bt.QUERY:
     case "ShortQuery":
      d = e.getQueryType();
      break;

     case bt.MUTATION:
      d = e.getMutationType();
      break;

     case bt.SUBSCRIPTION:
      d = e.getSubscriptionType();
      break;

     case bt.INLINE_FRAGMENT:
     case bt.FRAGMENT_DEFINITION:
      if (t.type) {
        d = e.getType(t.type);
      }
      break;

     case bt.FIELD:
     case bt.ALIASED_FIELD:
      if (!d || !t.name) {
        o = null;
      } else {
        o = l ? getFieldDef(e, l, t.name) : null;
        d = o ? o.type : null;
      }
      break;

     case bt.SELECTION_SET:
      l = x(d);
      break;

     case bt.DIRECTIVE:
      i = t.name ? e.getDirective(t.name) : null;
      break;

     case bt.INTERFACE_DEF:
      if (t.name) {
        u = null;
        f = new X({
          name: t.name,
          interfaces: [],
          fields: {}
        });
      }
      break;

     case bt.OBJECT_TYPE_DEF:
      if (t.name) {
        f = null;
        u = new W({
          name: t.name,
          interfaces: [],
          fields: {}
        });
      }
      break;

     case bt.ARGUMENTS:
      if (t.prevState) {
        switch (t.prevState.kind) {
         case bt.FIELD:
          r = o && o.args;
          break;

         case bt.DIRECTIVE:
          r = i && i.args;
          break;

         case bt.ALIASED_FIELD:
          var p = null === (v = t.prevState) || void 0 === v ? void 0 : v.name;
          if (!p) {
            r = null;
            break;
          }
          var g = l ? getFieldDef(e, l, p) : null;
          if (!g) {
            r = null;
            break;
          }
          r = g.args;
          break;

         default:
          r = null;
        }
      } else {
        r = null;
      }
      break;

     case bt.ARGUMENT:
      if (r) {
        for (var m = 0; m < r.length; m++) {
          if (r[m].name === t.name) {
            n = r[m];
            break;
          }
        }
      }
      s = null == n ? void 0 : n.type;
      break;

     case bt.ENUM_VALUE:
      var E = x(s);
      a = E instanceof w ? E.getValues().find((e => e.value === t.name)) : null;
      break;

     case bt.LIST_VALUE:
      var h = z(s);
      s = h instanceof K ? h.ofType : null;
      break;

     case bt.OBJECT_VALUE:
      var T = x(s);
      c = T instanceof J ? T.getFields() : null;
      break;

     case bt.OBJECT_FIELD:
      var y = t.name && c ? c[t.name] : null;
      s = null == y ? void 0 : y.type;
      break;

     case bt.NAMED_TYPE:
      if (t.name) {
        d = e.getType(t.name);
      }
    }
  }));
  return {
    argDef: n,
    argDefs: r,
    directiveDef: i,
    enumValue: a,
    fieldDef: o,
    inputType: s,
    objectFieldDefs: c,
    parentType: l,
    type: d,
    interfaceDef: f,
    objectTypeDef: u
  };
}

var Nt;

!function(e) {
  e.TYPE_SYSTEM = "TYPE_SYSTEM";
  e.EXECUTABLE = "EXECUTABLE";
}(Nt || (Nt = {}));

function unwrapType(e) {
  if (e.prevState && e.kind && [ bt.NAMED_TYPE, bt.LIST_TYPE, bt.TYPE, bt.NON_NULL_TYPE ].includes(e.kind)) {
    return unwrapType(e.prevState);
  }
  return e;
}

function getHoverInformation(e, t, n, r, i) {
  var a = r || getTokenAtPosition(t, n);
  if (!e || !a || !a.state) {
    return "";
  }
  var {kind: o, step: s} = a.state;
  var u = getTypeInfo(e, a.state);
  var c = Object.assign(Object.assign({}, i), {
    schema: e
  });
  if ("Field" === o && 0 === s && u.fieldDef || "AliasedField" === o && 2 === s && u.fieldDef) {
    var l = [];
    renderMdCodeStart(l, c);
    !function renderField(e, t, n) {
      renderQualifiedField(e, t, n);
      renderTypeAnnotation(e, t, n, t.type);
    }(l, u, c);
    renderMdCodeEnd(l, c);
    renderDescription(l, c, u.fieldDef);
    return l.join("").trim();
  }
  if ("Directive" === o && 1 === s && u.directiveDef) {
    var d = [];
    renderMdCodeStart(d, c);
    renderDirective(d, u);
    renderMdCodeEnd(d, c);
    renderDescription(d, c, u.directiveDef);
    return d.join("").trim();
  }
  if ("Argument" === o && 0 === s && u.argDef) {
    var f = [];
    renderMdCodeStart(f, c);
    !function renderArg(e, t, n) {
      if (t.directiveDef) {
        renderDirective(e, t);
      } else if (t.fieldDef) {
        renderQualifiedField(e, t, n);
      }
      if (!t.argDef) {
        return;
      }
      var {name: r} = t.argDef;
      text(e, "(");
      text(e, r);
      renderTypeAnnotation(e, t, n, t.inputType);
      text(e, ")");
    }(f, u, c);
    renderMdCodeEnd(f, c);
    renderDescription(f, c, u.argDef);
    return f.join("").trim();
  }
  if ("EnumValue" === o && u.enumValue && "description" in u.enumValue) {
    var v = [];
    renderMdCodeStart(v, c);
    !function renderEnumValue(e, t, n) {
      if (!t.enumValue) {
        return;
      }
      var {name: r} = t.enumValue;
      renderType(e, t, n, t.inputType);
      text(e, ".");
      text(e, r);
    }(v, u, c);
    renderMdCodeEnd(v, c);
    renderDescription(v, c, u.enumValue);
    return v.join("").trim();
  }
  if ("NamedType" === o && u.type && "description" in u.type) {
    var p = [];
    renderMdCodeStart(p, c);
    renderType(p, u, c, u.type);
    renderMdCodeEnd(p, c);
    renderDescription(p, c, u.type);
    return p.join("").trim();
  }
  return "";
}

function renderMdCodeStart(e, t) {
  if (t.useMarkdown) {
    text(e, "```graphql\n");
  }
}

function renderMdCodeEnd(e, t) {
  if (t.useMarkdown) {
    text(e, "\n```");
  }
}

function renderQualifiedField(e, t, n) {
  if (!t.fieldDef) {
    return;
  }
  var r = t.fieldDef.name;
  if ("__" !== r.slice(0, 2)) {
    renderType(e, t, n, t.parentType);
    text(e, ".");
  }
  text(e, r);
}

function renderDirective(e, t, n) {
  if (!t.directiveDef) {
    return;
  }
  text(e, "@" + t.directiveDef.name);
}

function renderTypeAnnotation(e, t, n, r) {
  text(e, ": ");
  renderType(e, t, n, r);
}

function renderType(e, t, n, r) {
  if (!r) {
    return;
  }
  if (r instanceof H) {
    renderType(e, t, n, r.ofType);
    text(e, "!");
  } else if (r instanceof K) {
    text(e, "[");
    renderType(e, t, n, r.ofType);
    text(e, "]");
  } else {
    text(e, r.name);
  }
}

function renderDescription(e, t, n) {
  if (!n) {
    return;
  }
  var r = "string" == typeof n.description ? n.description : null;
  if (r) {
    text(e, "\n\n");
    text(e, r);
  }
  !function renderDeprecation(e, t, n) {
    if (!n) {
      return;
    }
    var r = n.deprecationReason || null;
    if (!r) {
      return;
    }
    text(e, "\n\n");
    text(e, "Deprecated: ");
    text(e, r);
  }(e, 0, n);
}

function text(e, t) {
  e.push(t);
}

class Cursor {
  constructor(e, t) {
    this.line = e;
    this.character = t;
  }
  setLine(e) {
    this.line = e;
  }
  setCharacter(e) {
    this.character = e;
  }
  lessThanOrEqualTo(e) {
    return this.line < e.line || this.line === e.line && this.character <= e.character;
  }
}

var getToken = (n, r) => {
  var i = n.getText().slice(1, -1).split("\n");
  var a = t();
  var o = a.startState();
  var s = n.getStart() + 1;
  var u = void 0;
  var c = void 0;
  for (var l = 0; l < i.length; l++) {
    if (u) {
      continue;
    }
    var d = s - 1;
    var f = new e(i[l] + "\n");
    while (!f.eol()) {
      var v = a.token(f, o);
      var p = f.current();
      if (d + f.getStartOfToken() + 1 <= r && d + f.getCurrentPosition() >= r) {
        u = c ? c : {
          line: l,
          start: f.getStartOfToken() + 1,
          end: f.getCurrentPosition(),
          string: p,
          state: o,
          tokenKind: v
        };
        break;
      } else if ("on" === p) {
        c = {
          line: l,
          start: f.getStartOfToken() + 1,
          end: f.getCurrentPosition(),
          string: p,
          state: o,
          tokenKind: v
        };
      } else {
        c = void 0;
      }
    }
    s += i[l].length + 1;
  }
  return u;
};

function hintList(e, t) {
  return function filterAndSortList(e, t) {
    if (!t) {
      return filterNonEmpty(e, (e => !e.isDeprecated));
    }
    var n = e.map((e => ({
      proximity: getProximity(normalizeText(e.label), t),
      entry: e
    })));
    return filterNonEmpty(filterNonEmpty(n, (e => e.proximity <= 2)), (e => !e.entry.isDeprecated)).sort(((e, t) => (e.entry.isDeprecated ? 1 : 0) - (t.entry.isDeprecated ? 1 : 0) || e.proximity - t.proximity || e.entry.label.length - t.entry.label.length)).map((e => e.entry));
  }(t, normalizeText(e.string));
}

function filterNonEmpty(e, t) {
  var n = e.filter(t);
  return 0 === n.length ? e : n;
}

function normalizeText(e) {
  return e.toLowerCase().replace(/\W/g, "");
}

function getProximity(e, t) {
  var n = function lexicalDistance(e, t) {
    var n;
    var r;
    var i = [];
    var a = e.length;
    var o = t.length;
    for (n = 0; n <= a; n++) {
      i[n] = [ n ];
    }
    for (r = 1; r <= o; r++) {
      i[0][r] = r;
    }
    for (n = 1; n <= a; n++) {
      for (r = 1; r <= o; r++) {
        var s = e[n - 1] === t[r - 1] ? 0 : 1;
        i[n][r] = Math.min(i[n - 1][r] + 1, i[n][r - 1] + 1, i[n - 1][r - 1] + s);
        if (n > 1 && r > 1 && e[n - 1] === t[r - 2] && e[n - 2] === t[r - 1]) {
          i[n][r] = Math.min(i[n][r], i[n - 2][r - 2] + s);
        }
      }
    }
    return i[a][o];
  }(t, e);
  if (e.length > t.length) {
    n -= e.length - t.length - 1;
    n += 0 === e.indexOf(t) ? 0 : .5;
  }
  return n;
}

function getGraphQLCompletions(e, t, d, f) {
  var v = f.config.templateIsCallExpression ?? !0;
  var p = n(f, e);
  if (!p) {
    return;
  }
  var g = r(p, t);
  if (!g) {
    return;
  }
  g = v ? i(g) : a(g);
  var m, E;
  if (o.isCallExpression(g) && v && s.has(g.expression.getText()) && g.arguments.length > 0 && o.isNoSubstitutionTemplateLiteral(g.arguments[0])) {
    var h = getToken(g.arguments[0], t);
    if (!d.current || !h) {
      return;
    }
    m = `${g.arguments[0].getText().slice(1, -1)}\n${u(e, g, f).map((e => c(e))).join("\n")}`;
    E = new Cursor(h.line, h.start - 1);
  } else if (o.isTaggedTemplateExpression(g)) {
    var {template: T, tag: y} = g;
    if (!o.isIdentifier(y) || !s.has(y.text)) {
      return;
    }
    var I = getToken(T, t);
    if (!I || !d.current) {
      return;
    }
    var {combinedText: b, resolvedSpans: S} = l(g, e, f);
    var N = S.filter((e => e.original.start < t && e.original.start + e.original.length < t)).reduce(((e, t) => e + (t.lines - 1)), 0);
    I.line = I.line + N;
    m = b;
    E = new Cursor(I.line, I.start - 1);
  } else {
    return;
  }
  var [A, k] = function getSuggestionsInternal(e, t, n) {
    var r = getTokenAtPosition(t, n);
    var i = [];
    try {
      i = $(t, {
        noLocation: !0
      }).definitions.filter((e => e.kind === D.FRAGMENT_DEFINITION));
    } catch (e) {}
    var a = "on" === r.string && "TypeCondition" === r.state.kind;
    var o = getAutocompleteSuggestions(e, t, n, a ? {
      ...r,
      state: {
        ...r.state,
        step: 1
      },
      type: null
    } : void 0);
    var s = !a ? function getSuggestionsForFragmentSpread(e, t, n, r, i) {
      if (!r) {
        return [];
      }
      var a = n.getTypeMap();
      var o = getDefinitionState(e.state);
      return hintList(e, i.filter((e => a[e.typeCondition.name.value] && !(o && o.kind === bt.FRAGMENT_DEFINITION && o.name === e.name.value) && _(t.parentType) && _(a[e.typeCondition.name.value]) && j(n, t.parentType, a[e.typeCondition.name.value]))).map((e => ({
        label: e.name.value,
        detail: String(a[e.typeCondition.name.value]),
        documentation: `fragment ${e.name.value} on ${e.typeCondition.name.value}`,
        kind: It.Field,
        type: a[e.typeCondition.name.value]
      }))));
    }(r, getTypeInfo(e, r.state), e, t, i) : [];
    var u = "Invalid" === r.state.kind ? r.state.prevState : r.state;
    var c = getParentDefinition(r.state, bt.FIELD)?.name;
    if (u && c) {
      var {kind: l} = u;
      if (l === bt.ARGUMENTS || l === bt.ARGUMENT) {
        var d = new Set;
        runOnlineParser(t, ((e, t) => {
          if (t.kind === bt.ARGUMENT) {
            var n = getParentDefinition(t, bt.FIELD);
            if (c && t.name && n?.name === c) {
              d.add(t.name);
            }
          }
        }));
        o = o.filter((e => !d.has(e.label)));
      }
      if (l === bt.SELECTION_SET || l === bt.FIELD || l === bt.ALIASED_FIELD) {
        var f = new Set;
        var v = getUsedFragments(t, c);
        runOnlineParser(t, ((e, t) => {
          if (t.kind === bt.FIELD || t.kind === bt.ALIASED_FIELD) {
            var n = getParentDefinition(t, bt.FIELD);
            if (n && n.name === c && t.name) {
              f.add(t.name);
            }
          }
        }));
        o = o.filter((e => !f.has(e.label)));
        s = s.filter((e => !v.has(e.label)));
      }
      if (l === bt.FRAGMENT_SPREAD) {
        var p = getUsedFragments(t, c);
        o = o.filter((e => !p.has(e.label)));
        s = s.filter((e => !p.has(e.label)));
      }
    }
    return [ o, s ];
  }(d.current, m, E);
  return {
    isGlobalCompletion: !1,
    isMemberCompletion: !1,
    isNewIdentifierLocation: !1,
    entries: [ ...A.map((e => ({
      ...e,
      kind: o.ScriptElementKind.variableElement,
      name: e.label,
      kindModifiers: "declare",
      sortText: e.sortText || "0",
      labelDetails: {
        detail: e.type ? " " + e.type?.toString() : void 0,
        description: e.documentation
      }
    }))), ...k.map((e => ({
      ...e,
      kind: o.ScriptElementKind.variableElement,
      name: e.label,
      insertText: "..." + e.label,
      kindModifiers: "declare",
      sortText: "0",
      labelDetails: {
        description: e.documentation
      }
    }))) ]
  };
}

function getUsedFragments(e, t) {
  var n = new Set;
  runOnlineParser(e, ((e, r) => {
    if (r.kind === bt.FRAGMENT_SPREAD && r.name) {
      var i = getParentDefinition(r, bt.FIELD);
      if (t && i?.name === t) {
        n.add(r.name);
      }
    }
  }));
  return n;
}

function getParentDefinition(e, t) {
  if (e.prevState?.kind === t) {
    return e.prevState;
  }
  if (e.prevState?.prevState?.kind === t) {
    return e.prevState.prevState;
  }
  if (e.prevState?.prevState?.prevState?.kind === t) {
    return e.prevState.prevState.prevState;
  }
  if (e.prevState?.prevState?.prevState?.prevState?.kind === t) {
    return e.prevState.prevState.prevState.prevState;
  }
}

function runOnlineParser(n, r) {
  var i = n.split("\n");
  var a = t();
  var o = a.startState();
  var s = "";
  var u = new e("");
  for (var c = 0; c < i.length; c++) {
    u = new e(i[c]);
    while (!u.eol()) {
      if ("BREAK" === r(u, o, s = a.token(u, o), c)) {
        break;
      }
    }
    r(u, o, s, c);
    if (!o.kind) {
      o = a.startState();
    }
  }
  return {
    start: u.getStartOfToken(),
    end: u.getCurrentPosition(),
    string: u.current(),
    state: o,
    style: s
  };
}

function create(e) {
  var logger = t => e.project.projectService.logger.info(`[GraphQLSP] ${t}`);
  var t = e.config;
  logger("config: " + JSON.stringify(t));
  if (!t.schema) {
    logger('Missing "schema" option in configuration.');
    throw new Error("Please provide a GraphQL Schema!");
  }
  logger("Setting up the GraphQL Plugin");
  if (t.template) {
    s.add(t.template);
  }
  var u = function createBasicDecorator(e) {
    var t = Object.create(null);
    var _loop = function() {
      var r = e.languageService[n];
      t[n] = (...t) => r.apply(e.languageService, t);
    };
    for (var n of Object.keys(e.languageService)) {
      _loop();
    }
    return t;
  }(e);
  var c = ((e, t, n) => {
    var r = null;
    var i = {
      current: null,
      version: 0
    };
    (async () => {
      var a = await E(e.project.getProjectName()) || m.dirname(e.project.getProjectName());
      var o = e.config.tadaDisablePreprocessing ?? !1;
      var s = e.config.tadaOutputLocation && m.resolve(a, e.config.tadaOutputLocation);
      n("Got root-directory to resolve schema from: " + a);
      n('Resolving schema from "schema" config: ' + JSON.stringify(t));
      var u = h({
        origin: t,
        rootPath: a
      });
      try {
        n(`Loading schema from "${t}"`);
        r = await u.load();
      } catch (e) {
        n(`Failed to load schema: ${e}`);
      }
      if (r) {
        i.current = r && r.schema;
        i.version++;
        if (s) {
          saveTadaIntrospection(r.introspection, s, o, n);
        }
      }
      u.notifyOnUpdate((e => {
        n(`Got schema for origin "${t}"`);
        i.current = (r = e).schema;
        i.version++;
        if (s) {
          saveTadaIntrospection(r.introspection, s, o, n);
        }
      }));
    })();
    return i;
  })(e, t.schema, logger);
  u.getSemanticDiagnostics = t => {
    var n = e.languageService.getSemanticDiagnostics(t);
    if (n.some((e => f.includes(e.code)))) {
      return n;
    }
    var r = v(t, c, e);
    return r ? [ ...r, ...n ] : n;
  };
  u.getCompletionsAtPosition = (t, n, r) => {
    var i = getGraphQLCompletions(t, n, c, e);
    if (i && i.entries.length) {
      return i;
    } else {
      return e.languageService.getCompletionsAtPosition(t, n, r) || {
        isGlobalCompletion: !1,
        isMemberCompletion: !1,
        isNewIdentifierLocation: !1,
        entries: []
      };
    }
  };
  u.getEditsForRefactor = (t, n, r, i, a, o, s) => {
    var u = e.languageService.getEditsForRefactor(t, n, r, i, a, o, s);
    var c = p(t, "number" == typeof r ? r : r.pos, e);
    if (!c) {
      return u;
    }
    return {
      edits: [ {
        fileName: t,
        textChanges: [ {
          newText: c.replacement,
          span: c.span
        } ]
      } ]
    };
  };
  u.getApplicableRefactors = (t, n, r, i, a, o) => {
    var s = e.languageService.getApplicableRefactors(t, n, r, i, a, o);
    var u = p(t, "number" == typeof n ? n : n.pos, e);
    console.log("[GraphQLSP]", JSON.stringify(u));
    if (u) {
      return [ {
        name: "GraphQL",
        description: "Operations specific to gql.tada!",
        actions: [ {
          name: "Insert document-id",
          description: "Generate a document-id for your persisted-operation, by default a SHA256 hash."
        } ],
        inlineable: !0
      }, ...s ];
    } else {
      return s;
    }
  };
  u.getQuickInfoAtPosition = (t, u) => {
    var d = function getGraphQLQuickInfo(e, t, u, c) {
      var d = c.config.templateIsCallExpression ?? !0;
      var f = n(c, e);
      if (!f) {
        return;
      }
      var v = r(f, t);
      if (!v) {
        return;
      }
      v = d ? i(v) : a(v);
      var p, g;
      if (o.isCallExpression(v) && d && s.has(v.expression.getText()) && v.arguments.length > 0 && o.isNoSubstitutionTemplateLiteral(v.arguments[0])) {
        var m = getToken(v.arguments[0], t);
        if (!u.current || !m) {
          return;
        }
        g = v.arguments[0].getText();
        p = new Cursor(m.line, m.start - 1);
      } else if (o.isTaggedTemplateExpression(v)) {
        var {template: E, tag: h} = v;
        if (!o.isIdentifier(h) || !s.has(h.text)) {
          return;
        }
        var T = getToken(E, t);
        if (!T || !u.current) {
          return;
        }
        var {combinedText: y, resolvedSpans: I} = l(v, e, c);
        var b = I.filter((e => e.original.start < t && e.original.start + e.original.length < t)).reduce(((e, t) => e + (t.lines - 1)), 0);
        T.line = T.line + b;
        g = y;
        p = new Cursor(T.line, T.start - 1);
      } else {
        return;
      }
      var S = getHoverInformation(u.current, g, p);
      return {
        kind: o.ScriptElementKind.label,
        textSpan: {
          start: t,
          length: 1
        },
        kindModifiers: "text",
        documentation: Array.isArray(S) ? S.map((e => ({
          kind: "text",
          text: e
        }))) : [ {
          kind: "text",
          text: S
        } ]
      };
    }(t, u, c, e);
    if (d) {
      return d;
    }
    return e.languageService.getQuickInfoAtPosition(t, u);
  };
  logger("proxy: " + JSON.stringify(u));
  return u;
}

var init = e => {
  d(e);
  return {
    create
  };
};

export { init as default };
//# sourceMappingURL=graphqlsp.mjs.map
