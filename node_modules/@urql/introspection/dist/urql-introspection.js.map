{"version":3,"file":"urql-introspection.js","sources":["../src/getIntrospectedSchema.ts","../src/minifyIntrospectionQuery.ts"],"sourcesContent":["import type { IntrospectionQuery, GraphQLSchema } from 'graphql';\nimport { parse, buildSchema, execute, getIntrospectionQuery } from 'graphql';\n\n/** Returns an {@link IntrospectionQuery} result for a given GraphQL schema.\n *\n * @param input - A GraphQL schema, either as an SDL string, or a {@link GraphQLSchema} object.\n * @returns an {@link IntrospectionQuery} result.\n *\n * @remarks\n * `getIntrospectedSchema` can be used to get a Schema Introspection result from\n * a given GraphQL schema. The schema can be passed as an SDL string or a\n * {@link GraphQLSchema} object. If an {@link IntrospectionQuery} object is\n * passed, it'll be passed through.\n *\n * @throws\n * If `input` cannot be parsed or converted into a {@link GraphQLSchema} then\n * a {@link TypeError} will be thrown.\n */\nexport const getIntrospectedSchema = (\n  input: string | IntrospectionQuery | GraphQLSchema\n): IntrospectionQuery => {\n  if (typeof input === 'string') {\n    try {\n      input = JSON.parse(input);\n    } catch (_error) {\n      input = buildSchema(input as string);\n    }\n  }\n\n  if (typeof input === 'object' && '__schema' in input) {\n    return input;\n  }\n\n  const initialIntrospection: any = execute({\n    document: parse(getIntrospectionQuery({ descriptions: false })),\n    schema: input as GraphQLSchema,\n  });\n\n  if (!initialIntrospection.data || !initialIntrospection.data.__schema) {\n    throw new TypeError(\n      'GraphQL could not generate an IntrospectionQuery from the given schema.'\n    );\n  }\n\n  return initialIntrospection.data as IntrospectionQuery;\n};\n","import type {\n  IntrospectionQuery,\n  IntrospectionType,\n  IntrospectionTypeRef,\n  IntrospectionInputValue,\n  IntrospectionDirective,\n} from 'graphql';\n\nlet _includeScalars = false;\nlet _includeEnums = false;\nlet _includeInputs = false;\nlet _hasAnyType = false;\n\nconst anyType: IntrospectionTypeRef = {\n  kind: 'SCALAR',\n  name: 'Any',\n};\n\nconst mapType = (fromType: any): IntrospectionTypeRef => {\n  switch (fromType.kind) {\n    case 'NON_NULL':\n    case 'LIST':\n      return {\n        kind: fromType.kind,\n        ofType: mapType(fromType.ofType),\n      };\n\n    case 'SCALAR':\n      if (_includeScalars) {\n        return fromType;\n      } else {\n        _hasAnyType = true;\n        return anyType;\n      }\n\n    case 'INPUT_OBJECT':\n      if (_includeInputs) {\n        return fromType;\n      } else {\n        _hasAnyType = true;\n        return anyType;\n      }\n\n    case 'ENUM':\n      if (_includeEnums) {\n        return fromType;\n      } else {\n        _hasAnyType = true;\n        return anyType;\n      }\n\n    case 'OBJECT':\n    case 'INTERFACE':\n    case 'UNION':\n      return fromType;\n\n    default:\n      throw new TypeError(\n        `Unrecognized type reference of type: ${(fromType as any).kind}.`\n      );\n  }\n};\n\nconst minifyIntrospectionType = (\n  type: IntrospectionType\n): IntrospectionType => {\n  switch (type.kind) {\n    case 'SCALAR':\n      return {\n        kind: 'SCALAR',\n        name: type.name,\n      };\n\n    case 'ENUM':\n      return {\n        kind: 'ENUM',\n        name: type.name,\n        enumValues: type.enumValues.map(\n          value =>\n            ({\n              name: value.name,\n            }) as any\n        ),\n      };\n\n    case 'INPUT_OBJECT': {\n      return {\n        kind: 'INPUT_OBJECT',\n        name: type.name,\n        inputFields: type.inputFields.map(\n          field =>\n            ({\n              name: field.name,\n              type: mapType(field.type),\n              defaultValue: field.defaultValue || undefined,\n            }) as IntrospectionInputValue\n        ),\n      };\n    }\n\n    case 'OBJECT':\n      return {\n        kind: 'OBJECT',\n        name: type.name,\n        fields: type.fields.map(\n          field =>\n            ({\n              name: field.name,\n              type: field.type && mapType(field.type),\n              args:\n                field.args &&\n                field.args.map(arg => ({\n                  name: arg.name,\n                  type: mapType(arg.type),\n                })),\n            }) as any\n        ),\n        interfaces:\n          type.interfaces &&\n          type.interfaces.map(int => ({\n            kind: 'INTERFACE',\n            name: int.name,\n          })),\n      };\n\n    case 'INTERFACE':\n      return {\n        kind: 'INTERFACE',\n        name: type.name,\n        fields: type.fields.map(\n          field =>\n            ({\n              name: field.name,\n              type: field.type && mapType(field.type),\n              args:\n                field.args &&\n                field.args.map(arg => ({\n                  name: arg.name,\n                  type: mapType(arg.type),\n                })),\n            }) as any\n        ),\n        interfaces:\n          type.interfaces &&\n          type.interfaces.map(int => ({\n            kind: 'INTERFACE',\n            name: int.name,\n          })),\n        possibleTypes:\n          type.possibleTypes &&\n          type.possibleTypes.map(type => ({\n            kind: type.kind,\n            name: type.name,\n          })),\n      };\n\n    case 'UNION':\n      return {\n        kind: 'UNION',\n        name: type.name,\n        possibleTypes: type.possibleTypes.map(type => ({\n          kind: type.kind,\n          name: type.name,\n        })),\n      };\n\n    default:\n      return type;\n  }\n};\n\n/** Input parameters for the {@link minifyIntrospectionQuery} function. */\nexport interface MinifySchemaOptions {\n  /** Includes scalars instead of removing them.\n   *\n   * @remarks\n   * By default, all scalars will be replaced by a single scalar called `Any`\n   * in the output, unless this option is set to `true`.\n   */\n  includeScalars?: boolean;\n  /** Includes enums instead of removing them.\n   *\n   * @remarks\n   * By default, all enums will be replaced by a single scalar called `Any`\n   * in the output, unless this option is set to `true`.\n   */\n  includeEnums?: boolean;\n  /** Includes inputs instead of removing them.\n   *\n   * @remarks\n   * By default, all inputs will be replaced by a single scalar called `Any`\n   * in the output, unless this option is set to `true`.\n   */\n  includeInputs?: boolean;\n  /** Includes directives instead of removing them. */\n  includeDirectives?: boolean;\n}\n\n/** Minifies an {@link IntrospectionQuery} for use with Graphcache or the `populateExchange`.\n *\n * @param schema - An {@link IntrospectionQuery} object to be minified.\n * @param opts - An optional {@link MinifySchemaOptions} configuration object.\n * @returns the minified {@link IntrospectionQuery} object.\n *\n * @remarks\n * `minifyIntrospectionQuery` reduces the size of an {@link IntrospectionQuery} by\n * removing data and information that a client-side consumer, like Graphcache or the\n * `populateExchange`, may not require.\n *\n * At the very least, it will remove system types, descriptions, depreactions,\n * and source locations. Unless disabled via the options passed, it will also\n * by default remove all scalars, enums, inputs, and directives.\n *\n * @throws\n * If `schema` receives an object that isnâ€™t an {@link IntrospectionQuery}, a\n * {@link TypeError} will be thrown.\n */\nexport const minifyIntrospectionQuery = (\n  schema: IntrospectionQuery,\n  opts: MinifySchemaOptions = {}\n): IntrospectionQuery => {\n  if (!schema || !('__schema' in schema)) {\n    throw new TypeError('Expected to receive an IntrospectionQuery.');\n  }\n\n  _hasAnyType = false;\n  _includeScalars = !!opts.includeScalars;\n  _includeEnums = !!opts.includeEnums;\n  _includeInputs = !!opts.includeInputs;\n\n  const {\n    __schema: { queryType, mutationType, subscriptionType, types, directives },\n  } = schema;\n\n  const minifiedTypes = types\n    .filter(type => {\n      switch (type.name) {\n        case '__Directive':\n        case '__DirectiveLocation':\n        case '__EnumValue':\n        case '__InputValue':\n        case '__Field':\n        case '__Type':\n        case '__TypeKind':\n        case '__Schema':\n          return false;\n        default:\n          return (\n            (_includeScalars && type.kind === 'SCALAR') ||\n            (_includeEnums && type.kind === 'ENUM') ||\n            (_includeInputs && type.kind === 'INPUT_OBJECT') ||\n            type.kind === 'OBJECT' ||\n            type.kind === 'INTERFACE' ||\n            type.kind === 'UNION'\n          );\n      }\n    })\n    .map(minifyIntrospectionType);\n\n  if (_hasAnyType) {\n    minifiedTypes.push({ kind: 'SCALAR', name: anyType.name });\n  }\n\n  let minifiedDirectives: IntrospectionDirective[] = [];\n  if (opts.includeDirectives) {\n    minifiedDirectives = (directives || []).map(directive => ({\n      name: directive.name,\n      isRepeatable: directive.isRepeatable ? true : undefined,\n      locations: directive.locations,\n      args: directive.args.map(\n        arg =>\n          ({\n            name: arg.name,\n            type: mapType(arg.type),\n            defaultValue: arg.defaultValue || undefined,\n          }) as IntrospectionInputValue\n      ),\n    }));\n  }\n\n  return {\n    __schema: {\n      queryType,\n      mutationType,\n      subscriptionType,\n      types: minifiedTypes,\n      directives: minifiedDirectives,\n    },\n  };\n};\n"],"names":["getIntrospectedSchema","input","JSON","parse","_error","buildSchema","initialIntrospection","execute","document","getIntrospectionQuery","descriptions","schema","data","__schema","TypeError","_includeScalars","_includeEnums","_includeInputs","_hasAnyType","anyType","kind","name","mapType","fromType","ofType","minifyIntrospectionType","type","enumValues","map","value","inputFields","field","defaultValue","undefined","fields","args","arg","interfaces","int","possibleTypes","minifyIntrospectionQuery","opts","includeScalars","includeEnums","includeInputs","queryType","mutationType","subscriptionType","types","directives","minifiedTypes","filter","push","minifiedDirectives","includeDirectives","directive","isRepeatable","locations"],"mappings":"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"}