import { IntrospectionQuery, GraphQLSchema } from 'graphql';

/** Returns an {@link IntrospectionQuery} result for a given GraphQL schema.
 *
 * @param input - A GraphQL schema, either as an SDL string, or a {@link GraphQLSchema} object.
 * @returns an {@link IntrospectionQuery} result.
 *
 * @remarks
 * `getIntrospectedSchema` can be used to get a Schema Introspection result from
 * a given GraphQL schema. The schema can be passed as an SDL string or a
 * {@link GraphQLSchema} object. If an {@link IntrospectionQuery} object is
 * passed, it'll be passed through.
 *
 * @throws
 * If `input` cannot be parsed or converted into a {@link GraphQLSchema} then
 * a {@link TypeError} will be thrown.
 */
declare const getIntrospectedSchema: (input: string | IntrospectionQuery | GraphQLSchema) => IntrospectionQuery;

/** Input parameters for the {@link minifyIntrospectionQuery} function. */
interface MinifySchemaOptions {
    /** Includes scalars instead of removing them.
     *
     * @remarks
     * By default, all scalars will be replaced by a single scalar called `Any`
     * in the output, unless this option is set to `true`.
     */
    includeScalars?: boolean;
    /** Includes enums instead of removing them.
     *
     * @remarks
     * By default, all enums will be replaced by a single scalar called `Any`
     * in the output, unless this option is set to `true`.
     */
    includeEnums?: boolean;
    /** Includes inputs instead of removing them.
     *
     * @remarks
     * By default, all inputs will be replaced by a single scalar called `Any`
     * in the output, unless this option is set to `true`.
     */
    includeInputs?: boolean;
    /** Includes directives instead of removing them. */
    includeDirectives?: boolean;
}
/** Minifies an {@link IntrospectionQuery} for use with Graphcache or the `populateExchange`.
 *
 * @param schema - An {@link IntrospectionQuery} object to be minified.
 * @param opts - An optional {@link MinifySchemaOptions} configuration object.
 * @returns the minified {@link IntrospectionQuery} object.
 *
 * @remarks
 * `minifyIntrospectionQuery` reduces the size of an {@link IntrospectionQuery} by
 * removing data and information that a client-side consumer, like Graphcache or the
 * `populateExchange`, may not require.
 *
 * At the very least, it will remove system types, descriptions, depreactions,
 * and source locations. Unless disabled via the options passed, it will also
 * by default remove all scalars, enums, inputs, and directives.
 *
 * @throws
 * If `schema` receives an object that isnâ€™t an {@link IntrospectionQuery}, a
 * {@link TypeError} will be thrown.
 */
declare const minifyIntrospectionQuery: (schema: IntrospectionQuery, opts?: MinifySchemaOptions) => IntrospectionQuery;

export { MinifySchemaOptions, getIntrospectedSchema, minifyIntrospectionQuery };
